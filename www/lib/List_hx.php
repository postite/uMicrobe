<?php
/**
 * Generated by Haxe 3.4.7
 * Haxe source file: /usr/local/lib/haxe/std/List.hx
 */

use \php\Boot;
use \_List\ListIterator;
use \_List\ListNode;

/**
 * A linked-list of elements. The list is composed of element container objects
 * that are chained together. It is optimized so that adding or removing an
 * element does not imply copying the whole list content every time.
 * @see https://haxe.org/manual/std-List.html
 */
class List_hx {
	/**
	 * @var ListNode
	 */
	public $h;
	/**
	 * @var int
	 * The length of `this` List.
	 */
	public $length;
	/**
	 * @var ListNode
	 */
	public $q;


	/**
	 * Creates a new empty list.
	 * 
	 * @return void
	 */
	public function __construct () {
		#/usr/local/lib/haxe/std/List.hx:44: characters 2-12
		$this->length = 0;
	}


	/**
	 * Adds element `item` at the end of `this` List.
	 * `this.length` increases by 1.
	 * 
	 * @param mixed $item
	 * 
	 * @return void
	 */
	public function add ($item) {
		#/usr/local/lib/haxe/std/List.hx:53: characters 2-38
		$x = new ListNode($item, null);
		#/usr/local/lib/haxe/std/List.hx:54: lines 54-57
		if ($this->h === null) {
			#/usr/local/lib/haxe/std/List.hx:55: characters 3-8
			$this->h = $x;
		} else {
			#/usr/local/lib/haxe/std/List.hx:57: characters 3-13
			$this->q->next = $x;
		}
		#/usr/local/lib/haxe/std/List.hx:58: characters 2-7
		$this->q = $x;
		#/usr/local/lib/haxe/std/List.hx:59: characters 2-10
		$this->length++;
	}


	/**
	 * Empties `this` List.
	 * This function does not traverse the elements, but simply sets the
	 * internal references to null and `this.length` to 0.
	 * 
	 * @return void
	 */
	public function clear () {
		#/usr/local/lib/haxe/std/List.hx:124: characters 2-10
		$this->h = null;
		#/usr/local/lib/haxe/std/List.hx:125: characters 2-10
		$this->q = null;
		#/usr/local/lib/haxe/std/List.hx:126: characters 2-12
		$this->length = 0;
	}


	/**
	 * Returns a list filtered with `f`. The returned list will contain all
	 * elements for which `f(x) == true`.
	 * 
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	public function filter ($f) {
		#/usr/local/lib/haxe/std/List.hx:211: characters 2-22
		$l2 = new List_hx();
		#/usr/local/lib/haxe/std/List.hx:212: characters 2-12
		$l = $this->h;
		#/usr/local/lib/haxe/std/List.hx:213: lines 213-218
		while ($l !== null) {
			#/usr/local/lib/haxe/std/List.hx:214: characters 3-18
			$v = $l->item;
			#/usr/local/lib/haxe/std/List.hx:215: characters 3-13
			$l = $l->next;
			#/usr/local/lib/haxe/std/List.hx:216: lines 216-217
			if ($f($v)) {
				#/usr/local/lib/haxe/std/List.hx:217: characters 4-13
				$l2->add($v);
			}
		}
		#/usr/local/lib/haxe/std/List.hx:219: characters 2-11
		return $l2;
	}


	/**
	 * Returns the first element of `this` List, or null if no elements exist.
	 * This function does not modify `this` List.
	 * 
	 * @return mixed
	 */
	public function first () {
		#/usr/local/lib/haxe/std/List.hx:81: characters 9-41
		if ($this->h === null) {
			#/usr/local/lib/haxe/std/List.hx:81: characters 25-29
			return null;
		} else {
			#/usr/local/lib/haxe/std/List.hx:81: characters 35-41
			return $this->h->item;
		}
	}


	/**
	 * Tells if `this` List is empty.
	 * 
	 * @return bool
	 */
	public function isEmpty () {
		#/usr/local/lib/haxe/std/List.hx:114: characters 2-20
		return $this->h === null;
	}


	/**
	 * Returns an iterator on the elements of the list.
	 * 
	 * @return ListIterator
	 */
	public function iterator () {
		#/usr/local/lib/haxe/std/List.hx:161: characters 2-31
		return new ListIterator($this->h);
	}


	/**
	 * Returns a string representation of `this` List, with `sep` separating
	 * each element.
	 * 
	 * @param string $sep
	 * 
	 * @return string
	 */
	public function join ($sep) {
		#/usr/local/lib/haxe/std/List.hx:192: characters 2-26
		$s = new \StringBuf();
		#/usr/local/lib/haxe/std/List.hx:193: characters 2-19
		$first = true;
		#/usr/local/lib/haxe/std/List.hx:194: characters 2-12
		$l = $this->h;
		#/usr/local/lib/haxe/std/List.hx:195: lines 195-202
		while ($l !== null) {
			#/usr/local/lib/haxe/std/List.hx:196: lines 196-199
			if ($first) {
				#/usr/local/lib/haxe/std/List.hx:197: characters 4-17
				$first = false;
			} else {
				#/usr/local/lib/haxe/std/List.hx:199: characters 4-14
				$s->add($sep);
			}
			#/usr/local/lib/haxe/std/List.hx:200: characters 3-16
			$s->add($l->item);
			#/usr/local/lib/haxe/std/List.hx:201: characters 3-13
			$l = $l->next;
		}
		#/usr/local/lib/haxe/std/List.hx:203: characters 2-21
		return $s->b;
	}


	/**
	 * Returns the last element of `this` List, or null if no elements exist.
	 * This function does not modify `this` List.
	 * 
	 * @return mixed
	 */
	public function last () {
		#/usr/local/lib/haxe/std/List.hx:90: characters 9-41
		if ($this->q === null) {
			#/usr/local/lib/haxe/std/List.hx:90: characters 25-29
			return null;
		} else {
			#/usr/local/lib/haxe/std/List.hx:90: characters 35-41
			return $this->q->item;
		}
	}


	/**
	 * Returns a new list where all elements have been converted by the
	 * function `f`.
	 * 
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	public function map ($f) {
		#/usr/local/lib/haxe/std/List.hx:227: characters 2-21
		$b = new List_hx();
		#/usr/local/lib/haxe/std/List.hx:228: characters 2-12
		$l = $this->h;
		#/usr/local/lib/haxe/std/List.hx:229: lines 229-233
		while ($l !== null) {
			#/usr/local/lib/haxe/std/List.hx:230: characters 3-18
			$v = $l->item;
			#/usr/local/lib/haxe/std/List.hx:231: characters 3-13
			$l = $l->next;
			#/usr/local/lib/haxe/std/List.hx:232: characters 3-14
			$b->add($f($v));
		}
		#/usr/local/lib/haxe/std/List.hx:234: characters 2-10
		return $b;
	}


	/**
	 * Returns the first element of `this` List, or null if no elements exist.
	 * The element is removed from `this` List.
	 * 
	 * @return mixed
	 */
	public function pop () {
		#/usr/local/lib/haxe/std/List.hx:100: lines 100-101
		if ($this->h === null) {
			#/usr/local/lib/haxe/std/List.hx:101: characters 3-14
			return null;
		}
		#/usr/local/lib/haxe/std/List.hx:102: characters 2-17
		$x = $this->h->item;
		#/usr/local/lib/haxe/std/List.hx:103: characters 2-12
		$this->h = $this->h->next;
		#/usr/local/lib/haxe/std/List.hx:104: lines 104-105
		if ($this->h === null) {
			#/usr/local/lib/haxe/std/List.hx:105: characters 3-11
			$this->q = null;
		}
		#/usr/local/lib/haxe/std/List.hx:106: characters 2-10
		$this->length--;
		#/usr/local/lib/haxe/std/List.hx:107: characters 2-10
		return $x;
	}


	/**
	 * Adds element `item` at the beginning of `this` List.
	 * `this.length` increases by 1.
	 * 
	 * @param mixed $item
	 * 
	 * @return void
	 */
	public function push ($item) {
		#/usr/local/lib/haxe/std/List.hx:68: characters 2-35
		$x = new ListNode($item, $this->h);
		#/usr/local/lib/haxe/std/List.hx:69: characters 2-7
		$this->h = $x;
		#/usr/local/lib/haxe/std/List.hx:70: lines 70-71
		if ($this->q === null) {
			#/usr/local/lib/haxe/std/List.hx:71: characters 3-8
			$this->q = $x;
		}
		#/usr/local/lib/haxe/std/List.hx:72: characters 2-10
		$this->length++;
	}


	/**
	 * Removes the first occurrence of `v` in `this` List.
	 * If `v` is found by checking standard equality, it is removed from `this`
	 * List and the function returns true.
	 * Otherwise, false is returned.
	 * 
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	public function remove ($v) {
		#/usr/local/lib/haxe/std/List.hx:138: characters 2-30
		$prev = null;
		#/usr/local/lib/haxe/std/List.hx:139: characters 2-12
		$l = $this->h;
		#/usr/local/lib/haxe/std/List.hx:140: lines 140-153
		while ($l !== null) {
			#/usr/local/lib/haxe/std/List.hx:141: lines 141-150
			if (Boot::equal($l->item, $v)) {
				#/usr/local/lib/haxe/std/List.hx:142: lines 142-145
				if ($prev === null) {
					#/usr/local/lib/haxe/std/List.hx:143: characters 5-15
					$this->h = $l->next;
				} else {
					#/usr/local/lib/haxe/std/List.hx:145: characters 5-23
					$prev->next = $l->next;
				}
				#/usr/local/lib/haxe/std/List.hx:146: lines 146-147
				if ($this->q === $l) {
					#/usr/local/lib/haxe/std/List.hx:147: characters 5-13
					$this->q = $prev;
				}
				#/usr/local/lib/haxe/std/List.hx:148: characters 4-12
				$this->length--;
				#/usr/local/lib/haxe/std/List.hx:149: characters 4-15
				return true;
			}
			#/usr/local/lib/haxe/std/List.hx:151: characters 3-11
			$prev = $l;
			#/usr/local/lib/haxe/std/List.hx:152: characters 3-13
			$l = $l->next;
		}
		#/usr/local/lib/haxe/std/List.hx:154: characters 2-14
		return false;
	}


	/**
	 * Returns a string representation of `this` List.
	 * The result is enclosed in { } with the individual elements being
	 * separated by a comma.
	 * 
	 * @return string
	 */
	public function toString () {
		#/usr/local/lib/haxe/std/List.hx:171: characters 2-26
		$s = new \StringBuf();
		#/usr/local/lib/haxe/std/List.hx:172: characters 2-19
		$first = true;
		#/usr/local/lib/haxe/std/List.hx:173: characters 2-12
		$l = $this->h;
		#/usr/local/lib/haxe/std/List.hx:174: characters 2-12
		$s->add("{");
		#/usr/local/lib/haxe/std/List.hx:175: lines 175-182
		while ($l !== null) {
			#/usr/local/lib/haxe/std/List.hx:176: lines 176-179
			if ($first) {
				#/usr/local/lib/haxe/std/List.hx:177: characters 4-17
				$first = false;
			} else {
				#/usr/local/lib/haxe/std/List.hx:179: characters 4-15
				$s->add(", ");
			}
			#/usr/local/lib/haxe/std/List.hx:180: characters 3-28
			$s->add(\Std::string($l->item));
			#/usr/local/lib/haxe/std/List.hx:181: characters 3-13
			$l = $l->next;
		}
		#/usr/local/lib/haxe/std/List.hx:183: characters 2-12
		$s->add("}");
		#/usr/local/lib/haxe/std/List.hx:184: characters 2-21
		return $s->b;
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(List_hx::class, 'List');

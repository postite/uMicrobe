<?php

// Generated by Haxe 3.4.7
class asys_FileSystem {
	public function __construct(){}
	static function exists($path) {
		$GLOBALS['%s']->push("asys.FileSystem::exists");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(file_exists($path)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function rename($path, $newPath) {
		$GLOBALS['%s']->push("asys.FileSystem::rename");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			rename($path, $newPath);
			$v = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "FileSystem.hx", "lineNumber" => 220, "className" => "asys.FileSystem", "methodName" => "rename"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function stat($path) {
		$GLOBALS['%s']->push("asys.FileSystem::stat");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			$v = tink_core_Outcome::Success(sys_FileSystem::stat($path));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "FileSystem.hx", "lineNumber" => 226, "className" => "asys.FileSystem", "methodName" => "stat"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fullPath($relPath) {
		$GLOBALS['%s']->push("asys.FileSystem::fullPath");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			$p = realpath($relPath);
			$v1 = null;
			if(($p === false)) {
				$v1 = null;
			} else {
				$v1 = $p;
			}
			$v = tink_core_Outcome::Success($v1);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v2 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v2, _hx_anonymous(array("fileName" => "FileSystem.hx", "lineNumber" => 232, "className" => "asys.FileSystem", "methodName" => "fullPath"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function absolutePath($relPath) {
		$GLOBALS['%s']->push("asys.FileSystem::absolutePath");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = sys_FileSystem::absolutePath($relPath);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function isDirectory($path) {
		$GLOBALS['%s']->push("asys.FileSystem::isDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			$v = is_dir($path);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v = false;
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function createDirectory($path) {
		$GLOBALS['%s']->push("asys.FileSystem::createDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			{
				$path1 = haxe_io_Path::addTrailingSlash($path);
				$_p = null;
				$parts = (new _hx_array(array()));
				while(true) {
					$_p = haxe_io_Path::directory($path1);
					if(!($path1 !== $_p)) {
						break;
					}
					$parts->unshift($path1);
					$path1 = $_p;
				}
				{
					$_g = 0;
					while($_g < $parts->length) {
						$part = $parts[$_g];
						$_g = $_g + 1;
						$v1 = null;
						if(_hx_char_code_at($part, strlen($part) - 1) !== 58) {
							$v1 = !file_exists($part);
						} else {
							$v1 = false;
						}
						if($v1) {
							@mkdir($part, 493);
						}
						unset($v1,$part);
					}
				}
			}
			$v = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v2 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v2, _hx_anonymous(array("fileName" => "FileSystem.hx", "lineNumber" => 250, "className" => "asys.FileSystem", "methodName" => "createDirectory"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function deleteFile($path) {
		$GLOBALS['%s']->push("asys.FileSystem::deleteFile");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			unlink($path);
			$v = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "FileSystem.hx", "lineNumber" => 259, "className" => "asys.FileSystem", "methodName" => "deleteFile"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function deleteDirectory($path) {
		$GLOBALS['%s']->push("asys.FileSystem::deleteDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			rmdir($path);
			$v = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "FileSystem.hx", "lineNumber" => 268, "className" => "asys.FileSystem", "methodName" => "deleteDirectory"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function readDirectory($path) {
		$GLOBALS['%s']->push("asys.FileSystem::readDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			$v = tink_core_Outcome::Success(sys_FileSystem::readDirectory($path));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "FileSystem.hx", "lineNumber" => 274, "className" => "asys.FileSystem", "methodName" => "readDirectory"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'asys.FileSystem'; }
}

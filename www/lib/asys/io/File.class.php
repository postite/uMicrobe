<?php

// Generated by Haxe 3.4.7
class asys_io_File {
	public function __construct(){}
	static function readStream($path, $binary = null) {
		$GLOBALS['%s']->push("asys.io.File::readStream");
		$__hx__spos = $GLOBALS['%s']->length;
		if($binary === null) {
			$binary = true;
		}
		{
			$tmp = tink_io__Source_Source_Impl_::ofInput("asys read stream", sys_io_File::read($path, null), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function writeStream($path, $binary = null) {
		$GLOBALS['%s']->push("asys.io.File::writeStream");
		$__hx__spos = $GLOBALS['%s']->length;
		if($binary === null) {
			$binary = true;
		}
		{
			$tmp = tink_io__Sink_Sink_Impl_::ofOutput("asys write stream", sys_io_File::write($path, null), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function getContent($path) {
		$GLOBALS['%s']->push("asys.io.File::getContent");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			$v = tink_core_Outcome::Success(sys_io_File::getContent($path));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "File.hx", "lineNumber" => 215, "className" => "asys.io.File", "methodName" => "getContent"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function saveContent($path, $content) {
		$GLOBALS['%s']->push("asys.io.File::saveContent");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			sys_io_File::saveContent($path, $content);
			$v = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "File.hx", "lineNumber" => 224, "className" => "asys.io.File", "methodName" => "saveContent"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function getBytes($path) {
		$GLOBALS['%s']->push("asys.io.File::getBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			$v = tink_core_Outcome::Success(sys_io_File::getBytes($path));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "File.hx", "lineNumber" => 230, "className" => "asys.io.File", "methodName" => "getBytes"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function saveBytes($path, $bytes) {
		$GLOBALS['%s']->push("asys.io.File::saveBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			sys_io_File::saveBytes($path, $bytes);
			$v = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "File.hx", "lineNumber" => 239, "className" => "asys.io.File", "methodName" => "saveBytes"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function read($path, $binary = null) {
		$GLOBALS['%s']->push("asys.io.File::read");
		$__hx__spos = $GLOBALS['%s']->length;
		if($binary === null) {
			$binary = true;
		}
		$v = null;
		try {
			$v = tink_core_Outcome::Success(sys_io_File::read($path, $binary));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "File.hx", "lineNumber" => 245, "className" => "asys.io.File", "methodName" => "read"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function write($path, $binary = null) {
		$GLOBALS['%s']->push("asys.io.File::write");
		$__hx__spos = $GLOBALS['%s']->length;
		if($binary === null) {
			$binary = true;
		}
		$v = null;
		try {
			$v = tink_core_Outcome::Success(sys_io_File::write($path, $binary));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "File.hx", "lineNumber" => 251, "className" => "asys.io.File", "methodName" => "write"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function append($path, $binary = null) {
		$GLOBALS['%s']->push("asys.io.File::append");
		$__hx__spos = $GLOBALS['%s']->length;
		if($binary === null) {
			$binary = true;
		}
		$v = null;
		try {
			$v = tink_core_Outcome::Success(sys_io_File::append($path, $binary));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "File.hx", "lineNumber" => 257, "className" => "asys.io.File", "methodName" => "append"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function copy($srcPath, $dstPath) {
		$GLOBALS['%s']->push("asys.io.File::copy");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		try {
			sys_io_File::copy($srcPath, $dstPath);
			$v = tink_core_Outcome::Success(tink_core_Noise::$Noise);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$v1 = "" . Std::string($e);
				$v = tink_core_Outcome::Failure(new tink_core_TypedError(null, $v1, _hx_anonymous(array("fileName" => "File.hx", "lineNumber" => 266, "className" => "asys.io.File", "methodName" => "copy"))));
			}
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'asys.io.File'; }
}

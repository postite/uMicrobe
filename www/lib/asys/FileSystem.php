<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx
 */

namespace asys;

use \tink\core\Outcome;
use \sys\FileSystem as SysFileSystem;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\Noise;
use \haxe\CallStack;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;

class FileSystem {
	/**
	 * @param string $relPath
	 * 
	 * @return string
	 */
	static public function absolutePath ($relPath) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:236: characters 3-46
		return SysFileSystem::absolutePath($relPath);
	}


	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function createDirectory ($path) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:245: lines 245-251
		$v = null;
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:246: lines 246-250
		try {
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:247: characters 5-41
			if (!is_dir($path)) {
				#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:247: characters 5-41
				mkdir($path, 493, true);
			}
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:245: lines 245-251
			$v = Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:250: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:245: lines 245-251
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 250,
				"className" => "asys.FileSystem",
				"methodName" => "createDirectory",
			])));
		}
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:245: lines 245-251
		return new SyncFuture(new LazyConst($v));
	}


	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function deleteDirectory ($path) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:263: lines 263-269
		$v = null;
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:264: lines 264-268
		try {
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:265: characters 5-41
			rmdir($path);
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:263: lines 263-269
			$v = Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:268: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:263: lines 263-269
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 268,
				"className" => "asys.FileSystem",
				"methodName" => "deleteDirectory",
			])));
		}
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:263: lines 263-269
		return new SyncFuture(new LazyConst($v));
	}


	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function deleteFile ($path) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:254: lines 254-260
		$v = null;
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:255: lines 255-259
		try {
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:256: characters 5-36
			unlink($path);
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:254: lines 254-260
			$v = Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:259: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:254: lines 254-260
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 259,
				"className" => "asys.FileSystem",
				"methodName" => "deleteFile",
			])));
		}
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:254: lines 254-260
		return new SyncFuture(new LazyConst($v));
	}


	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function exists ($path) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:212: characters 10-50
		return new SyncFuture(new LazyConst(file_exists($path)));
	}


	/**
	 * @param string $relPath
	 * 
	 * @return FutureObject
	 */
	static public function fullPath ($relPath) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:230: lines 230-233
		$v = null;
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:231: lines 231-232
		try {
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:230: lines 230-233
			$v = Outcome::Success((realpath($relPath) ?: null));
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:232: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:230: lines 230-233
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 232,
				"className" => "asys.FileSystem",
				"methodName" => "fullPath",
			])));
		}
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:230: lines 230-233
		return new SyncFuture(new LazyConst($v));
	}


	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function isDirectory ($path) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:239: lines 239-242
		$v = null;
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:240: lines 240-241
		try {
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:239: lines 239-242
			$v = is_dir($path);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:239: lines 239-242
			$v = false;
		}
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:239: lines 239-242
		return new SyncFuture(new LazyConst($v));
	}


	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function readDirectory ($path) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:272: lines 272-275
		$v = null;
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:273: lines 273-274
		try {
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:272: lines 272-275
			$v = Outcome::Success(SysFileSystem::readDirectory($path));
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:274: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:272: lines 272-275
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 274,
				"className" => "asys.FileSystem",
				"methodName" => "readDirectory",
			])));
		}
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:272: lines 272-275
		return new SyncFuture(new LazyConst($v));
	}


	/**
	 * @param string $path
	 * @param string $newPath
	 * 
	 * @return FutureObject
	 */
	static public function rename ($path, $newPath) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:215: lines 215-221
		$v = null;
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:216: lines 216-220
		try {
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:217: characters 5-41
			rename($path, $newPath);
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:215: lines 215-221
			$v = Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:220: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:215: lines 215-221
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 220,
				"className" => "asys.FileSystem",
				"methodName" => "rename",
			])));
		}
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:215: lines 215-221
		return new SyncFuture(new LazyConst($v));
	}


	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function stat ($path) {
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:224: lines 224-227
		$v = null;
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:225: lines 225-226
		try {
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:224: lines 224-227
			$v = Outcome::Success(SysFileSystem::stat($path));
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:226: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:224: lines 224-227
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 226,
				"className" => "asys.FileSystem",
				"methodName" => "stat",
			])));
		}
		#/usr/local/lib/haxe/lib/asys/0,3,0/asys/FileSystem.hx:224: lines 224-227
		return new SyncFuture(new LazyConst($v));
	}
}


Boot::registerClass(FileSystem::class, 'asys.FileSystem');

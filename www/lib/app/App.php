<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: src/test/app/App.hx
 */

namespace app;

use \microbe\model\Article;
use \microbe\MicrobeInjector;
use \php\_Boot\HxException;
use \php\Boot;
use \haxe\Log;
use \sys\db\Sqlite;
use \sys\db\Transaction;
use \microbe\control\HomeController;
use \microbe\vo\FakeVo;
use \ufront\view\TemplatingEngines;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \ufront\app\UfrontApplication;

class App {
	/**
	 * @var UfrontApplication
	 */
	static public $ufApp;


	/**
	 * @return void
	 */
	static public function inject () {
		#src/test/app/App.hx:125: lines 125-128
		$m = \Array_hx::wrap([
			Boot::getClass(Article::class),
			Boot::getClass(FakeVo::class),
		]);
		#src/test/app/App.hx:129: characters 20-74
		$result = [];
		#src/test/app/App.hx:129: characters 20-74
		$_g1 = 0;
		#src/test/app/App.hx:129: characters 20-74
		$_g = $m->length;
		#src/test/app/App.hx:129: characters 20-74
		while ($_g1 < $_g) {
			#src/test/app/App.hx:129: characters 20-74
			$_g1 = $_g1 + 1;
			#src/test/app/App.hx:129: characters 20-74
			$i = $_g1 - 1;
			#src/test/app/App.hx:129: characters 20-74
			$result[] = new HxAnon(["name" => \Type::getClassName($m->arr[$i])]);
		}

		#src/test/app/App.hx:129: characters 9-83
		$models = \Lambda::array(\Array_hx::wrap($result));
		#src/test/app/App.hx:130: characters 9-70
		App::$ufApp->injector->mapType("Array<Dynamic>", "models", null)->toValue($models);
		#src/test/app/App.hx:131: characters 9-55
		MicrobeInjector::inject(App::$ufApp->injector);
		#src/test/app/App.hx:134: characters 9-79
		App::$ufApp->injector->mapType("String", "basePath", null)->toValue("http://localhost:8888");
		#src/test/app/App.hx:154: characters 9-57
		App::$ufApp->injector->mapType("middleware.ResponseSignal", null, null)->asSingleton();
	}


	/**
	 * @return void
	 */
	static public function main () {
		#src/test/app/App.hx:48: characters 33-55
		$tmp = TemplatingEngines::get_haxe();
		#src/test/app/App.hx:41: lines 41-54
		App::$ufApp = new UfrontApplication(new HxAnon([
			"indexController" => Boot::getClass(HomeController::class),
			"remotingApi" => Boot::getClass(Apis::class),
			"logFile" => "logs/app.log",
			"templatingEngines" => \Array_hx::wrap([
				$tmp,
				TemplatingEngines::get_erazor(),
			]),
			"defaultLayout" => "microbe/microbeLayout.html",
		]));
		#src/test/app/App.hx:58: characters 9-17
		App::inject();
		#src/test/app/App.hx:62: characters 9-14
		App::run();
	}


	/**
	 * @return void
	 */
	static public function run () {
		#src/test/app/App.hx:101: lines 101-113
		try {
			#src/test/app/App.hx:103: characters 13-54
			$cnx = Sqlite::open("table.db");
			#src/test/app/App.hx:107: lines 107-110
			Transaction::main($cnx, function () {
				#src/test/app/App.hx:109: characters 17-39
				App::$ufApp->executeRequest();
			});
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$msg = $__hx__real_e;
			#src/test/app/App.hx:112: characters 13-18
			throw (is_object($__hx__throw = $msg) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
		}
	}


	/**
	 * @return void
	 */
	public function __construct () {
		#src/test/app/App.hx:20: characters 9-14
		(Log::$trace)("yoooo", new HxAnon([
			"fileName" => "src/test/app/App.hx",
			"lineNumber" => 20,
			"className" => "app.App",
			"methodName" => "new",
		]));
	}
}


Boot::registerClass(App::class, 'app.App');

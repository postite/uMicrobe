<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx
 */

use \haxe\ds\StringMap;
use \php\Boot;
use \haxe\rtti\Meta;
use \haxe\ds\List_hx;
use \php\_Boot\HxAnon;

/**
 **
 * Copyright (c) 2013 Jason O'Neil
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 **
 */
class CompileTimeClassList {
	/**
	 * @var StringMap
	 */
	static public $lists = null;


	/**
	 * @param string $id
	 * 
	 * @return List_hx
	 */
	static public function get ($id) {
		#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:18: characters 3-34
		if (CompileTimeClassList::$lists === null) {
			#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:18: characters 22-34
			CompileTimeClassList::initialise();
		}
		#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:19: characters 10-23
		return (CompileTimeClassList::$lists->data[$id] ?? null);
	}


	/**
	 * @param string $id
	 * @param Class $type
	 * 
	 * @return List_hx
	 */
	static public function getTyped ($id, $type) {
		#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:24: characters 3-22
		return CompileTimeClassList::get($id);
	}


	/**
	 * @return void
	 */
	static public function initialise () {
		#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:29: characters 3-20
		CompileTimeClassList::$lists = new StringMap();
		#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:30: characters 3-56
		$m = Meta::getType(Boot::getClass(CompileTimeClassList::class));
		#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:31: lines 31-44
		if (Boot::dynamicField($m, 'classLists') !== null) {
			#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:33: lines 33-43
			$_g = 0;
			#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:33: lines 33-43
			$_g1 = Boot::dynamicField($m, 'classLists');
			#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:33: lines 33-43
			while ($_g < $_g1->length) {
				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:33: characters 9-13
				$item = ($_g1->arr[$_g] ?? null);
				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:33: lines 33-43
				$_g = $_g + 1;
				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:35: characters 5-41
				$array = $item;
				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:36: characters 5-27
				$listID = ($array->arr[0] ?? null);
				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:37: characters 5-27
				$list = new List_hx();
				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:38: lines 38-41
				$_g2 = 0;
				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:38: characters 23-42
				$_this = ($array->arr[1] ?? null);
				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:38: lines 38-41
				$_g3 = \Array_hx::wrap(explode(",", $_this));
				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:38: lines 38-41
				while ($_g2 < $_g3->length) {
					#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:38: characters 11-19
					$typeName = ($_g3->arr[$_g2] ?? null);
					#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:38: lines 38-41
					$_g2 = $_g2 + 1;
					#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:39: characters 6-45
					$type = \Type::resolveClass($typeName);
					#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:40: characters 6-41
					if ($type !== null) {
						#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:40: characters 24-41
						$list->push($type);
					}
				}

				#/usr/local/lib/haxe/lib/compiletime/2,6,0/src/CompileTimeClassList.hx:42: characters 5-28
				CompileTimeClassList::$lists->data[$listID] = $list;
			}
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(CompileTimeClassList::class, 'CompileTimeClassList');
Boot::registerMeta(CompileTimeClassList::class, new HxAnon(["obj" => new HxAnon(["classLists" => \Array_hx::wrap([
	\Array_hx::wrap([
		"null,true,ufront.web.Controller",
		"microbe.control.HomeController,microbe.control.MicrobeController,ufront.app.DefaultUfrontController",
	]),
	\Array_hx::wrap([
		"null,true,ufront.api.UFApi",
		"microbe.apis.ImageBaseApi,microbe.apis.MicrobialApi,microbe.apis.UpApi",
	]),
	\Array_hx::wrap([
		"null,true,ufront.web.Controller",
		"microbe.control.HomeController,microbe.control.MicrobeController,ufront.app.DefaultUfrontController",
	]),
	\Array_hx::wrap([
		"null,true,ufront.api.UFApi",
		"microbe.apis.ImageBaseApi,microbe.apis.MicrobialApi,microbe.apis.UpApi",
	]),
	\Array_hx::wrap([
		"null,true,ufront.web.client.UFClientAction",
		"microbe.result.MicrobeAction,microbe.result.MicrobeListAction",
	]),
	\Array_hx::wrap([
		"null,true,ufront.web.Controller",
		"microbe.control.HomeController,microbe.control.MicrobeController,ufront.app.DefaultUfrontController",
	]),
	\Array_hx::wrap([
		"null,true,ufront.api.UFApi",
		"microbe.apis.ImageBaseApi,microbe.apis.MicrobialApi,microbe.apis.UpApi",
	]),
	\Array_hx::wrap([
		"null,true,ufront.web.Controller",
		"microbe.control.HomeController,microbe.control.MicrobeController,ufront.app.DefaultUfrontController",
	]),
	\Array_hx::wrap([
		"null,true,ufront.api.UFApi",
		"microbe.apis.ImageBaseApi,microbe.apis.MicrobialApi,microbe.apis.UpApi",
	]),
	\Array_hx::wrap([
		"null,true,ufront.web.client.UFClientAction",
		"microbe.result.MicrobeAction,microbe.result.MicrobeListAction",
	]),
])])]));
CompileTimeClassList::__hx__init();

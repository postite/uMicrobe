<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/php/_std/EReg.hx
 */

use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

final /**
 * The EReg class represents regular expressions.
 * While basic usage and patterns consistently work across platforms, some more
 * complex operations may yield different results. This is a necessary trade-
 * off to retain a certain level of performance.
 * EReg instances can be created by calling the constructor, or with the
 * special syntax `~/pattern/modifier`
 * EReg instances maintain an internal state, which is affected by several of
 * its methods.
 * A detailed explanation of the supported operations is available at
 * <https://haxe.org/manual/std-regex.html>
 */
class EReg {
	/**
	 * @var bool
	 */
	public $global;
	/**
	 * @var string
	 */
	public $last;
	/**
	 * @var mixed
	 */
	public $matches;
	/**
	 * @var string
	 */
	public $options;
	/**
	 * @var string
	 */
	public $pattern;
	/**
	 * @var mixed
	 */
	public $r;
	/**
	 * @var string
	 */
	public $re;


	/**
	 * Escape the string `s` for use as a part of regular expression.
	 * If `s` is null, the result is unspecified.
	 * 
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function escape ($s) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:139: characters 3-30
		return preg_quote($s);
	}


	/**
	 * Creates a new regular expression with pattern `r` and modifiers `opt`.
	 * This is equivalent to the shorthand syntax `~/r/opt`
	 * If `r` or `opt` are null, the result is unspecified.
	 * 
	 * @param string $r
	 * @param string $opt
	 * 
	 * @return void
	 */
	public function __construct ($r, $opt) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:37: characters 3-19
		$this->pattern = $r;
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:38: characters 3-26
		$a = \Array_hx::wrap(explode("g", $opt));
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:39: characters 3-24
		$this->global = $a->length > 1;
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:40: lines 40-42
		if ($this->global) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:41: characters 4-20
			$opt = $a->join("");
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:43: characters 3-21
		$this->options = $opt;
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:44: characters 3-64
		$this->re = "\"" . (str_replace("\"", "\\\"", $r)??'null') . "\"" . ($opt??'null');
	}


	/**
	 * Calls the function `f` for the substring of `s` which `this` EReg matches
	 * and replaces that substring with the result of `f` call.
	 * The `f` function takes `this` EReg object as its first argument and should
	 * return a replacement string for the substring matched.
	 * If `this` EReg does not match any substring, the result is `s`.
	 * By default, this method replaces only the first matched substring. If
	 * the global g modifier is in place, all matched substrings are replaced.
	 * If `s` or `f` are null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param \Closure $f
	 * 
	 * @return string
	 */
	public function map ($s, $f) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:112: characters 3-18
		$offset = 0;
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:113: characters 3-29
		$buf = new \StringBuf();
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:114: lines 114-131
		while (true) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:115: lines 115-120
			if ($offset >= strlen($s)) {
				#/usr/local/lib/haxe/std/php/_std/EReg.hx:116: characters 5-10
				break;
			} else if (!$this->matchSub($s, $offset)) {
				#/usr/local/lib/haxe/std/php/_std/EReg.hx:118: characters 5-30
				$buf->add(HxString::substr($s, $offset));
				#/usr/local/lib/haxe/std/php/_std/EReg.hx:119: characters 5-10
				break;
			}
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:121: characters 4-25
			$p = $this->matchedPos();
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:122: characters 4-45
			$buf->add(HxString::substr($s, $offset, $p->pos - $offset));
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:123: characters 4-20
			$buf->add($f($this));
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:124: lines 124-130
			if ($p->len === 0) {
				#/usr/local/lib/haxe/std/php/_std/EReg.hx:125: characters 5-32
				$buf->add(HxString::substr($s, $p->pos, 1));
				#/usr/local/lib/haxe/std/php/_std/EReg.hx:126: characters 5-23
				$offset = $p->pos + 1;
			} else {
				#/usr/local/lib/haxe/std/php/_std/EReg.hx:129: characters 5-27
				$offset = $p->pos + $p->len;
			}
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:114: lines 114-131
			if (!$this->global) {
				#/usr/local/lib/haxe/std/php/_std/EReg.hx:114: lines 114-131
				break;
			}
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:132: lines 132-134
		if (!$this->global && ($offset > 0) && ($offset < strlen($s))) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:133: characters 4-29
			$buf->add(HxString::substr($s, $offset));
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:135: characters 3-24
		return $buf->b;
	}


	/**
	 * Tells if `this` regular expression matches String `s`.
	 * This method modifies the internal state.
	 * If `s` is `null`, the result is unspecified.
	 * 
	 * @param string $s
	 * 
	 * @return bool
	 */
	public function match ($s) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:48: characters 3-78
		$p = preg_match($this->re, $s, $this->matches, PREG_OFFSET_CAPTURE);
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:50: lines 50-54
		if ($p > 0) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:51: characters 4-12
			$this->last = $s;
		} else {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:53: characters 4-15
			$this->last = null;
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:55: characters 3-15
		return $p > 0;
	}


	/**
	 * Tells if `this` regular expression matches a substring of String `s`.
	 * This function expects `pos` and `len` to describe a valid substring of
	 * `s`, or else the result is unspecified. To get more robust behavior,
	 * `this.match(s.substr(pos,len))` can be used instead.
	 * This method modifies the internal state.
	 * If `s` is null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return bool
	 */
	public function matchSub ($s, $pos, $len = -1) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:85: lines 85-95
		if ($len === null) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:85: lines 85-95
			$len = -1;
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:86: characters 3-53
		$subject = ($len < 0 ? $s : HxString::substr($s, 0, $pos + $len));
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:87: characters 3-89
		$p = preg_match($this->re, $subject, $this->matches, PREG_OFFSET_CAPTURE, $pos);
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:88: lines 88-93
		if ($p > 0) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:89: characters 4-12
			$this->last = $s;
		} else {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:92: characters 4-15
			$this->last = null;
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:94: characters 3-15
		return $p > 0;
	}


	/**
	 * Returns the matched sub-group `n` of `this` EReg.
	 * This method should only be called after `this.match` or
	 * `this.matchSub`, and then operates on the String of that operation.
	 * The index `n` corresponds to the n-th set of parentheses in the pattern
	 * of `this` EReg. If no such sub-group exists, an exception is thrown.
	 * If `n` equals 0, the whole matched substring is returned.
	 * 
	 * @param int $n
	 * 
	 * @return string
	 */
	public function matched ($n) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:59: characters 3-39
		if (($this->matches === null) || ($n < 0)) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:59: characters 34-39
			throw new HxException("EReg::matched");
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:62: characters 3-46
		if ($n >= count($this->matches)) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:62: characters 35-46
			return null;
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:63: characters 3-43
		if ($this->matches[$n][1] < 0) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:63: characters 32-43
			return null;
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:64: characters 3-23
		return $this->matches[$n][0];
	}


	/**
	 * Returns the part to the left of the last matched substring.
	 * If the most recent call to `this.match` or `this.matchSub` did not
	 * match anything, the result is unspecified.
	 * If the global g modifier was in place for the matching, only the
	 * substring to the left of the leftmost match is returned.
	 * The result does not include the matched part.
	 * 
	 * @return string
	 */
	public function matchedLeft () {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:68: characters 3-40
		if (count($this->matches) === 0) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:68: characters 35-40
			throw new HxException("No string matched");
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:69: characters 3-39
		return HxString::substr($this->last, 0, $this->matches[0][1]);
	}


	/**
	 * Returns the position and length of the last matched substring, within
	 * the String which was last used as argument to `this.match` or
	 * `this.matchSub`.
	 * If the most recent call to `this.match` or `this.matchSub` did not
	 * match anything, the result is unspecified.
	 * If the global g modifier was in place for the matching, the position and
	 * length of the leftmost substring is returned.
	 * 
	 * @return object
	 */
	public function matchedPos () {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:80: characters 10-23
		$tmp = $this->matches[0][1];
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:79: lines 79-82
		return new HxAnon([
			"pos" => $tmp,
			"len" => strlen($this->matches[0][0]),
		]);
	}


	/**
	 * Returns the part to the right of the last matched substring.
	 * If the most recent call to `this.match` or `this.matchSub` did not
	 * match anything, the result is unspecified.
	 * If the global g modifier was in place for the matching, only the
	 * substring to the right of the leftmost match is returned.
	 * The result does not include the matched part.
	 * 
	 * @return string
	 */
	public function matchedRight () {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:73: characters 3-40
		if (count($this->matches) === 0) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:73: characters 35-40
			throw new HxException("No string matched");
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:74: characters 3-68
		$x = $this->matches[0][1] + strlen($this->matches[0][0]);
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:75: characters 3-24
		return HxString::substr($this->last, $x);
	}


	/**
	 * Replaces the first substring of `s` which `this` EReg matches with `by`.
	 * If `this` EReg does not match any substring, the result is `s`.
	 * By default, this method replaces only the first matched substring. If
	 * the global g modifier is in place, all matched substrings are replaced.
	 * If `by` contains `$1` to `$9`, the digit corresponds to number of a
	 * matched sub-group and its value is used instead. If no such sub-group
	 * exists, the replacement is unspecified. The string `$$` becomes `$`.
	 * If `s` or `by` are null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $by
	 * 
	 * @return string
	 */
	public function replace ($s, $by) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:103: characters 3-46
		$by = str_replace("\\\$", "\\\\\$", $by);
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:104: characters 3-43
		$by = str_replace("\$\$", "\\\$", $by);
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:105: lines 105-107
		if (!preg_match("/\\\\([^?].*?\\\\)/", $this->re)) {
			#/usr/local/lib/haxe/std/php/_std/EReg.hx:106: characters 4-57
			$by = preg_replace("/\\\$(\\d+)/", "\\\$\\1", $by);
		}
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:108: characters 3-57
		return preg_replace($this->re, $by, $s, ($this->global ? -1 : 1));
	}


	/**
	 * Splits String `s` at all substrings `this` EReg matches.
	 * If a match is found at the start of `s`, the result contains a leading
	 * empty String "" entry.
	 * If a match is found at the end of `s`, the result contains a trailing
	 * empty String "" entry.
	 * If two matching substrings appear next to each other, the result
	 * contains the empty String `""` between them.
	 * By default, this method splits `s` into two parts at the first matched
	 * substring. If the global g modifier is in place, `s` is split at each
	 * matched substring.
	 * If `s` is null, the result is unspecified.
	 * 
	 * @param string $s
	 * 
	 * @return \Array_hx
	 */
	public function split ($s) {
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:98: characters 3-71
		$parts = preg_split($this->re, $s, ($this->global ? -1 : 2));
		#/usr/local/lib/haxe/std/php/_std/EReg.hx:99: characters 3-43
		return \Array_hx::wrap($parts);
	}
}


Boot::registerClass(EReg::class, 'EReg');

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 * Haxe source file: /usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx
 */

namespace thx;

use \php\Boot;
use \php\_Boot\HxAnon;

class Orderings {
	/**
	 * @var object
	 */
	static public $monoid;


	/**
	 * @param OrderingImpl $o
	 * 
	 * @return OrderingImpl
	 */
	static public function negate ($o) {
		#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:36: lines 36-40
		switch ($o->index) {
			case 0:
				#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:37: characters 14-16
				return OrderingImpl::GT();
				break;
			case 1:
				#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:39: characters 14-16
				return OrderingImpl::LT();
				break;
			case 2:
				#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:38: characters 14-16
				return OrderingImpl::EQ();
				break;
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$monoid = new HxAnon([
	"zero" => OrderingImpl::EQ(),
	"append" => function ($o0, $o1) {
		#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:29: lines 29-33
		switch ($o0->index) {
			case 0:
				#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:30: characters 16-18
				return OrderingImpl::LT();
				break;
			case 1:
				#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:32: characters 16-18
				return OrderingImpl::GT();
				break;
			case 2:
				#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:31: characters 16-18
				return $o1;
				break;
		}
	},
]);
	}
}


Boot::registerClass(Orderings::class, 'thx.Orderings');
Orderings::__hx__init();

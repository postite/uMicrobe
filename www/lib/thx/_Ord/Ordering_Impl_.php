<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 * Haxe source file: /usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx
 */

namespace thx\_Ord;

use \php\Boot;
use \thx\OrderingImpl;

final class Ordering_Impl_ {
	/**
	 * @param float $value
	 * 
	 * @return OrderingImpl
	 */
	static public function fromFloat ($value) {
		#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:12: characters 12-50
		if ($value < 0) {
			#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:12: characters 24-26
			return OrderingImpl::LT();
		} else if ($value > 0) {
			#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:12: characters 42-44
			return OrderingImpl::GT();
		} else {
			#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:12: characters 47-49
			return OrderingImpl::EQ();
		}
	}


	/**
	 * @param int $value
	 * 
	 * @return OrderingImpl
	 */
	static public function fromInt ($value) {
		#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:9: characters 12-50
		if ($value < 0) {
			#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:9: characters 24-26
			return OrderingImpl::LT();
		} else if ($value > 0) {
			#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:9: characters 42-44
			return OrderingImpl::GT();
		} else {
			#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:9: characters 47-49
			return OrderingImpl::EQ();
		}
	}


	/**
	 * @param OrderingImpl $this
	 * 
	 * @return int
	 */
	static public function toInt ($this1) {
		#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:15: lines 15-19
		switch ($this1->index) {
			case 0:
				#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:16: characters 16-18
				return -1;
				break;
			case 1:
				#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:17: characters 16-17
				return 1;
				break;
			case 2:
				#/usr/local/lib/haxe/lib/thx,core/git/src/thx/Ord.hx:18: characters 16-17
				return 0;
				break;
		}
	}
}


Boot::registerClass(Ordering_Impl_::class, 'thx._Ord.Ordering_Impl_');

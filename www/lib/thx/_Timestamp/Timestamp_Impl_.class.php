<?php

// Generated by Haxe 3.4.7
class thx__Timestamp_Timestamp_Impl_ {
	public function __construct(){}
	static function create($year, $month = null, $day = null, $hour = null, $minute = null, $second = null) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::create");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = thx_Dates::create($year, $month, $day, $hour, $minute, $second)->getTime();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function now() {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::now");
		$__hx__spos = $GLOBALS['%s']->length;
		$d = Date::now();
		{
			$tmp = $d->getTime();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromDate($d) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::fromDate");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $d->getTime();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromString($s) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::fromString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Date::fromString($s)->getTime();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function toDate($this1) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::toDate");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Date::fromTime($this1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function toString($this1) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Date::fromTime($this1)->toString();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function snapNext($this1, $period) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::snapNext");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($period->index) {
		case 0:{
			$tmp = Math::fceil($this1 / 1000.0) * 1000.0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 1:{
			$tmp = Math::fceil($this1 / 60000.0) * 60000.0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 2:{
			$tmp = Math::fceil($this1 / 3600000.0) * 3600000.0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 3:{
			$d = Date::fromTime($this1);
			$year = $d->getFullYear();
			$month = $d->getMonth();
			{
				$tmp = thx_Dates::create($year, $month, $d->getDate() + 1, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 4:{
			$d1 = Date::fromTime($this1);
			$wd = $d1->getDay();
			$year1 = $d1->getFullYear();
			$month1 = $d1->getMonth();
			{
				$tmp = thx_Dates::create($year1, $month1, $d1->getDate() + 7 - $wd, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 5:{
			$d2 = Date::fromTime($this1);
			$year2 = $d2->getFullYear();
			{
				$tmp = thx_Dates::create($year2, $d2->getMonth() + 1, 1, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 6:{
			$d3 = Date::fromTime($this1);
			{
				$tmp = thx_Dates::create($d3->getFullYear() + 1, 0, 1, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	static function snapPrev($this1, $period) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::snapPrev");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($period->index) {
		case 0:{
			$tmp = Math::ffloor($this1 / 1000.0) * 1000.0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 1:{
			$tmp = Math::ffloor($this1 / 60000.0) * 60000.0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 2:{
			$tmp = Math::ffloor($this1 / 3600000.0) * 3600000.0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 3:{
			$d = Date::fromTime($this1);
			$year = $d->getFullYear();
			$month = $d->getMonth();
			$day = $d->getDate();
			{
				$tmp = thx_Dates::create($year, $month, $day, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 4:{
			$d1 = Date::fromTime($this1);
			$wd = $d1->getDay();
			$year1 = $d1->getFullYear();
			$month1 = $d1->getMonth();
			{
				$tmp = thx_Dates::create($year1, $month1, $d1->getDate() - $wd, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 5:{
			$d2 = Date::fromTime($this1);
			$year2 = $d2->getFullYear();
			$month2 = $d2->getMonth();
			{
				$tmp = thx_Dates::create($year2, $month2, 1, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 6:{
			$d3 = Date::fromTime($this1);
			$year3 = $d3->getFullYear();
			{
				$tmp = thx_Dates::create($year3, 0, 1, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	static function snapTo($this1, $period) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::snapTo");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($period->index) {
		case 0:{
			$tmp = Math::fround($this1 / 1000.0) * 1000.0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 1:{
			$tmp = Math::fround($this1 / 60000.0) * 60000.0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 2:{
			$tmp = Math::fround($this1 / 3600000.0) * 3600000.0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 3:{
			$d = Date::fromTime($this1);
			$mod = null;
			if($d->getHours() >= 12) {
				$mod = 1;
			} else {
				$mod = 0;
			}
			$year = $d->getFullYear();
			$month = $d->getMonth();
			{
				$tmp = thx_Dates::create($year, $month, $d->getDate() + $mod, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 4:{
			$d1 = Date::fromTime($this1);
			$wd = $d1->getDay();
			$mod1 = null;
			if($wd < 3) {
				$mod1 = -$wd;
			} else {
				if($wd > 3) {
					$mod1 = 7 - $wd;
				} else {
					if($d1->getHours() < 12) {
						$mod1 = -$wd;
					} else {
						$mod1 = 7 - $wd;
					}
				}
			}
			$year1 = $d1->getFullYear();
			$month1 = $d1->getMonth();
			{
				$tmp = thx_Dates::create($year1, $month1, $d1->getDate() + $mod1, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 5:{
			$d2 = Date::fromTime($this1);
			$mod2 = null;
			$mod3 = $d2->getDate();
			if($mod3 > Math::round(DateTools::getMonthDays($d2) / 2)) {
				$mod2 = 1;
			} else {
				$mod2 = 0;
			}
			$year2 = $d2->getFullYear();
			{
				$tmp = thx_Dates::create($year2, $d2->getMonth() + $mod2, 1, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 6:{
			$d3 = Date::fromTime($this1);
			$mod4 = null;
			$mod5 = $d3->getFullYear();
			$mod6 = _hx_deref(new Date($mod5, 6, 2, 0, 0, 0))->getTime();
			if($this1 > $mod6) {
				$mod4 = 1;
			} else {
				$mod4 = 0;
			}
			{
				$tmp = thx_Dates::create($d3->getFullYear() + $mod4, 0, 1, 0, 0, 0)->getTime();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	static function r($t, $v) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::r");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Math::fround($t / $v) * $v;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function f($t, $v) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::f");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Math::ffloor($t / $v) * $v;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function c($t, $v) {
		$GLOBALS['%s']->push("thx._Timestamp.Timestamp_Impl_::c");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Math::fceil($t / $v) * $v;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'thx._Timestamp.Timestamp_Impl_'; }
}

<?php
/**
 * Generated by Haxe 3.4.7
 * Haxe source file: /usr/local/lib/haxe/std/Map.hx
 */

namespace _Map;

use \haxe\IMap;
use \haxe\ds\StringMap;
use \php\Boot;
use \haxe\ds\EnumValueMap;
use \haxe\ds\ObjectMap;
use \haxe\ds\IntMap;

final class Map_Impl_ {
	/**
	 * @param IMap $this
	 * @param mixed $k
	 * @param mixed $v
	 * 
	 * @return mixed
	 */
	static public function arrayWrite ($this1, $k, $v) {
		#/usr/local/lib/haxe/std/Map.hx:135: characters 2-16
		$this1->set($k, $v);
		#/usr/local/lib/haxe/std/Map.hx:136: characters 2-10
		return $v;
	}


	/**
	 * Returns true if `key` has a mapping, false otherwise.
	 * If `key` is null, the result is unspecified.
	 * 
	 * @param IMap $this
	 * @param mixed $key
	 * 
	 * @return bool
	 */
	static public function exists ($this1, $key) {
		#/usr/local/lib/haxe/std/Map.hx:97: characters 38-61
		return $this1->exists($key);
	}


	/**
	 * @param IntMap $map
	 * 
	 * @return IntMap
	 */
	static public function fromIntMap ($map) {
		#/usr/local/lib/haxe/std/Map.hx:160: characters 2-17
		return $map;
	}


	/**
	 * @param ObjectMap $map
	 * 
	 * @return ObjectMap
	 */
	static public function fromObjectMap ($map) {
		#/usr/local/lib/haxe/std/Map.hx:164: characters 2-17
		return $map;
	}


	/**
	 * @param StringMap $map
	 * 
	 * @return StringMap
	 */
	static public function fromStringMap ($map) {
		#/usr/local/lib/haxe/std/Map.hx:156: characters 2-17
		return $map;
	}


	/**
	 * Returns the current mapping of `key`.
	 * If no such mapping exists, null is returned.
	 * Note that a check like `map.get(key) == null` can hold for two reasons:
	 * 1. the map has no mapping for `key`
	 * 2. the map has a mapping with a value of `null`
	 * If it is important to distinguish these cases, `exists()` should be
	 * used.
	 * If `key` is null, the result is unspecified.
	 * 
	 * @param IMap $this
	 * @param mixed $key
	 * 
	 * @return mixed
	 */
	static public function get ($this1, $key) {
		#/usr/local/lib/haxe/std/Map.hx:90: characters 49-69
		return $this1->get($key);
	}


	/**
	 * Returns an Iterator over the values of `this` Map.
	 * The order of values is undefined.
	 * 
	 * @param IMap $this
	 * 
	 * @return object
	 */
	static public function iterator ($this1) {
		#/usr/local/lib/haxe/std/Map.hx:122: characters 2-24
		return $this1->iterator();
	}


	/**
	 * Returns an Iterator over the keys of `this` Map.
	 * The order of keys is undefined.
	 * 
	 * @param IMap $this
	 * 
	 * @return object
	 */
	static public function keys ($this1) {
		#/usr/local/lib/haxe/std/Map.hx:113: characters 2-20
		return $this1->keys();
	}


	/**
	 * Removes the mapping of `key` and returns true if such a mapping existed,
	 * false otherwise.
	 * If `key` is null, the result is unspecified.
	 * 
	 * @param IMap $this
	 * @param mixed $key
	 * 
	 * @return bool
	 */
	static public function remove ($this1, $key) {
		#/usr/local/lib/haxe/std/Map.hx:105: characters 38-61
		return $this1->remove($key);
	}


	/**
	 * Maps `key` to `value`.
	 * If `key` already has a mapping, the previous value disappears.
	 * If `key` is null, the result is unspecified.
	 * 
	 * @param IMap $this
	 * @param mixed $key
	 * @param mixed $value
	 * 
	 * @return void
	 */
	static public function set ($this1, $key, $value) {
		#/usr/local/lib/haxe/std/Map.hx:73: characters 44-64
		$this1->set($key, $value);
	}


	/**
	 * @param IMap $t
	 * 
	 * @return EnumValueMap
	 */
	static public function toEnumValueMapMap ($t) {
		#/usr/local/lib/haxe/std/Map.hx:148: characters 2-33
		return new EnumValueMap();
	}


	/**
	 * @param IMap $t
	 * 
	 * @return IntMap
	 */
	static public function toIntMap ($t) {
		#/usr/local/lib/haxe/std/Map.hx:144: characters 2-24
		return new IntMap();
	}


	/**
	 * @param IMap $t
	 * 
	 * @return ObjectMap
	 */
	static public function toObjectMap ($t) {
		#/usr/local/lib/haxe/std/Map.hx:152: characters 2-30
		return new ObjectMap();
	}


	/**
	 * Returns a String representation of `this` Map.
	 * The exact representation depends on the platform and key-type.
	 * 
	 * @param IMap $this
	 * 
	 * @return string
	 */
	static public function toString ($this1) {
		#/usr/local/lib/haxe/std/Map.hx:131: characters 2-24
		return $this1->toString();
	}


	/**
	 * @param IMap $t
	 * 
	 * @return StringMap
	 */
	static public function toStringMap ($t) {
		#/usr/local/lib/haxe/std/Map.hx:140: characters 2-27
		return new StringMap();
	}
}


Boot::registerClass(Map_Impl_::class, '_Map.Map_Impl_');

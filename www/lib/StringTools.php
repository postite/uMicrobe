<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/php/_std/StringTools.hx
 */

use \php\Boot;
use \php\_Boot\HxString;

/**
 * This class provides advanced methods on Strings. It is ideally used with
 * `using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
 * to the `String` class.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 */
class StringTools {
	/**
	 * @var \Array_hx
	 * Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.
	 */
	static public $winMetaCharacters;


	/**
	 * Tells if the string `s` ends with the string `end`.
	 * If `end` is `null`, the result is unspecified.
	 * If `end` is the empty String `""`, the result is true.
	 * 
	 * @param string $s
	 * @param string $end
	 * 
	 * @return bool
	 */
	static public function endsWith ($s, $end) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:48: characters 10-59
		if ($end !== "") {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:48: characters 23-59
			return substr($s, -strlen($end)) === $end;
		} else {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:48: characters 10-59
			return true;
		}
	}


	/**
	 * Returns the character code at position `index` of String `s`, or an
	 * end-of-file indicator at if `position` equals `s.length`.
	 * This method is faster than `String.charCodeAt()` on some platforms, but
	 * the result is unspecified if `index` is negative or greater than
	 * `s.length`.
	 * End of file status can be checked by calling `StringTools.isEof()` with
	 * the returned value as argument.
	 * This operation is not guaranteed to work if `s` contains the `\0`
	 * character.
	 * 
	 * @param string $s
	 * @param int $index
	 * 
	 * @return int
	 */
	static public function fastCodeAt ($s, $index) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:98: characters 10-71
		if (strlen($s) === $index) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:98: characters 31-32
			return 0;
		} else {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:98: characters 35-70
			return ord($s[$index]);
		}
	}


	/**
	 * Encodes `n` into a hexadecimal representation.
	 * If `digits` is specified, the resulting String is padded with "0" until
	 * its `length` equals `digits`.
	 * 
	 * @param int $n
	 * @param int $digits
	 * 
	 * @return string
	 */
	static public function hex ($n, $digits = null) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:88: characters 3-28
		$s = dechex($n);
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:89: characters 3-15
		$len = 8;
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:90: characters 18-78
		$tmp = null;
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:90: characters 18-78
		if (null === $digits) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:90: characters 18-78
			$tmp = $len;
		} else {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:90: characters 64-70
			$len = ($digits > $len ? $digits : $len);
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:90: characters 18-78
			$tmp = $len;
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:90: lines 90-93
		if (strlen($s) > $tmp) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:91: characters 4-22
			$s = HxString::substr($s, -$len);
		} else if ($digits !== null) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:93: characters 4-28
			$s = StringTools::lpad($s, "0", $digits);
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:94: characters 3-25
		return strtoupper($s);
	}


	/**
	 * Escapes HTML special characters of the string `s`.
	 * The following replacements are made:
	 * - `&` becomes `&amp`;
	 * - `<` becomes `&lt`;
	 * - `>` becomes `&gt`;
	 * If `quotes` is true, the following characters are also replaced:
	 * - `"` becomes `&quot`;
	 * - `'` becomes `&#039`;
	 * 
	 * @param string $s
	 * @param bool $quotes
	 * 
	 * @return string
	 */
	static public function htmlEscape ($s, $quotes = null) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:36: characters 3-106
		return htmlspecialchars($s, ($quotes ? ENT_QUOTES | ENT_HTML401 : ENT_NOQUOTES));
	}


	/**
	 * Unescapes HTML special characters of the string `s`.
	 * This is the inverse operation to htmlEscape, i.e. the following always
	 * holds: `htmlUnescape(htmlEscape(s)) == s`
	 * The replacements follow:
	 * - `&amp;` becomes `&`
	 * - `&lt;` becomes `<`
	 * - `&gt;` becomes `>`
	 * - `&quot;` becomes `"`
	 * - `&#039;` becomes `'`
	 * 
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function htmlUnescape ($s) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:40: characters 3-61
		return htmlspecialchars_decode($s, ENT_QUOTES);
	}


	/**
	 * @param int $c
	 * 
	 * @return bool
	 */
	static public function isEof ($c) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:102: characters 3-16
		return $c === 0;
	}


	/**
	 * Tells if the character in the string `s` at position `pos` is a space.
	 * A character is considered to be a space character if its character code
	 * is 9,10,11,12,13 or 32.
	 * If `s` is the empty String `""`, or if pos is not a valid position within
	 * `s`, the result is false.
	 * 
	 * @param string $s
	 * @param int $pos
	 * 
	 * @return bool
	 */
	static public function isSpace ($s, $pos) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:52: characters 3-31
		$c = (($pos < 0) || ($pos >= strlen($s)) ? null : ord($s[$pos]));
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:53: characters 10-40
		if (!(($c >= 9) && ($c <= 13))) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:53: characters 33-40
			return $c === 32;
		} else {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:53: characters 10-40
			return true;
		}
	}


	/**
	 * Concatenates `c` to `s` until `s.length` is at least `l`.
	 * If `c` is the empty String `""` or if `l` does not exceed `s.length`,
	 * `s` is returned unchanged.
	 * If `c.length` is 1, the resulting String length is exactly `l`.
	 * Otherwise the length may exceed `l`.
	 * If `c` is null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $c
	 * @param int $l
	 * 
	 * @return string
	 */
	static public function lpad ($s, $c, $l) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:75: characters 3-47
		if ((strlen($c) === 0) || (strlen($s) >= $l)) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:75: characters 39-47
			return $s;
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:76: characters 3-78
		$padLength = (int)(ceil(($l - strlen($s)) / strlen($c))) * strlen($c) + strlen($s);
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:77: characters 3-61
		return str_pad($s, $padLength, $c, STR_PAD_LEFT);
	}


	/**
	 * Removes leading space characters of `s`.
	 * This function internally calls `isSpace()` to decide which characters to
	 * remove.
	 * If `s` is the empty String `""` or consists only of space characters, the
	 * result is the empty String `""`.
	 * 
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function ltrim ($s) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:57: characters 3-25
		return ltrim($s);
	}


	/**
	 * Returns a String that can be used as a single command line argument
	 * on Unix.
	 * The input will be quoted, or escaped if necessary.
	 * 
	 * @param string $argument
	 * 
	 * @return string
	 */
	static public function quoteUnixArg ($argument) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:114: lines 114-115
		if ($argument === "") {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:115: characters 4-15
			return "''";
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:117: lines 117-118
		if (!(new \EReg("[^a-zA-Z0-9_@%+=:,./-]", ""))->match($argument)) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:118: characters 4-19
			return $argument;
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:122: characters 3-55
		return "'" . (StringTools::replace($argument, "'", "'\"'\"'")??'null') . "'";
	}


	/**
	 * Returns a String that can be used as a single command line argument
	 * on Windows.
	 * The input will be quoted, or escaped if necessary, such that the output
	 * will be parsed as a single argument using the rule specified in
	 * http://msdn.microsoft.com/en-us/library/ms880421
	 * Examples:
	 * ```
	 * quoteWinArg("abc") == "abc";
	 * quoteWinArg("ab c") == '"ab c"';
	 * ```
	 * 
	 * @param string $argument
	 * @param bool $escapeMetaCharacters
	 * 
	 * @return string
	 */
	static public function quoteWinArg ($argument, $escapeMetaCharacters) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:145: lines 145-188
		if (!(new \EReg("^[^ \x09\\\\\"]+\$", ""))->match($argument)) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:150: characters 4-33
			$result = new \StringBuf();
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:151: characters 4-98
			$needquote = (HxString::indexOf($argument, " ") !== -1) || (HxString::indexOf($argument, "\x09") !== -1) || ($argument === "");
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:153: lines 153-154
			if ($needquote) {
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:154: characters 5-20
				$result->add("\"");
			}
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:156: characters 4-33
			$bs_buf = new \StringBuf();
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: lines 157-177
			$_g1 = 0;
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: lines 157-177
			$_g = strlen($argument);
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: lines 157-177
			while ($_g1 < $_g) {
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: lines 157-177
				$_g1 = $_g1 + 1;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:157: characters 9-10
				$i = $_g1 - 1;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:158: characters 13-35
				$_g2 = (($i < 0) || ($i >= strlen($argument)) ? null : ord($argument[$i]));
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:158: lines 158-175
				if ($_g2 === null) {
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:169: characters 11-16
					$c = $_g2;
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:171: lines 171-174
					if (strlen($bs_buf->b) > 0) {
						#/usr/local/lib/haxe/std/php/_std/StringTools.hx:172: characters 8-37
						$result->add($bs_buf->b);
						#/usr/local/lib/haxe/std/php/_std/StringTools.hx:173: characters 8-32
						$bs_buf = new \StringBuf();
					}
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:175: characters 7-13
					$result1 = $result;
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:175: characters 7-24
					$result1->b = ($result1->b??'null') . (chr($c)??'null');

				} else {
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:158: characters 13-35
					switch ($_g2) {
						case 34:
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:164: characters 7-34
							$bs = $bs_buf->b;
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:165: characters 7-21
							$result->add($bs);
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:166: characters 7-21
							$result->add($bs);
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:167: characters 7-31
							$bs_buf = new \StringBuf();
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:168: characters 7-24
							$result->add("\\\"");
							break;
						case 92:
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:161: characters 7-23
							$bs_buf->add("\\");
							break;
						default:
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:169: characters 11-16
							$c1 = $_g2;
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:171: lines 171-174
							if (strlen($bs_buf->b) > 0) {
								#/usr/local/lib/haxe/std/php/_std/StringTools.hx:172: characters 8-37
								$result->add($bs_buf->b);
								#/usr/local/lib/haxe/std/php/_std/StringTools.hx:173: characters 8-32
								$bs_buf = new \StringBuf();
							}
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:175: characters 7-13
							$result2 = $result;
							#/usr/local/lib/haxe/std/php/_std/StringTools.hx:175: characters 7-24
							$result2->b = ($result2->b??'null') . (chr($c1)??'null');

							break;
					}
				}

			}

			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:180: characters 4-33
			$result->add($bs_buf->b);
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:182: lines 182-185
			if ($needquote) {
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:183: characters 5-34
				$result->add($bs_buf->b);
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:184: characters 5-20
				$result->add("\"");
			}
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:187: characters 4-32
			$argument = $result->b;
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:190: lines 190-202
		if ($escapeMetaCharacters) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:191: characters 4-33
			$result3 = new \StringBuf();
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: lines 192-198
			$_g11 = 0;
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: lines 192-198
			$_g3 = strlen($argument);
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: lines 192-198
			while ($_g11 < $_g3) {
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: lines 192-198
				$_g11 = $_g11 + 1;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:192: characters 9-10
				$i1 = $_g11 - 1;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:193: characters 5-36
				$c2 = (($i1 < 0) || ($i1 >= strlen($argument)) ? null : ord($argument[$i1]));
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:194: lines 194-196
				if (StringTools::$winMetaCharacters->indexOf($c2) >= 0) {
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:195: characters 6-12
					$result4 = $result3;
					#/usr/local/lib/haxe/std/php/_std/StringTools.hx:195: characters 6-30
					$result4->b = ($result4->b??'null') . (chr(94)??'null');
				}
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:197: characters 5-11
				$result5 = $result3;
				#/usr/local/lib/haxe/std/php/_std/StringTools.hx:197: characters 5-22
				$result5->b = ($result5->b??'null') . (chr($c2)??'null');
			}

			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:199: characters 4-28
			return $result3->b;
		} else {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:201: characters 4-19
			return $argument;
		}
	}


	/**
	 * Replace all occurrences of the String `sub` in the String `s` by the
	 * String `by`.
	 * If `sub` is the empty String `""`, `by` is inserted after each character
	 * of `s`. If `by` is also the empty String `""`, `s` remains unchanged.
	 * This is a convenience function for `s.split(sub).join(by)`.
	 * If `sub` or `by` are null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $sub
	 * @param string $by
	 * 
	 * @return string
	 */
	static public function replace ($s, $sub, $by) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:81: lines 81-83
		if ($sub === "") {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:82: characters 4-50
			return implode($by, str_split($s));
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:84: characters 3-40
		return str_replace($sub, $by, $s);
	}


	/**
	 * Appends `c` to `s` until `s.length` is at least `l`.
	 * If `c` is the empty String `""` or if `l` does not exceed `s.length`,
	 * `s` is returned unchanged.
	 * If `c.length` is 1, the resulting String length is exactly `l`.
	 * Otherwise the length may exceed `l`.
	 * If `c` is null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $c
	 * @param int $l
	 * 
	 * @return string
	 */
	static public function rpad ($s, $c, $l) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:69: characters 3-47
		if ((strlen($c) === 0) || (strlen($s) >= $l)) {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:69: characters 39-47
			return $s;
		}
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:70: characters 3-78
		$padLength = (int)(ceil(($l - strlen($s)) / strlen($c))) * strlen($c) + strlen($s);
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:71: characters 3-62
		return str_pad($s, $padLength, $c, STR_PAD_RIGHT);
	}


	/**
	 * Removes trailing space characters of `s`.
	 * This function internally calls `isSpace()` to decide which characters to
	 * remove.
	 * If `s` is the empty String `""` or consists only of space characters, the
	 * result is the empty String `""`.
	 * 
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function rtrim ($s) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:61: characters 3-25
		return rtrim($s);
	}


	/**
	 * Tells if the string `s` starts with the string `start`.
	 * If `start` is `null`, the result is unspecified.
	 * If `start` is the empty String `""`, the result is true.
	 * 
	 * @param string $s
	 * @param string $start
	 * 
	 * @return bool
	 */
	static public function startsWith ($s, $start) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:44: characters 10-53
		if ($start !== "") {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:44: characters 25-53
			return Boot::equal(strpos($s, $start), 0);
		} else {
			#/usr/local/lib/haxe/std/php/_std/StringTools.hx:44: characters 10-53
			return true;
		}
	}


	/**
	 * Removes leading and trailing space characters of `s`.
	 * This is a convenience function for `ltrim(rtrim(s))`.
	 * 
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function trim ($s) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:65: characters 3-24
		return trim($s);
	}


	/**
	 * Decode an URL using the standard format.
	 * 
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function urlDecode ($s) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:32: characters 3-29
		return urldecode($s);
	}


	/**
	 * Encode an URL by using the standard format.
	 * 
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function urlEncode ($s) {
		#/usr/local/lib/haxe/std/php/_std/StringTools.hx:28: characters 3-32
		return rawurlencode($s);
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$winMetaCharacters = \Array_hx::wrap([
	59,
	44,
	32,
	40,
	41,
	37,
	33,
	94,
	34,
	60,
	62,
	38,
	124,
	10,
	13,
]);
	}
}


Boot::registerClass(StringTools::class, 'StringTools');
StringTools::__hx__init();

<?php

// Generated by Haxe 3.4.7
class Sys {
	public function __construct(){}
	static function hprint($v) {
		$GLOBALS['%s']->push("Sys::print");
		$__hx__spos = $GLOBALS['%s']->length;
		echo(Std::string($v));
		$GLOBALS['%s']->pop();
	}
	static function println($v) {
		$GLOBALS['%s']->push("Sys::println");
		$__hx__spos = $GLOBALS['%s']->length;
		Sys::hprint($v);
		Sys::hprint("\x0A");
		$GLOBALS['%s']->pop();
	}
	static function sleep($seconds) {
		$GLOBALS['%s']->push("Sys::sleep");
		$__hx__spos = $GLOBALS['%s']->length;
		usleep($seconds * 1000000);
		{
			$GLOBALS['%s']->pop();
			return;
		}
		$GLOBALS['%s']->pop();
	}
	static function getCwd() {
		$GLOBALS['%s']->push("Sys::getCwd");
		$__hx__spos = $GLOBALS['%s']->length;
		$cwd = getcwd();
		$l = _hx_substr($cwd, -1, null);
		$tmp = null;
		$tmp1 = null;
		if($l !== "/") {
			$tmp1 = $l === "\\";
		} else {
			$tmp1 = true;
		}
		if($tmp1) {
			$tmp = "";
		} else {
			$tmp = "/";
		}
		{
			$tmp2 = _hx_string_or_null($cwd) . _hx_string_or_null($tmp);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function systemName() {
		$GLOBALS['%s']->push("Sys::systemName");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = php_uname("s");
		$p = _hx_index_of($s, " ", null);
		if($p >= 0) {
			$tmp = _hx_substr($s, 0, $p);
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$GLOBALS['%s']->pop();
			return $s;
		}
		$GLOBALS['%s']->pop();
	}
	static function time() {
		$GLOBALS['%s']->push("Sys::time");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = microtime(true);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function stdin() {
		$GLOBALS['%s']->push("Sys::stdin");
		$__hx__spos = $GLOBALS['%s']->length;
		$p = defined('STDIN') ? STDIN : fopen('php://stdin', 'r');
		{
			$tmp = new sys_io_FileInput($p);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function stdout() {
		$GLOBALS['%s']->push("Sys::stdout");
		$__hx__spos = $GLOBALS['%s']->length;
		$p = defined('STDOUT') ? STDOUT : fopen('php://stdout', 'w');
		{
			$tmp = new sys_io_FileOutput($p);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'Sys'; }
}

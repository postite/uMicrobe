<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/php/NativeIndexedArray.hx
 */

namespace php\_NativeIndexedArray;

use \php\Boot;

final class NativeIndexedArray_Impl_ {
	/**
	 * @return mixed
	 */
	static public function _new () {
		#/usr/local/lib/haxe/std/php/NativeIndexedArray.hx:26: character 16
		$this1 = [];
		#/usr/local/lib/haxe/std/php/NativeIndexedArray.hx:26: character 16
		return $this1;
	}


	/**
	 * @param \Array_hx $a
	 * 
	 * @return mixed
	 */
	static public function fromHaxeArray ($a) {
		#/usr/local/lib/haxe/std/php/NativeIndexedArray.hx:46: characters 3-31
		return $a->arr;
	}


	/**
	 * @param mixed $this
	 * @param int $idx
	 * 
	 * @return mixed
	 */
	static public function get ($this1, $idx) {
		#/usr/local/lib/haxe/std/php/NativeIndexedArray.hx:31: characters 3-19
		return $this1[$idx];
	}


	/**
	 * @param mixed $this
	 * @param mixed $val
	 * 
	 * @return void
	 */
	static public function push ($this1, $val) {
		#/usr/local/lib/haxe/std/php/NativeIndexedArray.hx:38: characters 3-40
		$this1[] = $val;
	}


	/**
	 * @param mixed $this
	 * @param int $idx
	 * @param mixed $val
	 * 
	 * @return mixed
	 */
	static public function set ($this1, $idx, $val) {
		#/usr/local/lib/haxe/std/php/NativeIndexedArray.hx:35: characters 3-25
		return $this1[$idx] = $val;
	}


	/**
	 * @param mixed $this
	 * 
	 * @return \Array_hx
	 */
	static public function toHaxeArray ($this1) {
		#/usr/local/lib/haxe/std/php/NativeIndexedArray.hx:42: characters 3-42
		return \Array_hx::wrap($this1);
	}
}


Boot::registerClass(NativeIndexedArray_Impl_::class, 'php._NativeIndexedArray.NativeIndexedArray_Impl_');

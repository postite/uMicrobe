<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx
 */

namespace minject\point;

use \php\Boot;
use \php\_Boot\HxException;
use \haxe\Log;
use \minject\Injector;
use \haxe\CallStack;
use \php\_Boot\HxAnon;

class MethodInjectionPoint implements InjectionPoint {
	/**
	 * @var \Array_hx
	 */
	public $args;
	/**
	 * @var string
	 */
	public $field;


	/**
	 * @param string $field
	 * @param \Array_hx $args
	 * 
	 * @return void
	 */
	public function __construct ($field, $args) {
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:14: characters 3-21
		$this->field = $field;
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:15: characters 3-19
		$this->args = $args;
	}


	/**
	 * @param mixed $target
	 * @param Injector $injector
	 * 
	 * @return mixed
	 */
	public function applyInjection ($target, $injector) {
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:20: characters 3-89
		\Reflect::callMethod($target, \Reflect::field($target, $this->field), $this->gatherArgs($target, $injector));
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:21: characters 3-16
		return $target;
	}


	/**
	 * @param mixed $target
	 * @param Injector $injector
	 * 
	 * @return \Array_hx
	 */
	public function gatherArgs ($target, $injector) {
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:26: characters 3-19
		$values = new \Array_hx();
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:27: characters 3-17
		$index = 0;
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:29: lines 29-50
		while ($index < $this->args->length) {
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:31: characters 20-27
			$index = $index + 1;
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:31: characters 4-29
			$type = ($this->args->arr[$index - 1] ?? null);
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:32: characters 4-19
			$argName = "";
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:33: lines 33-35
			try {
				#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:34: characters 23-30
				$index = $index + 1;
				#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:34: characters 4-7
				$argName1 = ($this->args->arr[$index - 1] ?? null);
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$msg = $__hx__real_e;
				#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:35: characters 22-27
				(Log::$trace)($msg, new HxAnon([
					"fileName" => "minject/point/MethodInjectionPoint.hx",
					"lineNumber" => 35,
					"className" => "minject.point.MethodInjectionPoint",
					"methodName" => "gatherArgs",
				]));
			}
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:37: characters 19-26
			$index = $index + 1;
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:37: characters 4-35
			$opt = ($this->args->arr[$index - 1] ?? null) === "o";
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:39: characters 4-59
			$response = $injector->getValueForType($type, $argName);
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:40: characters 4-25
			$values->arr[$values->length] = $response;
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:40: characters 4-25
			++$values->length;

			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:43: lines 43-48
			if (!$opt && ($response === null)) {
				#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:45: characters 5-63
				$targetName = \Type::getClassName(\Type::getClass($target));
				#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:46: characters 5-10
				throw new HxException("Injector is missing a mapping to handle injection into target \"" . ($targetName??'null') . "\". " . (("Target dependency: \"" . ($type??'null') . "\", method: \"" . ($this->field??'null') . "\", named: \"" . ($argName??'null') . "\"")??'null'));
			}
		}
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/point/MethodInjectionPoint.hx:52: characters 3-16
		return $values;
	}
}


Boot::registerClass(MethodInjectionPoint::class, 'minject.point.MethodInjectionPoint');

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/minject/git/src/lib/minject/provider/SingletonProvider.hx
 */

namespace minject\provider;

use \php\Boot;
use \minject\Injector;

class SingletonProvider implements DependencyProvider {
	/**
	 * @var Class
	 */
	public $type;
	/**
	 * @var mixed
	 */
	public $value;


	/**
	 * @param Class $type
	 * 
	 * @return void
	 */
	public function __construct ($type) {
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/provider/SingletonProvider.hx:14: characters 3-19
		$this->type = $type;
	}


	/**
	 * @param Injector $injector
	 * 
	 * @return mixed
	 */
	public function getValue ($injector) {
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/provider/SingletonProvider.hx:19: lines 19-23
		if ($this->value === null) {
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/provider/SingletonProvider.hx:21: characters 4-37
			$this->value = $injector->_construct($this->type);
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/provider/SingletonProvider.hx:22: characters 4-30
			$injector->injectInto($this->value);
		}
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/provider/SingletonProvider.hx:25: characters 3-15
		return $this->value;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/provider/SingletonProvider.hx:31: characters 3-48
		return "singleton " . (\Type::getClassName($this->type)??'null');
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(SingletonProvider::class, 'minject.provider.SingletonProvider');

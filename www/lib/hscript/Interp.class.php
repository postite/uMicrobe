<?php

// Generated by Haxe 3.4.7
class hscript_Interp {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("hscript.Interp::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$this->variables = new haxe_ds_StringMap();
		$this->locals = new haxe_ds_StringMap();
		$this->declared = new _hx_array(array());
		$this->variables->set("null", null);
		$this->variables->set("true", true);
		$this->variables->set("false", false);
		{
			$this1 = $this->variables;
			$this1->set("trace", Reflect::makeVarArgs(array(new _hx_lambda(array(&$_gthis), "hscript_Interp_0"), 'execute')));
		}
		$this->initOps();
		$GLOBALS['%s']->pop();
	}}
	public $variables;
	public $locals;
	public $binops;
	public $depth;
	public $inTry;
	public $declared;
	public $returnValue;
	public function posInfos() {
		$GLOBALS['%s']->push("hscript.Interp::posInfos");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_anonymous(array("fileName" => "hscript", "lineNumber" => 0));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function initOps() {
		$GLOBALS['%s']->push("hscript.Interp::initOps");
		$__hx__spos = $GLOBALS['%s']->length;
		$me = $this;
		$this->binops = new haxe_ds_StringMap();
		$this->binops->set("+", array(new _hx_lambda(array(&$me), "hscript_Interp_1"), 'execute'));
		$this->binops->set("-", array(new _hx_lambda(array(&$me), "hscript_Interp_2"), 'execute'));
		$this->binops->set("*", array(new _hx_lambda(array(&$me), "hscript_Interp_3"), 'execute'));
		$this->binops->set("/", array(new _hx_lambda(array(&$me), "hscript_Interp_4"), 'execute'));
		$this->binops->set("%", array(new _hx_lambda(array(&$me), "hscript_Interp_5"), 'execute'));
		$this->binops->set("&", array(new _hx_lambda(array(&$me), "hscript_Interp_6"), 'execute'));
		$this->binops->set("|", array(new _hx_lambda(array(&$me), "hscript_Interp_7"), 'execute'));
		$this->binops->set("^", array(new _hx_lambda(array(&$me), "hscript_Interp_8"), 'execute'));
		$this->binops->set("<<", array(new _hx_lambda(array(&$me), "hscript_Interp_9"), 'execute'));
		$this->binops->set(">>", array(new _hx_lambda(array(&$me), "hscript_Interp_10"), 'execute'));
		$this->binops->set(">>>", array(new _hx_lambda(array(&$me), "hscript_Interp_11"), 'execute'));
		$this->binops->set("==", array(new _hx_lambda(array(&$me), "hscript_Interp_12"), 'execute'));
		$this->binops->set("!=", array(new _hx_lambda(array(&$me), "hscript_Interp_13"), 'execute'));
		$this->binops->set(">=", array(new _hx_lambda(array(&$me), "hscript_Interp_14"), 'execute'));
		$this->binops->set("<=", array(new _hx_lambda(array(&$me), "hscript_Interp_15"), 'execute'));
		$this->binops->set(">", array(new _hx_lambda(array(&$me), "hscript_Interp_16"), 'execute'));
		$this->binops->set("<", array(new _hx_lambda(array(&$me), "hscript_Interp_17"), 'execute'));
		$this->binops->set("||", array(new _hx_lambda(array(&$me), "hscript_Interp_18"), 'execute'));
		$this->binops->set("&&", array(new _hx_lambda(array(&$me), "hscript_Interp_19"), 'execute'));
		$this->binops->set("=", (property_exists($this, "assign") ? $this->assign: array($this, "assign")));
		$this->binops->set("...", array(new _hx_lambda(array(&$me), "hscript_Interp_20"), 'execute'));
		$this->assignOp("+=", array(new _hx_lambda(array(), "hscript_Interp_21"), 'execute'));
		$this->assignOp("-=", array(new _hx_lambda(array(), "hscript_Interp_22"), 'execute'));
		$this->assignOp("*=", array(new _hx_lambda(array(), "hscript_Interp_23"), 'execute'));
		$this->assignOp("/=", array(new _hx_lambda(array(), "hscript_Interp_24"), 'execute'));
		$this->assignOp("%=", array(new _hx_lambda(array(), "hscript_Interp_25"), 'execute'));
		$this->assignOp("&=", array(new _hx_lambda(array(), "hscript_Interp_26"), 'execute'));
		$this->assignOp("|=", array(new _hx_lambda(array(), "hscript_Interp_27"), 'execute'));
		$this->assignOp("^=", array(new _hx_lambda(array(), "hscript_Interp_28"), 'execute'));
		$this->assignOp("<<=", array(new _hx_lambda(array(), "hscript_Interp_29"), 'execute'));
		$this->assignOp(">>=", array(new _hx_lambda(array(), "hscript_Interp_30"), 'execute'));
		$this->assignOp(">>>=", array(new _hx_lambda(array(), "hscript_Interp_31"), 'execute'));
		$GLOBALS['%s']->pop();
	}
	public function assign($e1, $e2) {
		$GLOBALS['%s']->push("hscript.Interp::assign");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = $this->expr($e2);
		switch($e1->index) {
		case 1:{
			$id = _hx_deref($e1)->params[0];
			{
				$l = $this->locals->get($id);
				if($l === null) {
					$this->variables->set($id, $v);
				} else {
					$l->r = $v;
				}
			}
		}break;
		case 5:{
			$f = _hx_deref($e1)->params[1];
			$e = _hx_deref($e1)->params[0];
			$v = $this->set($this->expr($e), $f, $v);
		}break;
		case 16:{
			$index = _hx_deref($e1)->params[1];
			$e3 = _hx_deref($e1)->params[0];
			{
				$arr = $this->expr($e3);
				$index1 = $this->expr($index);
				if(Std::is($arr, _hx_qtype("haxe.IMap"))) {
					_hx_deref((_hx_cast($arr, _hx_qtype("haxe.IMap"))))->set($index1, $v);
				} else {
					$arr[$index1] = $v;
				}
			}
		}break;
		default:{
			$e4 = hscript_Error::EInvalidOp("=");
			throw new HException($e4);
		}break;
		}
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function assignOp($op, $fop) {
		$GLOBALS['%s']->push("hscript.Interp::assignOp");
		$__hx__spos = $GLOBALS['%s']->length;
		$me = $this;
		$this->binops->set($op, array(new _hx_lambda(array(&$fop, &$me, &$op), "hscript_Interp_32"), 'execute'));
		$GLOBALS['%s']->pop();
	}
	public function evalAssignOp($op, $fop, $e1, $e2) {
		$GLOBALS['%s']->push("hscript.Interp::evalAssignOp");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		switch($e1->index) {
		case 1:{
			$id = _hx_deref($e1)->params[0];
			{
				$l = $this->locals->get($id);
				$v1 = $this->expr($e1);
				$v = call_user_func_array($fop, array($v1, $this->expr($e2)));
				if($l === null) {
					$this->variables->set($id, $v);
				} else {
					$l->r = $v;
				}
			}
		}break;
		case 5:{
			$f = _hx_deref($e1)->params[1];
			$e = _hx_deref($e1)->params[0];
			{
				$obj = $this->expr($e);
				$v2 = $this->get($obj, $f);
				$v = call_user_func_array($fop, array($v2, $this->expr($e2)));
				$v = $this->set($obj, $f, $v);
			}
		}break;
		case 16:{
			$index = _hx_deref($e1)->params[1];
			$e3 = _hx_deref($e1)->params[0];
			{
				$arr = $this->expr($e3);
				$index1 = $this->expr($index);
				if(Std::is($arr, _hx_qtype("haxe.IMap"))) {
					$v3 = _hx_deref((_hx_cast($arr, _hx_qtype("haxe.IMap"))))->get($index1);
					$v = call_user_func_array($fop, array($v3, $this->expr($e2)));
					_hx_deref((_hx_cast($arr, _hx_qtype("haxe.IMap"))))->set($index1, $v);
				} else {
					$arr1 = $arr[$index1];
					$v = call_user_func_array($fop, array($arr1, $this->expr($e2)));
					$arr[$index1] = $v;
				}
			}
		}break;
		default:{
			$e4 = hscript_Error::EInvalidOp($op);
			throw new HException($e4);
		}break;
		}
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function increment($e, $prefix, $delta) {
		$GLOBALS['%s']->push("hscript.Interp::increment");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($e->index) {
		case 1:{
			$id = _hx_deref($e)->params[0];
			$l = $this->locals->get($id);
			$v = null;
			if($l === null) {
				$v = $this->variables->get($id);
			} else {
				$v = $l->r;
			}
			if($prefix) {
				$v = $v + $delta;
				if($l === null) {
					$this->variables->set($id, $v);
				} else {
					$l->r = $v;
				}
			} else {
				if($l === null) {
					$this->variables->set($id, $v + $delta);
				} else {
					$l->r = $v + $delta;
				}
			}
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		}break;
		case 5:{
			$f = _hx_deref($e)->params[1];
			$e1 = _hx_deref($e)->params[0];
			$obj = $this->expr($e1);
			$v1 = $this->get($obj, $f);
			if($prefix) {
				$v1 = $v1 + $delta;
				$this->set($obj, $f, $v1);
			} else {
				$this->set($obj, $f, $v1 + $delta);
			}
			{
				$GLOBALS['%s']->pop();
				return $v1;
			}
		}break;
		case 16:{
			$index = _hx_deref($e)->params[1];
			$e2 = _hx_deref($e)->params[0];
			$arr = $this->expr($e2);
			$index1 = $this->expr($index);
			if(Std::is($arr, _hx_qtype("haxe.IMap"))) {
				$v2 = _hx_deref((_hx_cast($arr, _hx_qtype("haxe.IMap"))))->get($index1);
				if($prefix) {
					$v2 = $v2 + $delta;
					_hx_deref((_hx_cast($arr, _hx_qtype("haxe.IMap"))))->set($index1, $v2);
				} else {
					_hx_deref((_hx_cast($arr, _hx_qtype("haxe.IMap"))))->set($index1, $v2 + $delta);
				}
				{
					$GLOBALS['%s']->pop();
					return $v2;
				}
			} else {
				$v3 = $arr[$index1];
				if($prefix) {
					$v3 = $v3 + $delta;
					$arr[$index1] = $v3;
				} else {
					$arr[$index1] = $v3 + $delta;
				}
				{
					$GLOBALS['%s']->pop();
					return $v3;
				}
			}
		}break;
		default:{
			$e3 = null;
			if($delta > 0) {
				$e3 = "++";
			} else {
				$e3 = "--";
			}
			$e4 = hscript_Error::EInvalidOp($e3);
			throw new HException($e4);
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function execute($expr) {
		$GLOBALS['%s']->push("hscript.Interp::execute");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->depth = 0;
		$this->locals = new haxe_ds_StringMap();
		$this->declared = new _hx_array(array());
		{
			$tmp = $this->exprReturn($expr);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function exprReturn($e) {
		$GLOBALS['%s']->push("hscript.Interp::exprReturn");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			{
				$tmp = $this->expr($e);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e1 = $_ex_) instanceof hscript__Interp_Stop){
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				switch($e1->index) {
				case 0:{
					throw new HException("Invalid break");
				}break;
				case 1:{
					throw new HException("Invalid continue");
				}break;
				case 2:{
					$v = $this->returnValue;
					$this->returnValue = null;
					{
						$GLOBALS['%s']->pop();
						return $v;
					}
				}break;
				}
			} else throw $__hx__e;;
		}
		$GLOBALS['%s']->pop();
	}
	public function duplicate($h) {
		$GLOBALS['%s']->push("hscript.Interp::duplicate");
		$__hx__spos = $GLOBALS['%s']->length;
		$h2 = new haxe_ds_StringMap();
		{
			$k = $h->keys();
			while($k->hasNext()) {
				$k1 = $k->next();
				$h2->set($k1, $h->get($k1));
				unset($k1);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $h2;
		}
		$GLOBALS['%s']->pop();
	}
	public function restore($old) {
		$GLOBALS['%s']->push("hscript.Interp::restore");
		$__hx__spos = $GLOBALS['%s']->length;
		while($this->declared->length > $old) {
			$d = $this->declared->pop();
			$this->locals->set($d->n, $d->old);
			unset($d);
		}
		$GLOBALS['%s']->pop();
	}
	public function edef($e) {
		$GLOBALS['%s']->push("hscript.Interp::edef");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $e;
		}
		$GLOBALS['%s']->pop();
	}
	public function error($e, $rethrow = null) {
		$GLOBALS['%s']->push("hscript.Interp::error");
		$__hx__spos = $GLOBALS['%s']->length;
		if($rethrow === null) {
			$rethrow = false;
		}
		if($rethrow) {
			throw new HException($e);
		} else {
			throw new HException($e);
		}
		$GLOBALS['%s']->pop();
	}
	public function rethrow($e) {
		$GLOBALS['%s']->push("hscript.Interp::rethrow");
		$__hx__spos = $GLOBALS['%s']->length;
		throw new HException($e);
		$GLOBALS['%s']->pop();
	}
	public function resolve($id) {
		$GLOBALS['%s']->push("hscript.Interp::resolve");
		$__hx__spos = $GLOBALS['%s']->length;
		$l = $this->locals->get($id);
		if($l !== null) {
			$tmp = $l->r;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$v = $this->variables->get($id);
		$tmp = null;
		if($v === null) {
			$tmp = !$this->variables->exists($id);
		} else {
			$tmp = false;
		}
		if($tmp) {
			$e = hscript_Error::EUnknownVariable($id);
			throw new HException($e);
		}
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function expr($e) {
		$GLOBALS['%s']->push("hscript.Interp::expr");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		switch($e->index) {
		case 0:{
			$c = _hx_deref($e)->params[0];
			switch($c->index) {
			case 0:{
				$v = _hx_deref($c)->params[0];
				{
					$GLOBALS['%s']->pop();
					return $v;
				}
			}break;
			case 1:{
				$f = _hx_deref($c)->params[0];
				{
					$GLOBALS['%s']->pop();
					return $f;
				}
			}break;
			case 2:{
				$s = _hx_deref($c)->params[0];
				{
					$GLOBALS['%s']->pop();
					return $s;
				}
			}break;
			}
		}break;
		case 1:{
			$id = _hx_deref($e)->params[0];
			{
				$tmp = $this->resolve($id);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 2:{
			$e1 = _hx_deref($e)->params[2];
			$n = _hx_deref($e)->params[0];
			$tmp = $this->declared;
			$tmp->push(_hx_anonymous(array("n" => $n, "old" => $this->locals->get($n))));
			{
				$this1 = $this->locals;
				$value = null;
				if($e1 === null) {
					$value = null;
				} else {
					$value = $this->expr($e1);
				}
				$this1->set($n, _hx_anonymous(array("r" => $value)));
			}
			{
				$GLOBALS['%s']->pop();
				return null;
			}
		}break;
		case 3:{
			$e2 = _hx_deref($e)->params[0];
			{
				$tmp = $this->expr($e2);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 4:{
			$exprs = _hx_deref($e)->params[0];
			$old = $this->declared->length;
			$v1 = null;
			{
				$_g = 0;
				while($_g < $exprs->length) {
					$e3 = $exprs[$_g];
					$_g = $_g + 1;
					$v1 = $this->expr($e3);
					unset($e3);
				}
			}
			$this->restore($old);
			{
				$GLOBALS['%s']->pop();
				return $v1;
			}
		}break;
		case 5:{
			$f1 = _hx_deref($e)->params[1];
			$e4 = _hx_deref($e)->params[0];
			{
				$tmp = $this->get($this->expr($e4), $f1);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 6:{
			$e21 = _hx_deref($e)->params[2];
			$e11 = _hx_deref($e)->params[1];
			$op = _hx_deref($e)->params[0];
			$fop = $this->binops->get($op);
			if($fop === null) {
				$e5 = hscript_Error::EInvalidOp($op);
				throw new HException($e5);
			}
			{
				$tmp = call_user_func_array($fop, array($e11, $e21));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 7:{
			$e6 = _hx_deref($e)->params[2];
			$prefix = _hx_deref($e)->params[1];
			$op1 = _hx_deref($e)->params[0];
			switch($op1) {
			case "!":{
				$tmp = !_hx_equal($this->expr($e6), true);
				$GLOBALS['%s']->pop();
				return $tmp;
			}break;
			case "++":{
				$tmp = $this->increment($e6, $prefix, 1);
				$GLOBALS['%s']->pop();
				return $tmp;
			}break;
			case "-":{
				$tmp = -$this->expr($e6);
				$GLOBALS['%s']->pop();
				return $tmp;
			}break;
			case "--":{
				$tmp = $this->increment($e6, $prefix, -1);
				$GLOBALS['%s']->pop();
				return $tmp;
			}break;
			case "~":{
				$tmp = ~$this->expr($e6);
				$GLOBALS['%s']->pop();
				return $tmp;
			}break;
			default:{
				$e7 = hscript_Error::EInvalidOp($op1);
				throw new HException($e7);
			}break;
			}
		}break;
		case 8:{
			$params = _hx_deref($e)->params[1];
			$e8 = _hx_deref($e)->params[0];
			$args = new _hx_array(array());
			{
				$_g1 = 0;
				while($_g1 < $params->length) {
					$p = $params[$_g1];
					$_g1 = $_g1 + 1;
					$args->push($this->expr($p));
					unset($p);
				}
			}
			if($e8->index === 5) {
				$f2 = _hx_deref($e8)->params[1];
				$e9 = _hx_deref($e8)->params[0];
				$obj = $this->expr($e9);
				if($obj === null) {
					$e10 = hscript_Error::EInvalidAccess($f2);
					throw new HException($e10);
				}
				{
					$tmp = $this->fcall($obj, $f2, $args);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			} else {
				$tmp = $this->call(null, $this->expr($e8), $args);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 9:{
			$e22 = _hx_deref($e)->params[2];
			$e12 = _hx_deref($e)->params[1];
			$econd = _hx_deref($e)->params[0];
			if(_hx_equal($this->expr($econd), true)) {
				$tmp = $this->expr($e12);
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				if($e22 === null) {
					$GLOBALS['%s']->pop();
					return null;
				} else {
					$tmp = $this->expr($e22);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}break;
		case 10:{
			$e13 = _hx_deref($e)->params[1];
			$econd1 = _hx_deref($e)->params[0];
			$this->whileLoop($econd1, $e13);
			{
				$GLOBALS['%s']->pop();
				return null;
			}
		}break;
		case 11:{
			$e14 = _hx_deref($e)->params[2];
			$it = _hx_deref($e)->params[1];
			$v2 = _hx_deref($e)->params[0];
			$this->forLoop($v2, $it, $e14);
			{
				$GLOBALS['%s']->pop();
				return null;
			}
		}break;
		case 12:{
			throw new HException(hscript__Interp_Stop::$SBreak);
		}break;
		case 13:{
			throw new HException(hscript__Interp_Stop::$SContinue);
		}break;
		case 14:{
			$name = _hx_deref($e)->params[2];
			$fexpr = _hx_deref($e)->params[1];
			$params1 = _hx_deref($e)->params[0];
			$capturedLocals = $this->duplicate($this->locals);
			$me = $this;
			$hasOpt = false;
			$minParams = 0;
			{
				$_g2 = 0;
				while($_g2 < $params1->length) {
					$p1 = $params1[$_g2];
					$_g2 = $_g2 + 1;
					if($p1->opt) {
						$hasOpt = true;
					} else {
						$minParams = $minParams + 1;
					}
					unset($p1);
				}
			}
			$f3 = array(new _hx_lambda(array(&$_gthis, &$capturedLocals, &$fexpr, &$me, &$minParams, &$name, &$params1), "hscript_Interp_33"), 'execute');
			$f4 = Reflect::makeVarArgs($f3);
			if($name !== null) {
				if($this->depth === 0) {
					$this->variables->set($name, $f4);
				} else {
					$tmp1 = $this->declared;
					$tmp2 = $this->locals->get($name);
					$tmp1->push(_hx_anonymous(array("n" => $name, "old" => $tmp2)));
					$ref = _hx_anonymous(array("r" => $f4));
					$this->locals->set($name, $ref);
					$capturedLocals->set($name, $ref);
				}
			}
			{
				$GLOBALS['%s']->pop();
				return $f4;
			}
		}break;
		case 15:{
			$e16 = _hx_deref($e)->params[0];
			$tmp3 = null;
			if($e16 === null) {
				$tmp3 = null;
			} else {
				$tmp3 = $this->expr($e16);
			}
			$this->returnValue = $tmp3;
			throw new HException(hscript__Interp_Stop::$SReturn);
		}break;
		case 16:{
			$index = _hx_deref($e)->params[1];
			$e17 = _hx_deref($e)->params[0];
			$arr = $this->expr($e17);
			$index1 = $this->expr($index);
			if(Std::is($arr, _hx_qtype("haxe.IMap"))) {
				$tmp = _hx_deref((_hx_cast($arr, _hx_qtype("haxe.IMap"))))->get($index1);
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$tmp = $arr[$index1];
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 17:{
			$arr1 = _hx_deref($e)->params[0];
			$tmp4 = null;
			if($arr1->length > 0) {
				$_g5 = $arr1[0];
				if($_g5->index === 6) {
					if(_hx_deref($_g5)->params[0] === "=>") {
						$tmp4 = true;
					} else {
						$tmp4 = false;
					}
				} else {
					$tmp4 = false;
				}
			} else {
				$tmp4 = false;
			}
			if($tmp4) {
				$isAllString = true;
				$isAllInt = true;
				$isAllObject = true;
				$isAllEnum = true;
				$keys = (new _hx_array(array()));
				$values = (new _hx_array(array()));
				{
					$_g12 = 0;
					while($_g12 < $arr1->length) {
						$e18 = $arr1[$_g12];
						$_g12 = $_g12 + 1;
						if($e18->index === 6) {
							if(_hx_deref($e18)->params[0] === "=>") {
								$eValue = _hx_deref($e18)->params[2];
								$eKey = _hx_deref($e18)->params[1];
								{
									$key = $this->expr($eKey);
									$value1 = $this->expr($eValue);
									if($isAllString) {
										$isAllString = Std::is($key, _hx_qtype("String"));
									} else {
										$isAllString = false;
									}
									if($isAllInt) {
										$isAllInt = Std::is($key, _hx_qtype("Int"));
									} else {
										$isAllInt = false;
									}
									if($isAllObject) {
										$isAllObject = Reflect::isObject($key);
									} else {
										$isAllObject = false;
									}
									if($isAllEnum) {
										$isAllEnum = Reflect::isEnumValue($key);
									} else {
										$isAllEnum = false;
									}
									$keys->push($key);
									$values->push($value1);
									unset($value1,$key);
								}
								unset($eValue,$eKey);
							} else {
								throw new HException("=> expected");
							}
						} else {
							throw new HException("=> expected");
						}
						unset($e18);
					}
				}
				$map = null;
				if($isAllInt) {
					$map = new haxe_ds_IntMap();
				} else {
					if($isAllString) {
						$map = new haxe_ds_StringMap();
					} else {
						if($isAllEnum) {
							$map = new haxe_ds_EnumValueMap();
						} else {
							if($isAllObject) {
								$map = new haxe_ds_ObjectMap();
							} else {
								throw new HException("Inconsistent key types");
							}
						}
					}
				}
				{
					$_g21 = 0;
					$_g13 = $keys->length;
					while($_g21 < $_g13) {
						$_g21 = $_g21 + 1;
						$n1 = $_g21 - 1;
						_hx_deref((_hx_cast($map, _hx_qtype("haxe.IMap"))))->set($keys[$n1], $values[$n1]);
						unset($n1);
					}
				}
				{
					$GLOBALS['%s']->pop();
					return $map;
				}
			} else {
				$a = new _hx_array(array());
				{
					$_g14 = 0;
					while($_g14 < $arr1->length) {
						$e19 = $arr1[$_g14];
						$_g14 = $_g14 + 1;
						$a->push($this->expr($e19));
						unset($e19);
					}
				}
				{
					$GLOBALS['%s']->pop();
					return $a;
				}
			}
		}break;
		case 18:{
			$params2 = _hx_deref($e)->params[1];
			$cl = _hx_deref($e)->params[0];
			$a1 = new _hx_array(array());
			{
				$_g6 = 0;
				while($_g6 < $params2->length) {
					$e20 = $params2[$_g6];
					$_g6 = $_g6 + 1;
					$a1->push($this->expr($e20));
					unset($e20);
				}
			}
			{
				$tmp = $this->cnew($cl, $a1);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 19:{
			$e23 = _hx_deref($e)->params[0];
			throw new HException($this->expr($e23));
		}break;
		case 20:{
			$ecatch = _hx_deref($e)->params[3];
			$n2 = _hx_deref($e)->params[1];
			$e24 = _hx_deref($e)->params[0];
			$old2 = $this->declared->length;
			$oldTry = $this->inTry;
			try {
				$this->inTry = true;
				$v3 = $this->expr($e24);
				$this->restore($old2);
				$this->inTry = $oldTry;
				{
					$GLOBALS['%s']->pop();
					return $v3;
				}
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				if(($err = $_ex_) instanceof hscript__Interp_Stop){
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					$this->inTry = $oldTry;
					throw new HException($err);
				}
				else { $err1 = $_ex_;
				{
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					$this->restore($old2);
					$this->inTry = $oldTry;
					$tmp5 = $this->declared;
					$tmp5->push(_hx_anonymous(array("n" => $n2, "old" => $this->locals->get($n2))));
					$this->locals->set($n2, _hx_anonymous(array("r" => $err1)));
					$v4 = $this->expr($ecatch);
					$this->restore($old2);
					{
						$GLOBALS['%s']->pop();
						return $v4;
					}
				}}
			}
		}break;
		case 21:{
			$fl = _hx_deref($e)->params[0];
			$o = _hx_anonymous(array());
			{
				$_g7 = 0;
				while($_g7 < $fl->length) {
					$f5 = $fl[$_g7];
					$_g7 = $_g7 + 1;
					$f6 = $f5->name;
					$this->set($o, $f6, $this->expr($f5->e));
					unset($f6,$f5);
				}
			}
			{
				$GLOBALS['%s']->pop();
				return $o;
			}
		}break;
		case 22:{
			$e25 = _hx_deref($e)->params[2];
			$e110 = _hx_deref($e)->params[1];
			$econd2 = _hx_deref($e)->params[0];
			if(_hx_equal($this->expr($econd2), true)) {
				$tmp = $this->expr($e110);
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$tmp = $this->expr($e25);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 23:{
			$def = _hx_deref($e)->params[2];
			$cases = _hx_deref($e)->params[1];
			$e26 = _hx_deref($e)->params[0];
			$val = $this->expr($e26);
			$match = false;
			{
				$_g8 = 0;
				while($_g8 < $cases->length) {
					$c1 = $cases[$_g8];
					$_g8 = $_g8 + 1;
					{
						$_g15 = 0;
						$_g22 = $c1->values;
						while($_g15 < $_g22->length) {
							$v5 = $_g22[$_g15];
							$_g15 = $_g15 + 1;
							if(_hx_equal($this->expr($v5), $val)) {
								$match = true;
								break;
							}
							unset($v5);
						}
						unset($_g22,$_g15);
					}
					if($match) {
						$val = $this->expr($c1->expr);
						break;
					}
					unset($c1);
				}
			}
			if(!$match) {
				if($def === null) {
					$val = null;
				} else {
					$val = $this->expr($def);
				}
			}
			{
				$GLOBALS['%s']->pop();
				return $val;
			}
		}break;
		case 24:{
			$e27 = _hx_deref($e)->params[1];
			$econd3 = _hx_deref($e)->params[0];
			$this->doWhileLoop($econd3, $e27);
			{
				$GLOBALS['%s']->pop();
				return null;
			}
		}break;
		case 25:{
			$e28 = _hx_deref($e)->params[2];
			{
				$tmp = $this->expr($e28);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function doWhileLoop($econd, $e) {
		$GLOBALS['%s']->push("hscript.Interp::doWhileLoop");
		$__hx__spos = $GLOBALS['%s']->length;
		$old = $this->declared->length;
		while(true) {
			try {
				$this->expr($e);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				if(($err = $_ex_) instanceof hscript__Interp_Stop){
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					switch($err->index) {
					case 0:{
						break 2;
					}break;
					case 1:{
					}break;
					case 2:{
						throw new HException($err);
					}break;
					}
				} else throw $__hx__e;;
			}
			if(!(_hx_equal($this->expr($econd), true))) {
				break;
			}
			unset($err);
		}
		$this->restore($old);
		$GLOBALS['%s']->pop();
	}
	public function whileLoop($econd, $e) {
		$GLOBALS['%s']->push("hscript.Interp::whileLoop");
		$__hx__spos = $GLOBALS['%s']->length;
		$old = $this->declared->length;
		while(_hx_equal($this->expr($econd), true)) {
			try {
				$this->expr($e);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				if(($err = $_ex_) instanceof hscript__Interp_Stop){
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					switch($err->index) {
					case 0:{
						break 2;
					}break;
					case 1:{
					}break;
					case 2:{
						throw new HException($err);
					}break;
					}
				} else throw $__hx__e;;
			}
			unset($err);
		}
		$this->restore($old);
		$GLOBALS['%s']->pop();
	}
	public function makeIterator($v) {
		$GLOBALS['%s']->push("hscript.Interp::makeIterator");
		$__hx__spos = $GLOBALS['%s']->length;
		if(_hx_field($v, "iterator") !== null) {
			$v = $v->iterator();
		}
		$tmp = null;
		if(_hx_field($v, "hasNext") !== null) {
			$tmp = _hx_field($v, "next") === null;
		} else {
			$tmp = true;
		}
		if($tmp) {
			$e = hscript_Error::EInvalidIterator($v);
			throw new HException($e);
		}
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function forLoop($n, $it, $e) {
		$GLOBALS['%s']->push("hscript.Interp::forLoop");
		$__hx__spos = $GLOBALS['%s']->length;
		$old = $this->declared->length;
		$tmp = $this->declared;
		$tmp->push(_hx_anonymous(array("n" => $n, "old" => $this->locals->get($n))));
		$it1 = $this->makeIterator($this->expr($it));
		while($it1->hasNext()) {
			{
				$this1 = $this->locals;
				$this1->set($n, _hx_anonymous(array("r" => $it1->next())));
				unset($this1);
			}
			try {
				$this->expr($e);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				if(($err = $_ex_) instanceof hscript__Interp_Stop){
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					switch($err->index) {
					case 0:{
						break 2;
					}break;
					case 1:{
					}break;
					case 2:{
						throw new HException($err);
					}break;
					}
				} else throw $__hx__e;;
			}
			unset($err);
		}
		$this->restore($old);
		$GLOBALS['%s']->pop();
	}
	public function isMap($o) {
		$GLOBALS['%s']->push("hscript.Interp::isMap");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Std::is($o, _hx_qtype("haxe.IMap"));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getMapValue($map, $key) {
		$GLOBALS['%s']->push("hscript.Interp::getMapValue");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_deref((_hx_cast($map, _hx_qtype("haxe.IMap"))))->get($key);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setMapValue($map, $key, $value) {
		$GLOBALS['%s']->push("hscript.Interp::setMapValue");
		$__hx__spos = $GLOBALS['%s']->length;
		_hx_deref((_hx_cast($map, _hx_qtype("haxe.IMap"))))->set($key, $value);
		$GLOBALS['%s']->pop();
	}
	public function get($o, $f) {
		$GLOBALS['%s']->push("hscript.Interp::get");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o === null) {
			$e = hscript_Error::EInvalidAccess($f);
			throw new HException($e);
		}
		try {
			{
				$tmp = Reflect::getProperty($o, $f);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e1 = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				{
					$tmp = Reflect::field($o, $f);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function set($o, $f, $v) {
		$GLOBALS['%s']->push("hscript.Interp::set");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o === null) {
			$e = hscript_Error::EInvalidAccess($f);
			throw new HException($e);
		}
		Reflect::setProperty($o, $f, $v);
		{
			$GLOBALS['%s']->pop();
			return $v;
		}
		$GLOBALS['%s']->pop();
	}
	public function fcall($o, $f, $args) {
		$GLOBALS['%s']->push("hscript.Interp::fcall");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->call($o, $this->get($o, $f), $args);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function call($o, $f, $args) {
		$GLOBALS['%s']->push("hscript.Interp::call");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Reflect::callMethod($o, $f, $args);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function cnew($cl, $args) {
		$GLOBALS['%s']->push("hscript.Interp::cnew");
		$__hx__spos = $GLOBALS['%s']->length;
		$c = Type::resolveClass($cl);
		if($c === null) {
			$c = $this->resolve($cl);
		}
		{
			$tmp = Type::createInstance($c, $args);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'hscript.Interp'; }
}
function hscript_Interp_0(&$_gthis, $el) {
	{
		$GLOBALS['%s']->push("hscript.Interp::new@65");
		$__hx__spos = $GLOBALS['%s']->length;
		$inf = $_gthis->posInfos();
		$v = $el->shift();
		if($el->length > 0) {
			$inf->customParams = $el;
		}
		$value = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
		call_user_func_array($value, array(Std::string($v), $inf));
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_1(&$me, $e1, $e2) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@89");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $me->expr($e1);
		{
			$tmp2 = _hx_add($tmp, $me->expr($e2));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_2(&$me, $e11, $e21) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@90");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp1 = $me->expr($e11);
		{
			$tmp = $tmp1 - $me->expr($e21);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_3(&$me, $e12, $e22) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@91");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp2 = $me->expr($e12);
		{
			$tmp = $tmp2 * $me->expr($e22);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_4(&$me, $e13, $e23) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@92");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp3 = $me->expr($e13);
		{
			$tmp = $tmp3 / $me->expr($e23);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_5(&$me, $e14, $e24) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@93");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp4 = $me->expr($e14);
		{
			$tmp = _hx_mod($tmp4, $me->expr($e24));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_6(&$me, $e15, $e25) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@94");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp5 = $me->expr($e15);
		{
			$tmp = $tmp5 & $me->expr($e25);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_7(&$me, $e16, $e26) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@95");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp6 = $me->expr($e16);
		{
			$tmp = $tmp6 | $me->expr($e26);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_8(&$me, $e17, $e27) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@96");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp7 = $me->expr($e17);
		{
			$tmp = $tmp7 ^ $me->expr($e27);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_9(&$me, $e18, $e28) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@97");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp8 = $me->expr($e18);
		{
			$tmp = $tmp8 << $me->expr($e28);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_10(&$me, $e19, $e29) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@98");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp9 = $me->expr($e19);
		{
			$tmp = $tmp9 >> $me->expr($e29);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_11(&$me, $e110, $e210) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@99");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp10 = $me->expr($e110);
		{
			$tmp = _hx_shift_right($tmp10, $me->expr($e210));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_12(&$me, $e111, $e211) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@100");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp11 = $me->expr($e111);
		{
			$tmp = _hx_equal($tmp11, $me->expr($e211));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_13(&$me, $e112, $e212) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@101");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp12 = $me->expr($e112);
		{
			$tmp = !_hx_equal($tmp12, $me->expr($e212));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_14(&$me, $e113, $e213) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@102");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp13 = $me->expr($e113);
		{
			$tmp = $tmp13 >= $me->expr($e213);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_15(&$me, $e114, $e214) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@103");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp14 = $me->expr($e114);
		{
			$tmp = $tmp14 <= $me->expr($e214);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_16(&$me, $e115, $e215) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@104");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp15 = $me->expr($e115);
		{
			$tmp = $tmp15 > $me->expr($e215);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_17(&$me, $e116, $e216) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@105");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp16 = $me->expr($e116);
		{
			$tmp = $tmp16 < $me->expr($e216);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_18(&$me, $e117, $e217) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@106");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!_hx_equal($me->expr($e117), true)) {
			$tmp = _hx_equal($me->expr($e217), true);
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$GLOBALS['%s']->pop();
			return true;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_19(&$me, $e118, $e218) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@107");
		$__hx__spos = $GLOBALS['%s']->length;
		if(_hx_equal($me->expr($e118), true)) {
			$tmp = _hx_equal($me->expr($e218), true);
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_20(&$me, $e119, $e219) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@109");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp17 = $me->expr($e119);
		{
			$tmp = new IntIterator($tmp17, $me->expr($e219));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_21($v1, $v2) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@110");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_add($v1, $v2);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_22($v11, $v21) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@111");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v11 - $v21;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_23($v12, $v22) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@112");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v12 * $v22;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_24($v13, $v23) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@113");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v13 / $v23;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_25($v14, $v24) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@114");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_mod($v14, $v24);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_26($v15, $v25) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@115");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v15 & $v25;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_27($v16, $v26) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@116");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v16 | $v26;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_28($v17, $v27) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@117");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v17 ^ $v27;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_29($v18, $v28) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@118");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v18 << $v28;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_30($v19, $v29) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@119");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $v19 >> $v29;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_31($v110, $v210) {
	{
		$GLOBALS['%s']->push("hscript.Interp::initOps@120");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_shift_right($v110, $v210);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_32(&$fop, &$me, &$op, $e1, $e2) {
	{
		$GLOBALS['%s']->push("hscript.Interp::assignOp@152");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $me->evalAssignOp($op, $fop, $e1, $e2);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function hscript_Interp_33(&$_gthis, &$capturedLocals, &$fexpr, &$me, &$minParams, &$name, &$params1, $args1) {
	{
		$GLOBALS['%s']->push("hscript.Interp::expr@410");
		$__hx__spos = $GLOBALS['%s']->length;
		if($args1->length !== $params1->length) {
			if($args1->length < $minParams) {
				$str = "Invalid number of parameters. Got " . _hx_string_rec($args1->length, "") . ", required " . _hx_string_rec($minParams, "");
				if($name !== null) {
					$str = _hx_string_or_null($str) . _hx_string_or_null((" for function '" . _hx_string_or_null($name) . "'"));
				}
				throw new HException($str);
			}
			$args2 = (new _hx_array(array()));
			$extraParams = $args1->length - $minParams;
			$pos = 0;
			{
				$_g3 = 0;
				while($_g3 < $params1->length) {
					$p2 = $params1[$_g3];
					$_g3 = $_g3 + 1;
					if($p2->opt) {
						if($extraParams > 0) {
							$pos = $pos + 1;
							$args2->push($args1[$pos - 1]);
							$extraParams = $extraParams - 1;
						} else {
							$args2->push(null);
						}
					} else {
						$pos = $pos + 1;
						$args2->push($args1[$pos - 1]);
					}
					unset($p2);
				}
			}
			$args1 = $args2;
		}
		$old1 = $me->locals;
		$depth = $me->depth;
		$me->depth++;
		$me->locals = $me->duplicate($capturedLocals);
		{
			$_g11 = 0;
			$_g4 = $params1->length;
			while($_g11 < $_g4) {
				$_g11 = $_g11 + 1;
				$i = $_g11 - 1;
				$me->locals->set(_hx_array_get($params1, $i)->name, _hx_anonymous(array("r" => $args1[$i])));
				unset($i);
			}
		}
		$r = null;
		if($_gthis->inTry) {
			try {
				$r = $me->exprReturn($fexpr);
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e15 = $_ex_;
				{
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					$me->locals = $old1;
					$me->depth = $depth;
					throw new HException($e15);
				}
			}
		} else {
			$r = $me->exprReturn($fexpr);
		}
		$me->locals = $old1;
		$me->depth = $depth;
		{
			$GLOBALS['%s']->pop();
			return $r;
		}
		$GLOBALS['%s']->pop();
	}
}

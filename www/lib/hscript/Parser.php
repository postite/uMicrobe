<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx
 */

namespace hscript;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\io\Input;
use \php\_Boot\HxString;
use \haxe\io\StringInput;
use \haxe\ds\GenericCell;
use \haxe\ds\GenericStack;
use \haxe\io\BytesOutput;
use \haxe\CallStack;
use \php\_Boot\HxAnon;

class Parser {
	/**
	 * @var int
	 */
	const p1 = 0;
	/**
	 * @var int
	 */
	const readPos = 0;
	/**
	 * @var int
	 */
	const tokenMax = 0;
	/**
	 * @var int
	 */
	const tokenMin = 0;


	/**
	 * @var bool
	 * activate JSON compatiblity
	 */
	public $allowJSON;
	/**
	 * @var bool
	 * allow haxe metadata declarations
	 */
	public $allowMetadata;
	/**
	 * @var bool
	 * allow types declarations
	 */
	public $allowTypes;
	/**
	 * @var int
	 */
	public $char;
	/**
	 * @var string
	 */
	public $identChars;
	/**
	 * @var \Array_hx
	 */
	public $idents;
	/**
	 * @var Input
	 */
	public $input;
	/**
	 * @var int
	 */
	public $line;
	/**
	 * @var string
	 */
	public $opChars;
	/**
	 * @var StringMap
	 */
	public $opPriority;
	/**
	 * @var StringMap
	 */
	public $opRightAssoc;
	/**
	 * @var \Array_hx
	 */
	public $ops;
	/**
	 * @var \Array_hx
	 */
	public $preprocStack;
	/**
	 * @var StringMap
	 * allows to check for #if / #else in code
	 */
	public $preprocesorValues;
	/**
	 * @var GenericStack
	 */
	public $tokens;
	/**
	 * @var int
	 */
	public $uid;
	/**
	 * @var StringMap
	 */
	public $unops;


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:86: characters 18-19
		$this->uid = 0;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:64: characters 55-64
		$this->preprocesorValues = new StringMap();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:111: characters 3-11
		$this->line = 1;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:112: characters 3-28
		$this->opChars = "+*/-=!><&|^%~";
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:113: characters 3-81
		$this->identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:114: lines 114-125
		$priorities = \Array_hx::wrap([
			\Array_hx::wrap(["%"]),
			\Array_hx::wrap([
				"*",
				"/",
			]),
			\Array_hx::wrap([
				"+",
				"-",
			]),
			\Array_hx::wrap([
				"<<",
				">>",
				">>>",
			]),
			\Array_hx::wrap([
				"|",
				"&",
				"^",
			]),
			\Array_hx::wrap([
				"==",
				"!=",
				">",
				"<",
				">=",
				"<=",
			]),
			\Array_hx::wrap(["..."]),
			\Array_hx::wrap(["&&"]),
			\Array_hx::wrap(["||"]),
			\Array_hx::wrap([
				"=",
				"+=",
				"-=",
				"*=",
				"/=",
				"%=",
				"<<=",
				">>=",
				">>>=",
				"|=",
				"&=",
				"^=",
				"=>",
			]),
		]);
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:127: characters 3-25
		$this->opPriority = new StringMap();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:128: characters 3-27
		$this->opRightAssoc = new StringMap();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:129: characters 3-20
		$this->unops = new StringMap();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:135: lines 135-139
		$_g1 = 0;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:135: lines 135-139
		$_g = $priorities->length;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:135: lines 135-139
		while ($_g1 < $_g) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:135: lines 135-139
			$_g1 = $_g1 + 1;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:135: characters 8-9
			$i = $_g1 - 1;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:136: lines 136-139
			$_g2 = 0;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:136: lines 136-139
			$_g3 = ($priorities->arr[$i] ?? null);
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:136: lines 136-139
			while ($_g2 < $_g3->length) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:136: characters 9-10
				$x = ($_g3->arr[$_g2] ?? null);
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:136: lines 136-139
				$_g2 = $_g2 + 1;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:137: characters 5-25
				$this->opPriority->data[$x] = $i;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:138: characters 5-43
				if ($i === 9) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:138: characters 18-43
					$this->opRightAssoc->data[$x] = true;
				}
			}

		}

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:140: lines 140-141
		$x1 = "!";
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:141: characters 4-40
		$this->unops->data[$x1] = ($x1 === "++") || ($x1 === "--");

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:140: lines 140-141
		$x2 = "++";
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:141: characters 4-40
		$this->unops->data[$x2] = ($x2 === "++") || ($x2 === "--");

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:140: lines 140-141
		$x3 = "--";
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:141: characters 4-40
		$this->unops->data[$x3] = ($x3 === "++") || ($x3 === "--");

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:140: lines 140-141
		$x4 = "-";
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:141: characters 4-40
		$this->unops->data[$x4] = ($x4 === "++") || ($x4 === "--");

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:140: lines 140-141
		$x5 = "~";
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:141: characters 4-40
		$this->unops->data[$x5] = ($x5 === "++") || ($x5 === "--");


	}


	/**
	 * @param Const_hx $c
	 * 
	 * @return string
	 */
	public function constString ($c) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1572: lines 1572-1579
		switch ($c->index) {
			case 0:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1573: characters 13-14
				$v = $c->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1573: characters 17-30
				return \Std::string($v);
				break;
			case 1:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1574: characters 15-16
				$f = $c->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1574: characters 19-32
				return \Std::string($f);
				break;
			case 2:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1575: characters 16-17
				$s = $c->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1575: characters 20-21
				return $s;
				break;
		}
	}


	/**
	 * @param Token $tk
	 * 
	 * @return void
	 */
	public function ensure ($tk) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:213: characters 3-19
		$t = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:214: characters 3-30
		if ($t !== $tk) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:214: characters 17-30
			$this->unexpected($t);
		}
	}


	/**
	 * @param Token $tk
	 * 
	 * @return void
	 */
	public function ensureToken ($tk) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:218: characters 3-19
		$t = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:219: characters 3-41
		if (!\Type::enumEq($t, $tk)) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:219: characters 28-41
			$this->unexpected($t);
		}
	}


	/**
	 * @param Error $err
	 * @param int $pmin
	 * @param int $pmax
	 * 
	 * @return void
	 */
	public function error ($err, $pmin, $pmax) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:148: characters 3-8
		throw new HxException($err);
	}


	/**
	 * @param Expr $e
	 * 
	 * @return bool
	 */
	public function evalPreproCond ($e) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1464: lines 1464-1478
		switch ($e->index) {
			case 1:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1465: characters 15-17
				$id = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1466: characters 4-35
				return $this->preprocValue($id) !== null;
				break;
			case 3:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1469: characters 16-17
				$e1 = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1470: characters 4-28
				return $this->evalPreproCond($e1);
				break;
			case 6:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1464: characters 16-17
				switch ($e->params[0]) {
					case "&&":
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1471: characters 25-27
						$e2 = $e->params[2];
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1471: characters 21-23
						$e11 = $e->params[1];
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1472: characters 11-51
						if ($this->evalPreproCond($e11)) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1472: characters 33-51
							return $this->evalPreproCond($e2);
						} else {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1472: characters 11-51
							return false;
						}
						break;
					case "||":
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1473: characters 25-27
						$e21 = $e->params[2];
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1473: characters 21-23
						$e12 = $e->params[1];
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1474: characters 11-51
						if (!$this->evalPreproCond($e12)) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1474: characters 33-51
							return $this->evalPreproCond($e21);
						} else {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1474: characters 11-51
							return true;
						}
						break;
					default:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1476: characters 4-84
						throw new HxException(Error::EInvalidPreprocessor("Can't eval " . (\Type::enumConstructor($e)??'null')));
						break;
				}
				break;
			case 7:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1464: characters 16-17
				if ($e->params[0] === "!") {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1467: characters 22-23
					$e3 = $e->params[2];
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1468: characters 4-29
					return !$this->evalPreproCond($e3);
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1476: characters 4-84
					throw new HxException(Error::EInvalidPreprocessor("Can't eval " . (\Type::enumConstructor($e)??'null')));
				}
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1476: characters 4-84
				throw new HxException(Error::EInvalidPreprocessor("Can't eval " . (\Type::enumConstructor($e)??'null')));
				break;
		}
	}


	/**
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	public function expr ($e) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:244: characters 3-11
		return $e;
	}


	/**
	 * @return string
	 */
	public function getIdent () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:231: characters 3-20
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:232: lines 232-237
		if ($tk->index === 2) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:233: characters 12-14
			$id = $tk->params[0];
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:233: characters 17-26
			return $id;
		} else {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:235: characters 4-18
			$this->unexpected($tk);
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:236: characters 4-15
			return null;
		}
	}


	/**
	 * @return void
	 */
	public function incPos () {
	}


	/**
	 * @param string $origin
	 * 
	 * @return void
	 */
	public function initParser ($origin) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:158: characters 3-20
		$this->preprocStack = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:166: characters 3-45
		$this->tokens = new GenericStack();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:170: characters 3-12
		$this->char = -1;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:171: characters 3-20
		$this->ops = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:172: characters 3-23
		$this->idents = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:173: characters 3-10
		$this->uid = 0;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:174: lines 174-175
		$_g1 = 0;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:174: lines 174-175
		$_g = strlen($this->opChars);
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:174: lines 174-175
		while ($_g1 < $_g) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:174: lines 174-175
			$_g1 = $_g1 + 1;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:174: characters 8-9
			$i = $_g1 - 1;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:175: characters 8-29
			$_this = $this->opChars;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:175: characters 4-37
			$this->ops[(($i < 0) || ($i >= strlen($_this)) ? null : ord($_this[$i]))] = true;
		}

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:176: lines 176-177
		$_g11 = 0;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:176: lines 176-177
		$_g2 = strlen($this->identChars);
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:176: lines 176-177
		while ($_g11 < $_g2) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:176: lines 176-177
			$_g11 = $_g11 + 1;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:176: characters 8-9
			$i1 = $_g11 - 1;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:177: characters 11-35
			$_this1 = $this->identChars;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:177: characters 4-43
			$this->idents[(($i1 < 0) || ($i1 >= strlen($_this1)) ? null : ord($_this1[$i1]))] = true;
		}

	}


	/**
	 * @param int $c
	 * 
	 * @return void
	 */
	public function invalidChar ($c) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:153: characters 3-43
		throw new HxException(Error::EInvalidChar($c));
	}


	/**
	 * @param Expr $e
	 * 
	 * @return bool
	 */
	public function isBlock ($e) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:276: lines 276-290
		switch ($e->index) {
			case 2:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:279: characters 19-20
				$e1 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:279: characters 16-17
				$t = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:279: characters 23-86
				if ($e1 !== null) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:279: characters 35-45
					return $this->isBlock($e1);
				} else if ($t !== null) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:279: characters 60-67
					if ($t === null) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:279: characters 60-67
						return false;
					} else if ($t->index === 2) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:279: characters 60-67
						return true;
					} else {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:279: characters 60-67
						return false;
					}
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:279: characters 81-86
					return false;
				}
				break;
			case 6:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:281: characters 19-20
				$e2 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:281: characters 23-33
				return $this->isBlock($e2);
				break;
			case 7:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:282: characters 23-24
				$e3 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:282: characters 16-22
				$prefix = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:282: characters 27-48
				if (!$prefix) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:282: characters 38-48
					return $this->isBlock($e3);
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:282: characters 27-48
					return false;
				}
				break;
			case 9:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:280: characters 17-19
				$e21 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:280: characters 14-16
				$e11 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:280: characters 22-67
				if ($e21 !== null) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:280: characters 39-50
					return $this->isBlock($e21);
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:280: characters 56-67
					return $this->isBlock($e11);
				}
				break;
			case 10:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:283: characters 17-18
				$e4 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:283: characters 21-31
				return $this->isBlock($e4);
				break;
			case 11:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:285: characters 17-18
				$e5 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:285: characters 21-31
				return $this->isBlock($e5);
				break;
			case 14:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:278: characters 20-21
				$e6 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:278: characters 28-38
				return $this->isBlock($e6);
				break;
			case 15:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:286: characters 16-17
				$e7 = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:286: characters 20-43
				if ($e7 !== null) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:286: characters 33-43
					return $this->isBlock($e7);
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:286: characters 20-43
					return false;
				}
				break;
			case 20:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:287: characters 22-23
				$e8 = $e->params[3];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:287: characters 26-36
				return $this->isBlock($e8);
				break;
			case 4:
			case 21:
			case 23:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:277: characters 43-47
				return true;
				break;
			case 24:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:284: characters 19-20
				$e9 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:284: characters 23-33
				return $this->isBlock($e9);
				break;
			case 25:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:288: characters 20-21
				$e10 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:288: characters 24-34
				return $this->isBlock($e10);
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:289: characters 12-17
				return false;
				break;
		}
	}


	/**
	 * @param string $op
	 * @param Expr $e1
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	public function makeBinop ($op, $e1, $e) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:506: lines 506-519
		switch ($e->index) {
			case 6:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:507: characters 22-24
				$e3 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:507: characters 19-21
				$e2 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:507: characters 15-18
				$op2 = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:508: lines 508-511
				if ((($this->opPriority->data[$op] ?? null) <= ($this->opPriority->data[$op2] ?? null)) && !array_key_exists($op, $this->opRightAssoc->data)) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:509: characters 5-61
					return Expr::EBinop($op2, $this->makeBinop($op, $e1, $e2), $e3);
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:511: characters 8-25
					return Expr::EBinop($op, $e1, $e);
				}
				break;
			case 22:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:512: characters 23-25
				$e4 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:512: characters 20-22
				$e31 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:512: characters 17-19
				$e21 = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:513: lines 513-516
				if (array_key_exists($op, $this->opRightAssoc->data)) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:514: characters 8-23
					return Expr::EBinop($op, $e1, $e);
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:516: characters 5-67
					return Expr::ETernary($this->makeBinop($op, $e1, $e21), $e31, $e4);
				}
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:518: characters 7-22
				return Expr::EBinop($op, $e1, $e);
				break;
		}
	}


	/**
	 * @param string $op
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	public function makeUnop ($op, $e) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:498: lines 498-502
		switch ($e->index) {
			case 6:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:499: characters 24-26
				$e2 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:499: characters 20-22
				$e1 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:499: characters 15-18
				$bop = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:499: characters 29-86
				return Expr::EBinop($bop, $this->makeUnop($op, $e1), $e2);
				break;
			case 22:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:500: characters 25-27
				$e3 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:500: characters 21-23
				$e21 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:500: characters 17-19
				$e11 = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:500: characters 30-88
				return Expr::ETernary($this->makeUnop($op, $e11), $e21, $e3);
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:501: characters 15-31
				return Expr::EUnop($op, true, $e);
				break;
		}
	}


	/**
	 * @param string $tmp
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	public function mapCompr ($tmp, $e) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
		$edef = null;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
		switch ($e->index) {
			case 3:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:489: characters 16-18
				$e2 = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
				$edef = Expr::EParent($this->mapCompr($tmp, $e2));
				break;
			case 4:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: characters 27-28
				if ($e->params[0]->length === 1) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:487: characters 16-17
					$e1 = ($e->params[0]->arr[0] ?? null);
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
					$edef = Expr::EBlock(\Array_hx::wrap([$this->mapCompr($tmp, $e1)]));
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
					$edef = Expr::ECall(Expr::EField(Expr::EIdent($tmp), "push"), \Array_hx::wrap([$e]));
				}
				break;
			case 9:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:485: characters 22-24
				$e21 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:485: characters 18-20
				$e11 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:485: characters 12-16
				$cond = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
				$edef = ($e21 === null ? Expr::EIf($cond, $this->mapCompr($tmp, $e11), null) : Expr::ECall(Expr::EField(Expr::EIdent($tmp), "push"), \Array_hx::wrap([$e])));
				break;
			case 10:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:481: characters 21-23
				$e22 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:481: characters 15-19
				$cond1 = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
				$edef = Expr::EWhile($cond1, $this->mapCompr($tmp, $e22));
				break;
			case 11:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:479: characters 20-22
				$e23 = $e->params[2];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:479: characters 16-18
				$it = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:479: characters 13-14
				$v = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
				$edef = Expr::EFor($v, $it, $this->mapCompr($tmp, $e23));
				break;
			case 24:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:483: characters 23-25
				$e24 = $e->params[1];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:483: characters 17-21
				$cond2 = $e->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
				$edef = Expr::EDoWhile($cond2, $this->mapCompr($tmp, $e24));
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:478: lines 478-493
				$edef = Expr::ECall(Expr::EField(Expr::EIdent($tmp), "push"), \Array_hx::wrap([$e]));
				break;
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:494: characters 3-36
		return $edef;
	}


	/**
	 * @param Token $tk
	 * 
	 * @return bool
	 */
	public function maybe ($tk) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:223: characters 3-19
		$t = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:224: lines 224-225
		if (\Type::enumEq($t, $tk)) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:225: characters 4-15
			return true;
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:226: characters 3-10
		$_this = $this->tokens;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:226: characters 3-10
		$_this->head = new GenericCell($t, $_this->head);

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:227: characters 3-15
		return false;
	}


	/**
	 * @param Expr $e
	 * @param int $pmin
	 * @param int $pmax
	 * 
	 * @return Expr
	 */
	public function mk ($e, $pmin = null, $pmax = null) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:271: characters 3-11
		return $e;
	}


	/**
	 * @param Input $s
	 * @param string $origin
	 * 
	 * @return Expr
	 */
	public function parse ($s, $origin = "hscript") {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:184: lines 184-195
		if ($origin === null) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:184: lines 184-195
			$origin = "hscript";
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:185: characters 3-21
		$this->initParser($origin);
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:186: characters 3-12
		$this->input = $s;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:187: characters 3-23
		$a = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:188: lines 188-193
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:189: characters 4-21
			$tk = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:190: characters 4-26
			if ($tk === Token::TEof()) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:190: characters 21-26
				break;
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:191: characters 4-12
			$_this = $this->tokens;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:191: characters 4-12
			$_this->head = new GenericCell($tk, $_this->head);

			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:192: characters 4-20
			$this->parseFullExpr($a);
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:194: characters 10-55
		if ($a->length === 1) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:194: characters 30-34
			return ($a->arr[0] ?? null);
		} else {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:194: characters 43-52
			return Expr::EBlock($a);
		}
	}


	/**
	 * @return Expr
	 */
	public function parseExpr () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:348: characters 3-20
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:352: lines 352-450
		switch ($tk->index) {
			case 1:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:358: characters 15-16
				$c = $tk->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:359: characters 4-39
				return $this->parseExprNext(Expr::EConst($c));
				break;
			case 2:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:353: characters 12-14
				$id = $tk->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:354: characters 4-31
				$e = $this->parseStructure($id);
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:355: lines 355-356
				if ($e === null) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:356: characters 5-23
					$e = Expr::EIdent($id);
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:357: characters 4-27
				return $this->parseExprNext($e);
				break;
			case 3:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:407: characters 12-14
				$op = $tk->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:408: lines 408-420
				if (array_key_exists($op, $this->unops->data)) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:409: characters 5-26
					$start = 0;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:410: characters 5-25
					$e1 = $this->parseExpr();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:411: lines 411-418
					if ($op === "-") {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:412: lines 412-418
						if ($e1->index === 0) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:412: characters 19-20
							switch ($e1->params[0]->index) {
								case 0:
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:413: characters 23-24
									$i = $e1->params[0]->params[0];
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:414: characters 7-50
									return Expr::EConst(Const_hx::CInt(-$i));
									break;
								case 1:
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:415: characters 25-26
									$f = $e1->params[0]->params[0];
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:416: characters 7-52
									return Expr::EConst(Const_hx::CFloat(-$f));
									break;
								default:
																		break;
							}
						}
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:419: characters 5-26
					return $this->makeUnop($op, $e1);
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:421: characters 4-25
				return $this->unexpected($tk);
				break;
			case 4:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:361: characters 4-24
				$e2 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:362: characters 4-19
				$t = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:362: characters 4-19
				if ($t !== Token::TPClose()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:362: characters 4-19
					$this->unexpected($t);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:363: characters 4-52
				return $this->parseExprNext(Expr::EParent($e2));
				break;
			case 6:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:365: characters 4-16
				$tk = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:366: lines 366-397
				switch ($tk->index) {
					case 1:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:378: characters 16-17
						$c1 = $tk->params[0];
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:379: lines 379-394
						if ($this->allowJSON) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:380: lines 380-392
							if ($c1->index === 2) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:382: characters 7-25
								$tk2 = $this->token();
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:383: characters 7-16
								$_this = $this->tokens;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:383: characters 7-16
								$_this->head = new GenericCell($tk2, $_this->head);

								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:384: characters 7-15
								$_this1 = $this->tokens;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:384: characters 7-15
								$_this1->head = new GenericCell($tk, $_this1->head);

								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:385: lines 385-389
								if ($tk2->index === 14) {
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:387: characters 8-45
									return $this->parseExprNext($this->parseObject(0));
								}
							} else {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:391: characters 7-15
								$_this2 = $this->tokens;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:391: characters 7-15
								$_this2->head = new GenericCell($tk, $_this2->head);
							}
						} else {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:394: characters 6-14
							$_this3 = $this->tokens;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:394: characters 6-14
							$_this3->head = new GenericCell($tk, $_this3->head);
						}
						break;
					case 2:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:370: characters 5-23
						$tk21 = $this->token();
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:371: characters 5-14
						$_this4 = $this->tokens;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:371: characters 5-14
						$_this4->head = new GenericCell($tk21, $_this4->head);

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:372: characters 5-13
						$_this5 = $this->tokens;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:372: characters 5-13
						$_this5->head = new GenericCell($tk, $_this5->head);

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:373: lines 373-377
						if ($tk21->index === 14) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:375: characters 6-43
							return $this->parseExprNext($this->parseObject(0));
						}
						break;
					case 7:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:368: characters 5-45
						return $this->parseExprNext(Expr::EObject(new \Array_hx()));
						break;
					default:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:396: characters 5-13
						$_this6 = $this->tokens;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:396: characters 5-13
						$_this6->head = new GenericCell($tk, $_this6->head);
						break;
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:398: characters 4-24
				$a = new \Array_hx();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:399: lines 399-405
				while (true) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:400: characters 5-21
					$this->parseFullExpr($a);
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:401: characters 5-17
					$tk = $this->token();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:402: lines 402-403
					if ($tk === Token::TBrClose()) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:403: characters 6-11
						break;
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:404: characters 5-13
					$_this7 = $this->tokens;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:404: characters 5-13
					$_this7->head = new GenericCell($tk, $_this7->head);

				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:406: characters 4-27
				return Expr::EBlock($a);
				break;
			case 11:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:423: characters 4-24
				$a1 = new \Array_hx();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:424: characters 4-16
				$tk = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:425: lines 425-431
				while ($tk !== Token::TBkClose()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:426: characters 5-13
					$_this8 = $this->tokens;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:426: characters 5-13
					$_this8->head = new GenericCell($tk, $_this8->head);

					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:427: characters 5-24
					$x = $this->parseExpr();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:427: characters 5-24
					$a1->arr[$a1->length] = $x;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:427: characters 5-24
					++$a1->length;

					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:428: characters 5-17
					$tk = $this->token();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:429: lines 429-430
					if ($tk === Token::TComma()) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:430: characters 6-18
						$tk = $this->token();
					}
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:432: lines 432-443
				if ($a1->length === 1) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:433: characters 18-22
					$_g = ($a1->arr[0] ?? null);
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:433: characters 18-22
					switch ($_g->index) {
						case 10:
						case 11:
						case 24:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:435: characters 6-33
							$tmp = "__a_" . ($this->uid++??'null');
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:436: lines 436-440
							$e3 = Expr::EBlock(\Array_hx::wrap([
								Expr::EVar($tmp, null, Expr::EArrayDecl(new \Array_hx())),
								$this->mapCompr($tmp, ($a1->arr[0] ?? null)),
								Expr::EIdent($tmp),
							]));
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:441: characters 6-29
							return $this->parseExprNext($e3);
							break;
						default:
														break;
					}
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:444: characters 4-47
				return $this->parseExprNext(Expr::EArrayDecl($a1));
				break;
			case 15:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:445: characters 14-16
				$id1 = $tk->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:445: lines 445-449
				if ($this->allowMetadata) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:446: characters 4-31
					$args = $this->parseMetaArgs();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:447: characters 11-46
					return Expr::EMeta($id1, $args, $this->parseExpr());
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:449: characters 4-25
					return $this->unexpected($tk);
				}
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:449: characters 4-25
				return $this->unexpected($tk);
				break;
		}
	}


	/**
	 * @param Token $etk
	 * 
	 * @return \Array_hx
	 */
	public function parseExprList ($etk) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:901: characters 3-26
		$args = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:902: characters 3-20
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:903: lines 903-904
		if ($tk === $etk) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:904: characters 4-15
			return $args;
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:905: characters 3-11
		$_this = $this->tokens;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:905: characters 3-11
		$_this->head = new GenericCell($tk, $_this->head);

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:906: lines 906-915
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:907: characters 4-26
			$x = $this->parseExpr();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:907: characters 4-26
			$args->arr[$args->length] = $x;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:907: characters 4-26
			++$args->length;

			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:908: characters 4-16
			$tk = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:909: lines 909-914
			if ($tk->index !== 9) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:912: characters 5-26
				if ($tk === $etk) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:912: characters 21-26
					break;
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:913: characters 5-19
				$this->unexpected($tk);
			}
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:916: characters 3-14
		return $args;
	}


	/**
	 * @param Expr $e1
	 * 
	 * @return Expr
	 */
	public function parseExprNext ($e1) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:709: characters 3-20
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:710: lines 710-737
		switch ($tk->index) {
			case 3:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:711: characters 12-14
				$op = $tk->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:712: lines 712-718
				if (($this->unops->data[$op] ?? null)) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:713: lines 713-716
					if ($this->isBlock($e1) || ($e1->index === 3)) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:714: characters 6-14
						$_this = $this->tokens;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:714: characters 6-14
						$_this->head = new GenericCell($tk, $_this->head);

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:715: characters 6-15
						return $e1;
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:717: characters 5-58
					return $this->parseExprNext(Expr::EUnop($op, false, $e1));
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:719: characters 4-39
				return $this->makeBinop($op, $e1, $this->parseExpr());
				break;
			case 4:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:724: characters 4-71
				return $this->parseExprNext(Expr::ECall($e1, $this->parseExprList(Token::TPClose())));
				break;
			case 8:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:721: characters 4-27
				$field = $this->getIdent();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:722: characters 4-55
				return $this->parseExprNext(Expr::EField($e1, $field));
				break;
			case 11:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:726: characters 4-25
				$e2 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:727: characters 4-20
				$t = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:727: characters 4-20
				if ($t !== Token::TBkClose()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:727: characters 4-20
					$this->unexpected($t);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:728: characters 4-52
				return $this->parseExprNext(Expr::EArray($e1, $e2));
				break;
			case 13:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:730: characters 4-25
				$e21 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:731: characters 4-22
				$t1 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:731: characters 4-22
				if ($t1 !== Token::TDoubleDot()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:731: characters 4-22
					$this->unexpected($t1);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:732: characters 4-25
				$e3 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:733: characters 4-51
				return Expr::ETernary($e1, $e21, $e3);
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:735: characters 4-12
				$_this1 = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:735: characters 4-12
				$_this1->head = new GenericCell($tk, $_this1->head);

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:736: characters 4-13
				return $e1;
				break;
		}
	}


	/**
	 * @return object
	 */
	public function parseField () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1051: characters 3-30
		$meta = $this->parseMetadata();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1052: characters 3-19
		$access = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1053: lines 1053-1117
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1054: characters 4-24
			$id = $this->getIdent();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1055: lines 1055-1116
			switch ($id) {
				case "function":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1069: characters 5-27
					$name = $this->getIdent();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1070: characters 5-35
					$inf = $this->parseFunctionDecl();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1071: lines 1071-1080
					return new HxAnon([
						"name" => $name,
						"meta" => $meta,
						"access" => $access,
						"kind" => FieldKind::KFunction(new HxAnon([
							"args" => $inf->args,
							"expr" => $inf->body,
							"ret" => $inf->ret,
						])),
					]);
					break;
				case "inline":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1063: characters 5-25
					$access->arr[$access->length] = FieldAccess::AInline();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1063: characters 5-25
					++$access->length;
					break;
				case "macro":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1067: characters 5-24
					$access->arr[$access->length] = FieldAccess::AMacro();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1067: characters 5-24
					++$access->length;
					break;
				case "override":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1057: characters 5-27
					$access->arr[$access->length] = FieldAccess::AOverride();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1057: characters 5-27
					++$access->length;
					break;
				case "private":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1061: characters 5-26
					$access->arr[$access->length] = FieldAccess::APrivate();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1061: characters 5-26
					++$access->length;
					break;
				case "public":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1059: characters 5-25
					$access->arr[$access->length] = FieldAccess::APublic();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1059: characters 5-25
					++$access->length;
					break;
				case "static":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1065: characters 5-25
					$access->arr[$access->length] = FieldAccess::AStatic();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1065: characters 5-25
					++$access->length;
					break;
				case "var":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1082: characters 5-27
					$name1 = $this->getIdent();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1083: characters 5-32
					$get = null;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1083: characters 5-32
					$set = null;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1084: lines 1084-1089
					if ($this->maybe(Token::TPOpen())) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1085: characters 6-22
						$get = $this->getIdent();
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1086: characters 6-20
						$t = $this->token();
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1086: characters 6-20
						if ($t !== Token::TComma()) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1086: characters 6-20
							$this->unexpected($t);
						}

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1087: characters 6-22
						$set = $this->getIdent();
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1088: characters 6-21
						$t1 = $this->token();
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1088: characters 6-21
						if ($t1 !== Token::TPClose()) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1088: characters 6-21
							$this->unexpected($t1);
						}

					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1090: characters 5-55
					$type = ($this->maybe(Token::TDoubleDot()) ? $this->parseType() : null);
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1091: characters 5-53
					$expr = ($this->maybe(Token::TOp("=")) ? $this->parseExpr() : null);
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1093: lines 1093-1101
					if ($expr !== null) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1094: lines 1094-1097
						if ($this->isBlock($expr)) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1095: characters 7-24
							$this->maybe(Token::TSemicolon());
						} else {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1097: characters 7-25
							$t2 = $this->token();
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1097: characters 7-25
							if ($t2 !== Token::TSemicolon()) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1097: characters 7-25
								$this->unexpected($t2);
							}
						}
					} else if (($type !== null) && ($type->index === 2)) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1099: characters 6-23
						$this->maybe(Token::TSemicolon());
					} else {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1101: characters 6-24
						$t3 = $this->token();
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1101: characters 6-24
						if ($t3 !== Token::TSemicolon()) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1101: characters 6-24
							$this->unexpected($t3);
						}
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1103: lines 1103-1113
					return new HxAnon([
						"name" => $name1,
						"meta" => $meta,
						"access" => $access,
						"kind" => FieldKind::KVar(new HxAnon([
							"get" => $get,
							"set" => $set,
							"type" => $type,
							"expr" => $expr,
						])),
					]);
					break;
				default:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1115: characters 5-24
					$this->unexpected(Token::TId($id));
					break;
			}
		}
	}


	/**
	 * @param \Array_hx $exprs
	 * 
	 * @return void
	 */
	public function parseFullExpr ($exprs) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:294: characters 3-23
		$e = $this->parseExpr();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:295: characters 3-16
		$exprs->arr[$exprs->length] = $e;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:295: characters 3-16
		++$exprs->length;

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:297: characters 3-20
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:299: lines 299-303
		while (($tk === Token::TComma()) && ($e->index === 2)) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:300: characters 4-29
			$e = $this->parseStructure("var");
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:301: characters 4-17
			$exprs->arr[$exprs->length] = $e;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:301: characters 4-17
			++$exprs->length;

			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:302: characters 4-16
			$tk = $this->token();
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:305: lines 305-310
		if (($tk !== Token::TSemicolon()) && ($tk !== Token::TEof())) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:306: lines 306-309
			if ($this->isBlock($e)) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:307: characters 5-13
				$_this = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:307: characters 5-13
				$_this->head = new GenericCell($tk, $_this->head);
			} else {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:309: characters 5-19
				$this->unexpected($tk);
			}
		}
	}


	/**
	 * @return object
	 */
	public function parseFunctionDecl () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:741: characters 3-17
		$t = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:741: characters 3-17
		if ($t !== Token::TPOpen()) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:741: characters 3-17
			$this->unexpected($t);
		}

		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:742: characters 3-26
		$args = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:743: characters 3-20
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:744: lines 744-777
		if ($tk !== Token::TPClose()) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:745: characters 4-21
			$done = false;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:746: lines 746-776
			while (!$done) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:747: characters 5-34
				$name = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:747: characters 5-34
				$opt = false;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:748: lines 748-753
				if ($tk->index === 13) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:750: characters 6-16
					$opt = true;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:751: characters 6-18
					$tk = $this->token();
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:754: lines 754-757
				if ($tk->index === 2) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:755: characters 14-16
					$id = $tk->params[0];
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:755: characters 19-28
					$name = $id;
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:756: characters 14-28
					$this->unexpected($tk);
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:758: characters 5-42
				$arg = new HxAnon(["name" => $name]);
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:759: characters 5-19
				$args->arr[$args->length] = $arg;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:759: characters 5-19
				++$args->length;

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:760: characters 5-29
				if ($opt) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:760: characters 15-29
					$arg->opt = true;
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:761: lines 761-766
				if ($this->allowTypes) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:762: lines 762-763
					if ($this->maybe(Token::TDoubleDot())) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:763: characters 7-26
						$arg->t = $this->parseType();
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:764: lines 764-765
					if ($this->maybe(Token::TOp("="))) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:765: characters 7-30
						$arg->value = $this->parseExpr();
					}
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:767: characters 5-17
				$tk = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:768: lines 768-775
				switch ($tk->index) {
					case 5:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:772: characters 6-17
						$done = true;
						break;
					case 9:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:770: characters 6-18
						$tk = $this->token();
						break;
					default:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:774: characters 6-20
						$this->unexpected($tk);
						break;
				}
			}
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:778: characters 3-18
		$ret = null;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:779: lines 779-785
		if ($this->allowTypes) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:780: characters 4-16
			$tk = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:781: lines 781-784
			if ($tk !== Token::TDoubleDot()) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:782: characters 5-13
				$_this = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:782: characters 5-13
				$_this->head = new GenericCell($tk, $_this->head);
			} else {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:784: characters 5-22
				$ret = $this->parseType();
			}
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:786: characters 3-56
		return new HxAnon([
			"args" => $args,
			"ret" => $ret,
			"body" => $this->parseExpr(),
		]);
	}


	/**
	 * @return \Array_hx
	 */
	public function parseMetaArgs () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:454: characters 3-20
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:455: lines 455-458
		if ($tk !== Token::TPOpen()) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:456: characters 4-12
			$_this = $this->tokens;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:456: characters 4-12
			$_this->head = new GenericCell($tk, $_this->head);

			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:457: characters 4-15
			return null;
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:459: characters 3-17
		$args = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:460: characters 3-15
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:461: lines 461-473
		if ($tk !== Token::TPClose()) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:462: characters 4-12
			$_this1 = $this->tokens;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:462: characters 4-12
			$_this1->head = new GenericCell($tk, $_this1->head);

			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:463: lines 463-472
			while (true) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:464: characters 5-27
				$x = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:464: characters 5-27
				$args->arr[$args->length] = $x;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:464: characters 5-27
				++$args->length;

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:465: characters 13-20
				$_g = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:465: characters 13-20
				switch ($_g->index) {
					case 5:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:468: characters 6-11
						break 2;
						break;
					case 9:
												break;
					default:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:469: characters 10-12
						$tk1 = $_g;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:470: characters 6-20
						$this->unexpected($tk1);
						break;
				}

			};
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:474: characters 3-14
		return $args;
	}


	/**
	 * @return \Array_hx
	 */
	public function parseMetadata () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:937: characters 3-17
		$meta = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:938: lines 938-947
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:939: characters 4-21
			$tk = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:940: lines 940-946
			if ($tk->index === 15) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:941: characters 15-19
				$name = $tk->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:942: characters 5-57
				$x = new HxAnon([
					"name" => $name,
					"params" => $this->parseMetaArgs(),
				]);
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:942: characters 5-57
				$meta->arr[$meta->length] = $x;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:942: characters 5-57
				++$meta->length;

			} else {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:944: characters 5-13
				$_this = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:944: characters 5-13
				$_this->head = new GenericCell($tk, $_this->head);

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:945: characters 5-10
				break;
			}
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:948: characters 3-14
		return $meta;
	}


	/**
	 * @param string $content
	 * @param string $origin
	 * 
	 * @return \Array_hx
	 */
	public function parseModule ($content, $origin = "hscript") {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:921: lines 921-934
		if ($origin === null) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:921: lines 921-934
			$origin = "hscript";
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:922: characters 3-21
		$this->initParser($origin);
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:923: characters 3-48
		$this->input = new StringInput($content);
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:924: characters 3-20
		$this->allowTypes = true;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:925: characters 3-23
		$this->allowMetadata = true;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:926: characters 3-18
		$decls = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:927: lines 927-932
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:928: characters 4-21
			$tk = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:929: characters 4-26
			if ($tk === Token::TEof()) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:929: characters 21-26
				break;
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:930: characters 4-12
			$_this = $this->tokens;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:930: characters 4-12
			$_this->head = new GenericCell($tk, $_this->head);

			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:931: characters 4-33
			$x = $this->parseModuleDecl();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:931: characters 4-33
			$decls->arr[$decls->length] = $x;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:931: characters 4-33
			++$decls->length;

		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:933: characters 3-15
		return $decls;
	}


	/**
	 * @return ModuleDecl
	 */
	public function parseModuleDecl () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:958: characters 3-30
		$meta = $this->parseMetadata();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:959: characters 3-26
		$ident = $this->getIdent();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:960: characters 3-43
		$isPrivate = false;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:960: characters 3-43
		$isExtern = false;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:961: lines 961-971
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:962: lines 962-969
			switch ($ident) {
				case "extern":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:966: characters 5-20
					$isExtern = true;
					break;
				case "private":
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:964: characters 5-21
					$isPrivate = true;
					break;
				default:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:968: characters 5-10
					break 2;
					break;
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:970: characters 4-22
			$ident = $this->getIdent();
		};
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:972: lines 972-1046
		switch ($ident) {
			case "class":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:999: characters 4-26
				$name = $this->getIdent();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1000: characters 4-31
				$params = $this->parseParams();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1001: characters 4-22
				$extend = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1002: characters 4-23
				$implement = new \Array_hx();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1004: lines 1004-1015
				while (true) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1005: characters 5-21
					$t = $this->token();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1006: lines 1006-1014
					if ($t->index === 2) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1006: characters 13-14
						switch ($t->params[0]) {
							case "extends":
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1008: characters 6-26
								$extend = $this->parseType();
								break;
							case "implements":
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1010: characters 6-33
								$x = $this->parseType();
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1010: characters 6-33
								$implement->arr[$implement->length] = $x;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1010: characters 6-33
								++$implement->length;
								break;
							default:
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1012: characters 6-13
								$_this = $this->tokens;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1012: characters 6-13
								$_this->head = new GenericCell($t, $_this->head);

								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1013: characters 6-11
								break 2;
								break;
						}
					} else {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1012: characters 6-13
						$_this1 = $this->tokens;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1012: characters 6-13
						$_this1->head = new GenericCell($t, $_this1->head);

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1013: characters 6-11
						break;
					}
				};
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1017: characters 4-20
				$fields = new \Array_hx();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1018: characters 4-19
				$t1 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1018: characters 4-19
				if ($t1 !== Token::TBrOpen()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1018: characters 4-19
					$this->unexpected($t1);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1019: lines 1019-1020
				while (!$this->maybe(Token::TBrClose())) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1020: characters 5-30
					$x1 = $this->parseField();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1020: characters 5-30
					$fields->arr[$fields->length] = $x1;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1020: characters 5-30
					++$fields->length;
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1022: lines 1022-1031
				return ModuleDecl::DClass(new HxAnon([
					"name" => $name,
					"meta" => $meta,
					"params" => $params,
					"extend" => $extend,
					"implement" => $implement,
					"fields" => $fields,
					"isPrivate" => $isPrivate,
					"isExtern" => $isExtern,
				]));
				break;
			case "import":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:978: characters 4-28
				$path = \Array_hx::wrap([$this->getIdent()]);
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:979: characters 4-21
				$star = false;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:980: lines 980-995
				while (true) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:981: characters 5-21
					$t2 = $this->token();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:982: lines 982-985
					if ($t2 !== Token::TDot()) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:983: characters 6-13
						$_this2 = $this->tokens;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:983: characters 6-13
						$_this2->head = new GenericCell($t2, $_this2->head);

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:984: characters 6-11
						break;
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:986: characters 5-16
					$t2 = $this->token();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:987: lines 987-994
					switch ($t2->index) {
						case 2:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:988: characters 14-16
							$id = $t2->params[0];
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:989: characters 6-19
							$path->arr[$path->length] = $id;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:989: characters 6-19
							++$path->length;

							break;
						case 3:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:987: characters 13-14
							if ($t2->params[0] === "*") {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:991: characters 6-17
								$star = true;
							} else {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:993: characters 6-19
								$this->unexpected($t2);
							}
							break;
						default:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:993: characters 6-19
							$this->unexpected($t2);
							break;
					}
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:996: characters 4-22
				$t3 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:996: characters 4-22
				if ($t3 !== Token::TSemicolon()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:996: characters 4-22
					$this->unexpected($t3);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:997: characters 4-30
				return ModuleDecl::DImport($path, $star);
				break;
			case "package":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:974: characters 4-27
				$path1 = $this->parsePath();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:975: characters 4-22
				$t4 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:975: characters 4-22
				if ($t4 !== Token::TSemicolon()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:975: characters 4-22
					$this->unexpected($t4);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:976: characters 4-25
				return ModuleDecl::DPackage($path1);
				break;
			case "typedef":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1033: characters 4-26
				$name1 = $this->getIdent();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1034: characters 4-31
				$params1 = $this->parseParams();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1035: characters 4-25
				$t5 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1035: characters 4-25
				if (!\Type::enumEq($t5, Token::TOp("="))) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1035: characters 4-25
					$this->unexpected($t5);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1036: characters 4-24
				$t6 = $this->parseType();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1037: lines 1037-1043
				return ModuleDecl::DTypedef(new HxAnon([
					"name" => $name1,
					"meta" => $meta,
					"params" => $params1,
					"isPrivate" => $isPrivate,
					"t" => $t6,
				]));
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1045: characters 4-26
				$this->unexpected(Token::TId($ident));
				break;
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1047: characters 3-14
		return null;
	}


	/**
	 * @param int $p1
	 * 
	 * @return Expr
	 */
	public function parseObject ($p1) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:315: characters 3-24
		$fl = new \Array_hx();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:316: lines 316-343
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:317: characters 4-21
			$tk = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:318: characters 4-18
			$id = null;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:319: lines 319-332
			switch ($tk->index) {
				case 1:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:321: characters 16-17
					$c = $tk->params[0];
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:322: lines 322-323
					if (!$this->allowJSON) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:323: characters 6-20
						$this->unexpected($tk);
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:324: lines 324-327
					if ($c->index === 2) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:325: characters 18-19
						$s = $c->params[0];
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:325: characters 22-28
						$id = $s;
					} else {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:326: characters 14-28
						$this->unexpected($tk);
					}

					break;
				case 2:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:320: characters 13-14
					$i = $tk->params[0];
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:320: characters 17-23
					$id = $i;
					break;
				case 7:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:329: characters 5-10
					break 2;
					break;
				default:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:331: characters 5-19
					$this->unexpected($tk);
					break;
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:333: characters 4-22
			$t = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:333: characters 4-22
			if ($t !== Token::TDoubleDot()) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:333: characters 4-22
				$this->unexpected($t);
			}

			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:334: characters 4-43
			$x = new HxAnon([
				"name" => $id,
				"e" => $this->parseExpr(),
			]);
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:334: characters 4-43
			$fl->arr[$fl->length] = $x;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:334: characters 4-43
			++$fl->length;

			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:335: characters 4-16
			$tk = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:336: lines 336-342
			switch ($tk->index) {
				case 7:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:338: characters 5-10
					break 2;
					break;
				case 9:
										break;
				default:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:341: characters 5-19
					$this->unexpected($tk);
					break;
			}
		};
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:344: characters 3-43
		return $this->parseExprNext(Expr::EObject($fl));
	}


	/**
	 * @return object
	 */
	public function parseParams () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:952: lines 952-953
		if ($this->maybe(Token::TOp("<"))) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:953: characters 4-76
			throw new HxException(Error::EInvalidOp("Unsupported class type parameters"));
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:954: characters 3-12
		return new HxAnon();
	}


	/**
	 * @return \Array_hx
	 */
	public function parsePath () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:790: characters 3-27
		$path = \Array_hx::wrap([$this->getIdent()]);
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:791: lines 791-798
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:792: characters 4-20
			$t = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:793: lines 793-796
			if ($t !== Token::TDot()) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:794: characters 5-12
				$_this = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:794: characters 5-12
				$_this->head = new GenericCell($t, $_this->head);

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:795: characters 5-10
				break;
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:797: characters 4-25
			$x = $this->getIdent();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:797: characters 4-25
			$path->arr[$path->length] = $x;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:797: characters 4-25
			++$path->length;

		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:799: characters 3-14
		return $path;
	}


	/**
	 * @return Expr
	 */
	public function parsePreproCond () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1449: characters 3-20
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1450: lines 1450-1460
		switch ($tk->index) {
			case 2:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1454: characters 12-14
				$id = $tk->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1455: characters 7-17
				return Expr::EIdent($id);
				break;
			case 3:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1450: characters 18-20
				if ($tk->params[0] === "!") {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1457: characters 4-63
					return Expr::EUnop("!", true, $this->parsePreproCond());
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1459: characters 4-18
					return $this->unexpected($tk);
				}
				break;
			case 4:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1452: characters 4-16
				$_this = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1452: characters 4-16
				$_this->head = new GenericCell(Token::TPOpen(), $_this->head);

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1453: characters 4-15
				return $this->parseExpr();
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1459: characters 4-18
				return $this->unexpected($tk);
				break;
		}
	}


	/**
	 * @param string $s
	 * @param string $origin
	 * 
	 * @return Expr
	 */
	public function parseString ($s, $origin = "hscript") {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:181: characters 3-53
		if ($origin === null) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:181: characters 3-53
			$origin = "hscript";
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:181: characters 3-53
		return $this->parse(new StringInput($s), $origin);
	}


	/**
	 * @param string $id
	 * 
	 * @return Expr
	 */
	public function parseStructure ($id) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:526: lines 526-705
		switch ($id) {
			case "break":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:582: characters 20-26
				return Expr::EBreak();
				break;
			case "continue":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:583: characters 23-32
				return Expr::EContinue();
				break;
			case "do":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:565: characters 4-24
				$e = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:566: characters 4-21
				$tk = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:567: lines 567-571
				if ($tk->index === 2) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:567: characters 11-13
					if ($tk->params[0] !== "while") {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:570: characters 14-28
						$this->unexpected($tk);
					}
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:570: characters 14-28
					$this->unexpected($tk);
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:572: characters 4-28
				$econd = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:573: characters 7-24
				return Expr::EDoWhile($econd, $e);
				break;
			case "else":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:584: characters 16-35
				return $this->unexpected(Token::TId($id));
				break;
			case "for":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:575: characters 4-18
				$t = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:575: characters 4-18
				if ($t !== Token::TPOpen()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:575: characters 4-18
					$this->unexpected($t);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:576: characters 4-27
				$vname = $this->getIdent();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:577: characters 4-26
				$t1 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:577: characters 4-26
				if (!\Type::enumEq($t1, Token::TId("in"))) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:577: characters 4-26
					$this->unexpected($t1);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:578: characters 4-28
				$eiter = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:579: characters 4-19
				$t2 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:579: characters 4-19
				if ($t2 !== Token::TPClose()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:579: characters 4-19
					$this->unexpected($t2);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:580: characters 4-24
				$e1 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:581: characters 7-26
				return Expr::EFor($vname, $eiter, $e1);
				break;
			case "function":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:589: characters 4-21
				$tk1 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:590: characters 4-20
				$name = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:591: lines 591-594
				if ($tk1->index === 2) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:592: characters 13-15
					$id1 = $tk1->params[0];
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:592: characters 18-27
					$name = $id1;
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:593: characters 13-21
					$_this = $this->tokens;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:593: characters 13-21
					$_this->head = new GenericCell($tk1, $_this->head);
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:595: characters 4-34
				$inf = $this->parseFunctionDecl();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:596: characters 7-51
				return Expr::EFunction($inf->args, $inf->body, $name, $inf->ret);
				break;
			case "if":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:528: characters 4-18
				$t3 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:528: characters 4-18
				if ($t3 !== Token::TPOpen()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:528: characters 4-18
					$this->unexpected($t3);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:529: characters 4-27
				$cond = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:530: characters 4-19
				$t4 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:530: characters 4-19
				if ($t4 !== Token::TPClose()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:530: characters 4-19
					$this->unexpected($t4);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:531: characters 4-25
				$e11 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:532: characters 4-18
				$e2 = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:533: characters 4-22
				$semic = false;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:534: characters 4-21
				$tk2 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:535: lines 535-538
				if ($tk2 === Token::TSemicolon()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:536: characters 5-17
					$semic = true;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:537: characters 5-17
					$tk2 = $this->token();
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:539: lines 539-544
				if (\Type::enumEq($tk2, Token::TId("else"))) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:540: characters 5-21
					$e2 = $this->parseExpr();
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:542: characters 5-13
					$_this1 = $this->tokens;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:542: characters 5-13
					$_this1->head = new GenericCell($tk2, $_this1->head);

					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:543: characters 5-33
					if ($semic) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:543: characters 17-33
						$_this2 = $this->tokens;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:543: characters 17-33
						$_this2->head = new GenericCell(Token::TSemicolon(), $_this2->head);
					}
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:545: characters 7-22
				return Expr::EIf($cond, $e11, $e2);
				break;
			case "inline":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:586: characters 4-59
				if (!$this->maybe(Token::TId("function"))) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:586: characters 34-59
					$this->unexpected(Token::TId("inline"));
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:587: characters 4-37
				return $this->parseStructure("function");
				break;
			case "new":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:603: characters 4-24
				$a = new \Array_hx();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:604: characters 4-22
				$x = $this->getIdent();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:604: characters 4-22
				$a->arr[$a->length] = $x;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:604: characters 4-22
				++$a->length;

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:605: characters 4-20
				$next = true;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:606: lines 606-616
				while ($next) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:607: characters 5-22
					$tk3 = $this->token();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:608: lines 608-615
					switch ($tk3->index) {
						case 4:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:612: characters 6-18
							$next = false;
							break;
						case 8:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:610: characters 6-24
							$x1 = $this->getIdent();
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:610: characters 6-24
							$a->arr[$a->length] = $x1;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:610: characters 6-24
							++$a->length;
							break;
						default:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:614: characters 6-20
							$this->unexpected($tk3);
							break;
					}
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:617: characters 4-38
				$args = $this->parseExprList(Token::TPClose());
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:618: characters 4-33
				return Expr::ENew($a->join("."), $args);
				break;
			case "return":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:598: characters 4-21
				$tk4 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:599: characters 4-12
				$_this3 = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:599: characters 4-12
				$_this3->head = new GenericCell($tk4, $_this3->head);

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:600: characters 4-57
				$e3 = ($tk4 === Token::TSemicolon() ? null : $this->parseExpr());
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:601: characters 7-17
				return Expr::EReturn($e3);
				break;
			case "switch":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:637: characters 4-24
				$e4 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:638: characters 4-31
				$def = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:638: characters 4-31
				$cases = new \Array_hx();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:639: characters 4-19
				$t5 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:639: characters 4-19
				if ($t5 !== Token::TBrOpen()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:639: characters 4-19
					$this->unexpected($t5);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:640: lines 640-701
				while (true) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:641: characters 5-22
					$tk5 = $this->token();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:642: lines 642-700
					switch ($tk5->index) {
						case 2:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:642: characters 13-15
							switch ($tk5->params[0]) {
								case "case":
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:644: characters 6-43
									$c = new HxAnon([
										"values" => new \Array_hx(),
										"expr" => null,
									]);
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:645: characters 6-19
									$cases->arr[$cases->length] = $c;
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:645: characters 6-19
									++$cases->length;

									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:646: lines 646-658
									while (true) {
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:647: characters 7-27
										$e5 = $this->parseExpr();
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:648: characters 7-23
										$_this4 = $c->values;
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:648: characters 7-23
										$_this4->arr[$_this4->length] = $e5;
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:648: characters 7-23
										++$_this4->length;

										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:649: characters 7-19
										$tk5 = $this->token();
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:650: lines 650-657
										switch ($tk5->index) {
											case 9:
																								break;
											case 14:
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:654: characters 8-13
												break 2;
												break;
											default:
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:656: characters 8-22
												$this->unexpected($tk5);
												break;
										}
									};
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:659: characters 6-21
									$exprs = new \Array_hx();
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:660: lines 660-669
									while (true) {
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:661: characters 7-19
										$tk5 = $this->token();
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:662: characters 7-15
										$_this5 = $this->tokens;
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:662: characters 7-15
										$_this5->head = new GenericCell($tk5, $_this5->head);

										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:663: lines 663-668
										switch ($tk5->index) {
											case 2:
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:663: characters 15-17
												switch ($tk5->params[0]) {
													case "case":
													case "default":
														#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:665: characters 8-13
														break 3;
														break;
													default:
														#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:667: characters 8-28
														$this->parseFullExpr($exprs);
														break;
												}
												break;
											case 7:
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:665: characters 8-13
												break 2;
												break;
											default:
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:667: characters 8-28
												$this->parseFullExpr($exprs);
												break;
										}
									};
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:670: lines 670-675
									$c->expr = ($exprs->length === 1 ? ($exprs->arr[0] ?? null) : ($exprs->length === 0 ? Expr::EBlock(new \Array_hx()) : Expr::EBlock($exprs)));
									break;
								case "default":
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:677: characters 6-38
									if ($def !== null) {
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:677: characters 24-38
										$this->unexpected($tk5);
									}
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:678: characters 6-24
									$t6 = $this->token();
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:678: characters 6-24
									if ($t6 !== Token::TDoubleDot()) {
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:678: characters 6-24
										$this->unexpected($t6);
									}

									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:679: characters 6-21
									$exprs1 = new \Array_hx();
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:680: lines 680-689
									while (true) {
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:681: characters 7-19
										$tk5 = $this->token();
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:682: characters 7-15
										$_this6 = $this->tokens;
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:682: characters 7-15
										$_this6->head = new GenericCell($tk5, $_this6->head);

										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:683: lines 683-688
										switch ($tk5->index) {
											case 2:
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:683: characters 15-17
												switch ($tk5->params[0]) {
													case "case":
													case "default":
														#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:685: characters 8-13
														break 3;
														break;
													default:
														#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:687: characters 8-28
														$this->parseFullExpr($exprs1);
														break;
												}
												break;
											case 7:
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:685: characters 8-13
												break 2;
												break;
											default:
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:687: characters 8-28
												$this->parseFullExpr($exprs1);
												break;
										}
									};
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:691: characters 7-15
									$def = ($exprs1->length === 1 ? ($exprs1->arr[0] ?? null) : ($exprs1->length === 0 ? Expr::EBlock(new \Array_hx()) : Expr::EBlock($exprs1)));
									break;
								default:
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:699: characters 6-20
									$this->unexpected($tk5);
									break;
							}
							break;
						case 7:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:697: characters 6-11
							break 2;
							break;
						default:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:699: characters 6-20
							$this->unexpected($tk5);
							break;
					}
				};
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:702: characters 7-29
				return Expr::ESwitch($e4, $cases, $def);
				break;
			case "throw":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:620: characters 4-24
				$e6 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:621: characters 7-16
				return Expr::EThrow($e6);
				break;
			case "try":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:623: characters 4-24
				$e7 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:624: characters 4-29
				$t7 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:624: characters 4-29
				if (!\Type::enumEq($t7, Token::TId("catch"))) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:624: characters 4-29
					$this->unexpected($t7);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:625: characters 4-18
				$t8 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:625: characters 4-18
				if ($t8 !== Token::TPOpen()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:625: characters 4-18
					$this->unexpected($t8);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:626: characters 4-27
				$vname1 = $this->getIdent();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:627: characters 4-22
				$t9 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:627: characters 4-22
				if ($t9 !== Token::TDoubleDot()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:627: characters 4-22
					$this->unexpected($t9);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:628: characters 4-17
				$t10 = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:629: lines 629-632
				if ($this->allowTypes) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:630: characters 5-20
					$t10 = $this->parseType();
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:632: characters 5-32
					$t11 = $this->token();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:632: characters 5-32
					if (!\Type::enumEq($t11, Token::TId("Dynamic"))) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:632: characters 5-32
						$this->unexpected($t11);
					}
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:633: characters 4-19
				$t12 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:633: characters 4-19
				if ($t12 !== Token::TPClose()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:633: characters 4-19
					$this->unexpected($t12);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:634: characters 4-25
				$ec = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:635: characters 7-28
				return Expr::ETry($e7, $vname1, $t10, $ec);
				break;
			case "var":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:547: characters 4-27
				$ident = $this->getIdent();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:548: characters 4-21
				$tk6 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:549: characters 4-17
				$t13 = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:550: lines 550-553
				if (($tk6 === Token::TDoubleDot()) && $this->allowTypes) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:551: characters 5-20
					$t13 = $this->parseType();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:552: characters 5-17
					$tk6 = $this->token();
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:554: characters 4-17
				$e8 = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:555: lines 555-558
				if (\Type::enumEq($tk6, Token::TOp("="))) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:556: characters 5-20
					$e8 = $this->parseExpr();
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:558: characters 5-13
					$_this7 = $this->tokens;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:558: characters 5-13
					$_this7->head = new GenericCell($tk6, $_this7->head);
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:559: characters 7-22
				return Expr::EVar($ident, $t13, $e8);
				break;
			case "while":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:561: characters 4-28
				$econd1 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:562: characters 4-24
				$e9 = $this->parseExpr();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:563: characters 7-22
				return Expr::EWhile($econd1, $e9);
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:704: characters 4-8
				return null;
				break;
		}
	}


	/**
	 * @return CType
	 */
	public function parseType () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:803: characters 3-19
		$t = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:804: lines 804-875
		switch ($t->index) {
			case 2:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:805: characters 12-13
				$v = $t->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:806: characters 4-11
				$_this = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:806: characters 4-11
				$_this->head = new GenericCell($t, $_this->head);

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:807: characters 4-27
				$path = $this->parsePath();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:808: characters 4-22
				$params = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:809: characters 4-15
				$t = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:810: lines 810-837
				if ($t->index === 3) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:811: characters 13-15
					$op = $t->params[0];
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:812: lines 812-834
					if ($op === "<") {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:813: characters 6-17
						$params = new \Array_hx();
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:814: lines 814-832
						while (true) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:815: characters 7-31
							$x = $this->parseType();
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:815: characters 7-31
							$params->arr[$params->length] = $x;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:815: characters 7-31
							++$params->length;

							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:816: characters 7-18
							$t = $this->token();
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:817: lines 817-830
							switch ($t->index) {
								case 3:
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:819: characters 16-18
									$op1 = $t->params[0];
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:820: characters 8-29
									if ($op1 === ">") {
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:820: characters 24-29
										break 2;
									}
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:821: lines 821-828
									if (((0 >= strlen($op1) ? null : ord($op1[0]))) === 62) {
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:825: characters 9-38
										$_this1 = $this->tokens;
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:825: characters 9-38
										$_this1->head = new GenericCell(Token::TOp(HxString::substr($op1, 1)), $_this1->head);

										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:827: characters 9-14
										break 2;
									}

									break;
								case 9:
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:818: characters 20-28
									continue 2;
									break;
								default:
																		break;
							}
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:831: characters 7-20
							$this->unexpected($t);
						};
					} else {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:834: characters 6-13
						$_this2 = $this->tokens;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:834: characters 6-13
						$_this2->head = new GenericCell($t, $_this2->head);
					}
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:836: characters 5-12
					$_this3 = $this->tokens;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:836: characters 5-12
					$_this3->head = new GenericCell($t, $_this3->head);
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:838: characters 4-46
				return $this->parseTypeNext(CType::CTPath($path, $params));
				break;
			case 4:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:840: characters 4-24
				$t1 = $this->parseType();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:841: characters 4-19
				$t2 = $this->token();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:841: characters 4-19
				if ($t2 !== Token::TPClose()) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:841: characters 4-19
					$this->unexpected($t2);
				}

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:842: characters 4-37
				return $this->parseTypeNext(CType::CTParent($t1));
				break;
			case 6:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:844: characters 4-20
				$fields = new \Array_hx();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:845: characters 4-20
				$meta = null;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:846: lines 846-871
				while (true) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:847: characters 5-16
					$t = $this->token();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:848: lines 848-870
					switch ($t->index) {
						case 2:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:848: characters 13-14
							if ($t->params[0] === "var") {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:851: characters 6-28
								$name = $this->getIdent();
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:852: characters 6-24
								$t3 = $this->token();
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:852: characters 6-24
								if ($t3 !== Token::TDoubleDot()) {
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:852: characters 6-24
									$this->unexpected($t3);
								}

								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:853: characters 6-66
								$x1 = new HxAnon([
									"name" => $name,
									"t" => $this->parseType(),
									"meta" => $meta,
								]);
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:853: characters 6-66
								$fields->arr[$fields->length] = $x1;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:853: characters 6-66
								++$fields->length;

								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:854: characters 6-17
								$meta = null;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:855: characters 6-24
								$t4 = $this->token();
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:855: characters 6-24
								if ($t4 !== Token::TSemicolon()) {
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:855: characters 6-24
									$this->unexpected($t4);
								}

							} else {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:856: characters 14-18
								$name1 = $t->params[0];
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:857: characters 6-24
								$t5 = $this->token();
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:857: characters 6-24
								if ($t5 !== Token::TDoubleDot()) {
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:857: characters 6-24
									$this->unexpected($t5);
								}

								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:858: characters 6-66
								$x2 = new HxAnon([
									"name" => $name1,
									"t" => $this->parseType(),
									"meta" => $meta,
								]);
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:858: characters 6-66
								$fields->arr[$fields->length] = $x2;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:858: characters 6-66
								++$fields->length;

								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:859: characters 6-17
								$t = $this->token();
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:860: lines 860-864
								switch ($t->index) {
									case 7:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:862: characters 21-26
										break 3;
										break;
									case 9:
																				break;
									default:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:863: characters 15-28
										$this->unexpected($t);
										break;
								}

							}
							break;
						case 7:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:849: characters 20-25
							break 2;
							break;
						case 15:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:865: characters 16-20
							$name2 = $t->params[0];
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:866: characters 6-34
							if ($meta === null) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:866: characters 25-34
								$meta = new \Array_hx();
							}
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:867: characters 6-58
							$x3 = new HxAnon([
								"name" => $name2,
								"params" => $this->parseMetaArgs(),
							]);
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:867: characters 6-58
							$meta->arr[$meta->length] = $x3;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:867: characters 6-58
							++$meta->length;


							break;
						default:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:869: characters 6-19
							$this->unexpected($t);
							break;
					}
				};
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:872: characters 4-40
				return $this->parseTypeNext(CType::CTAnon($fields));
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:874: characters 4-24
				return $this->unexpected($t);
				break;
		}
	}


	/**
	 * @param CType $t
	 * 
	 * @return CType
	 */
	public function parseTypeNext ($t) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:879: characters 3-20
		$tk = $this->token();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:880: lines 880-889
		if ($tk->index === 3) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:881: characters 12-14
			$op = $tk->params[0];
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:882: lines 882-885
			if ($op !== "->") {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:883: characters 5-13
				$_this = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:883: characters 5-13
				$_this->head = new GenericCell($tk, $_this->head);

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:884: characters 5-13
				return $t;
			}
		} else {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:887: characters 4-12
			$_this1 = $this->tokens;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:887: characters 4-12
			$_this1->head = new GenericCell($tk, $_this1->head);

			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:888: characters 4-12
			return $t;
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:890: characters 3-24
		$t2 = $this->parseType();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:891: lines 891-897
		if ($t2->index === 1) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:892: characters 14-18
			$args = $t2->params[0];
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:893: characters 4-19
			$args->length = array_unshift($args->arr, $t);
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:894: characters 4-13
			return $t2;
		} else {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:896: characters 4-25
			return CType::CTFun(\Array_hx::wrap([$t]), $t2);
		}
	}


	/**
	 * @param Expr $e
	 * 
	 * @return int
	 */
	public function pmax ($e) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:260: characters 3-11
		return 0;
	}


	/**
	 * @param Expr $e
	 * 
	 * @return int
	 */
	public function pmin ($e) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:252: characters 3-11
		return 0;
	}


	/**
	 * @param string $id
	 * 
	 * @return mixed
	 */
	public function preprocValue ($id) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1443: characters 10-35
		return ($this->preprocesorValues->data[$id] ?? null);
	}


	/**
	 * @param string $id
	 * 
	 * @return Token
	 */
	public function preprocess ($id) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1482: lines 1482-1511
		switch ($id) {
			case "else":
			case "elseif":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1492: lines 1492-1510
				if ($this->preprocStack->length > 0) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1493: lines 1493-1505
					if (($this->preprocStack->arr[$this->preprocStack->length - 1] ?? null)->r) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1494: characters 5-52
						$this->preprocStack[$this->preprocStack->length - 1]->r = false;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1495: characters 5-17
						$this->skipTokens();
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1496: characters 5-19
						return $this->token();
					} else if ($id === "else") {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1498: characters 5-23
						$_this = $this->preprocStack;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1498: characters 5-23
						if ($_this->length > 0) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1498: characters 5-23
							$_this->length--;
						}
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1498: characters 5-23
						array_pop($_this->arr);

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1499: characters 5-36
						$_this1 = $this->preprocStack;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1499: characters 5-36
						$_this1->arr[$_this1->length] = new HxAnon(["r" => true]);
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1499: characters 5-36
						++$_this1->length;

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1500: characters 5-19
						return $this->token();
					} else {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1503: characters 5-23
						$_this2 = $this->preprocStack;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1503: characters 5-23
						if ($_this2->length > 0) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1503: characters 5-23
							$_this2->length--;
						}
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1503: characters 5-23
						array_pop($_this2->arr);

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1504: characters 5-28
						return $this->preprocess("if");
					}
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1510: characters 4-22
					return Token::TPrepro($id);
				}
				break;
			case "end":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1506: lines 1506-1510
				if ($this->preprocStack->length > 0) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1507: characters 4-22
					$_this3 = $this->preprocStack;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1507: characters 4-22
					if ($_this3->length > 0) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1507: characters 4-22
						$_this3->length--;
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1507: characters 4-22
					array_pop($_this3->arr);

					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1508: characters 4-18
					return $this->token();
				} else {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1510: characters 4-22
					return Token::TPrepro($id);
				}
				break;
			case "if":
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1484: characters 4-30
				$e = $this->parsePreproCond();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1485: lines 1485-1488
				if ($this->evalPreproCond($e)) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1486: characters 5-36
					$_this4 = $this->preprocStack;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1486: characters 5-36
					$_this4->arr[$_this4->length] = new HxAnon(["r" => true]);
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1486: characters 5-36
					++$_this4->length;

					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1487: characters 5-19
					return $this->token();
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1489: characters 4-36
				$_this5 = $this->preprocStack;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1489: characters 4-36
				$_this5->arr[$_this5->length] = new HxAnon(["r" => false]);
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1489: characters 4-36
				++$_this5->length;

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1490: characters 4-16
				$this->skipTokens();
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1491: characters 4-18
				return $this->token();
				break;
			default:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1510: characters 4-22
				return Token::TPrepro($id);
				break;
		}
	}


	/**
	 * @param Token $tk
	 * 
	 * @return void
	 */
	public function push ($tk) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:208: characters 3-17
		$_this = $this->tokens;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:208: characters 3-17
		$_this->head = new GenericCell($tk, $_this->head);
	}


	/**
	 * @return int
	 */
	public function readChar () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1131: characters 10-53
		try {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1131: characters 14-30
			return $this->input->readByte();
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1131: characters 52-53
			return 0;
		}
	}


	/**
	 * @param int $until
	 * 
	 * @return string
	 */
	public function readString ($until) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1135: characters 3-13
		$c = 0;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1136: characters 3-37
		$b = new BytesOutput();
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1137: characters 3-19
		$esc = false;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1138: characters 3-18
		$old = $this->line;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1139: characters 3-17
		$s = $this->input;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1143: lines 1143-1208
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1144: lines 1144-1150
			try {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1146: characters 5-21
				$c = $s->readByte();
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e = $__hx__real_e;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1148: characters 5-15
				$this->line = $old;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1149: characters 5-39
				throw new HxException(Error::EUnterminatedString());
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1151: lines 1151-1207
			if ($esc) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1152: characters 5-16
				$esc = false;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1153: lines 1153-1199
				switch ($c) {
					case 34:
					case 39:
					case 92:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1157: characters 41-55
						$b->writeByte($c);
						break;
					case 47:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1158: characters 20-70
						if ($this->allowJSON) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1158: characters 36-50
							$b->writeByte($c);
						} else {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1158: characters 56-70
							$this->invalidChar($c);
						}
						break;
					case 110:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1154: characters 20-35
						$b->writeByte(10);
						break;
					case 114:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1155: characters 20-35
						$b->writeByte(13);
						break;
					case 116:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1156: characters 20-34
						$b->writeByte(9);
						break;
					case 117:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1160: characters 6-37
						if (!$this->allowJSON) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1160: characters 23-37
							$this->invalidChar($c);
						}
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1161: characters 6-22
						$code = null;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1162: lines 1162-1171
						try {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1167: characters 7-29
							$code = $s->readString(4);
						} catch (\Throwable $__hx__caught_e) {
							CallStack::saveExceptionTrace($__hx__caught_e);
							$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
							$e1 = $__hx__real_e;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1169: characters 7-17
							$this->line = $old;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1170: characters 7-41
							throw new HxException(Error::EUnterminatedString());
						}
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1172: characters 6-16
						$k = 0;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1173: lines 1173-1186
						$_g = 0;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1173: lines 1173-1186
						while ($_g < 4) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1173: lines 1173-1186
							$_g = $_g + 1;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1173: characters 11-12
							$i = $_g - 1;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1174: characters 7-14
							$k = $k << 4;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1175: characters 7-37
							$char = (($i < 0) || ($i >= strlen($code)) ? null : ord($code[$i]));
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1176: lines 1176-1185
							if ($char === null) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1184: characters 8-25
								$this->invalidChar($char);
							} else {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1176: characters 15-19
								switch ($char) {
									case 48:
									case 49:
									case 50:
									case 51:
									case 52:
									case 53:
									case 54:
									case 55:
									case 56:
									case 57:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1178: characters 8-22
										$k = $k + ($char - 48);
										break;
									case 65:
									case 66:
									case 67:
									case 68:
									case 69:
									case 70:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1180: characters 8-22
										$k = $k + ($char - 55);
										break;
									case 97:
									case 98:
									case 99:
									case 100:
									case 101:
									case 102:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1182: characters 8-22
										$k = $k + ($char - 87);
										break;
									default:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1184: characters 8-25
										$this->invalidChar($char);
										break;
								}
							}
						}

						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1188: lines 1188-1197
						if ($k <= 127) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1189: characters 7-21
							$b->writeByte($k);
						} else if ($k <= 2047) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1191: characters 7-36
							$b->writeByte(192 | ($k >> 6));
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1192: characters 7-36
							$b->writeByte(128 | ($k & 63));
						} else {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1194: characters 7-38
							$b->writeByte(224 | ($k >> 12));
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1195: characters 7-44
							$b->writeByte(128 | (($k >> 6) & 63));
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1196: characters 7-37
							$b->writeByte(128 | ($k & 63));
						}
						break;
					default:
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1198: characters 14-28
						$this->invalidChar($c);
						break;
				}
			} else if ($c === 92) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1201: characters 5-15
				$esc = true;
			} else if ($c === $until) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1203: characters 5-10
				break;
			} else {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1205: characters 5-25
				if ($c === 10) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1205: characters 19-25
					$this->line++;
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1206: characters 5-19
				$b->writeByte($c);
			}
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1209: characters 3-33
		return $b->getBytes()->toString();
	}


	/**
	 * @return void
	 */
	public function skipTokens () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1515: characters 3-38
		$spos = $this->preprocStack->length - 1;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1516: characters 3-32
		$obj = ($this->preprocStack->arr[$spos] ?? null);
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1517: characters 3-21
		$pos = 0;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1518: lines 1518-1526
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1519: characters 4-21
			$tk = $this->token();
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1520: lines 1520-1521
			if ($tk === Token::TEof()) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1521: characters 5-54
				throw new HxException(Error::EInvalidPreprocessor("Unclosed"));
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1522: lines 1522-1525
			if (($this->preprocStack->arr[$spos] ?? null) !== $obj) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1523: characters 5-13
				$_this = $this->tokens;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1523: characters 5-13
				$_this->head = new GenericCell($tk, $_this->head);

				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1524: characters 5-10
				break;
			}
		}
	}


	/**
	 * @return Token
	 */
	public function token () {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1230: lines 1230-1231
		if ($this->tokens->head !== null) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1231: characters 11-23
			$_this = $this->tokens;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1231: characters 11-23
			$k = $_this->head;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1231: characters 11-23
			if ($k === null) {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1231: characters 11-23
				return null;
			} else {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1231: characters 11-23
				$_this->head = $k->next;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1231: characters 11-23
				return $k->elt;
			}
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1233: characters 3-12
		$char = null;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1234: lines 1234-1239
		if ($this->char < 0) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1235: characters 4-21
			$char = $this->readChar();
		} else {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1237: characters 4-20
			$char = $this->char;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1238: characters 4-18
			$this->char = -1;
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1240: lines 1240-1438
		while (true) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1241: lines 1241-1436
			switch ($char) {
				case 0:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1242: characters 12-23
					return Token::TEof();
					break;
				case 10:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1247: characters 13-19
					$this->line++;
					break;
				case 9:
				case 13:
				case 32:
										break;
				case 35:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1395: characters 5-22
					$char = $this->readChar();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1396: lines 1396-1406
					if (($this->idents->arr[$char] ?? null)) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1397: characters 6-41
						$id = chr($char);
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1398: lines 1398-1405
						while (true) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1399: characters 7-24
							$char = $this->readChar();
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1400: lines 1400-1403
							if (!($this->idents->arr[$char] ?? null)) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1401: characters 8-24
								$this->char = $char;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1402: characters 8-29
								return $this->preprocess($id);
							}
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1404: characters 7-38
							$id = ($id??'null') . (chr($char)??'null');
						}
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1407: characters 5-22
					$this->invalidChar($char);
					break;
				case 34:
				case 39:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1369: characters 29-71
					return Token::TConst(Const_hx::CString($this->readString($char)));
					break;
				case 40:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1336: characters 19-32
					return Token::TPOpen();
					break;
				case 41:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1337: characters 19-33
					return Token::TPClose();
					break;
				case 44:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1338: characters 19-32
					return Token::TComma();
					break;
				case 46:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1340: characters 5-22
					$char = $this->readChar();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1341: lines 1341-1364
					switch ($char) {
						case 46:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1357: characters 6-23
							$char = $this->readChar();
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1358: lines 1358-1359
							if ($char !== 46) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1359: characters 7-24
								$this->invalidChar($char);
							}
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1360: characters 6-23
							return Token::TOp("...");
							break;
						case 48:
						case 49:
						case 50:
						case 51:
						case 52:
						case 53:
						case 54:
						case 55:
						case 56:
						case 57:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1343: characters 6-24
							$n = $char - 48;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1344: characters 6-18
							$exp = 1;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1345: lines 1345-1355
							while (true) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1346: characters 7-24
								$char = $this->readChar();
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1347: characters 7-16
								$exp = $exp * 10;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1348: lines 1348-1354
								switch ($char) {
									case 48:
									case 49:
									case 50:
									case 51:
									case 52:
									case 53:
									case 54:
									case 55:
									case 56:
									case 57:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1350: characters 8-32
										$n = $n * 10 + ($char - 48);
										break;
									default:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1352: characters 8-24
										$this->char = $char;
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1353: characters 8-38
										return Token::TConst(Const_hx::CFloat($n / $exp));
										break;
								}
							}
							break;
						default:
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1362: characters 6-22
							$this->char = $char;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1363: characters 6-17
							return Token::TDot();
							break;
					}
					break;
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1252: characters 5-31
					$n1 = ($char - 48) * 1.0;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1253: characters 5-18
					$exp1 = 0.;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1254: lines 1254-1334
					while (true) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1255: characters 6-23
						$char = $this->readChar();
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1256: characters 6-15
						$exp1 = $exp1 * 10;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1257: lines 1257-1333
						switch ($char) {
							case 46:
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1278: lines 1278-1286
								if ($exp1 > 0) {
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1280: lines 1280-1284
									if (Boot::equal($exp1, 10) && ($this->readChar() === 46)) {
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1281: characters 9-25
										$_this1 = $this->tokens;
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1281: characters 9-25
										$_this1->head = new GenericCell(Token::TOp("..."), $_this1->head);

										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1282: characters 9-28
										$i = (int)($n1);
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1283: characters 9-56
										return Token::TConst((Boot::equal($i, $n1) ? Const_hx::CInt($i) : Const_hx::CFloat($n1)));
									}
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1285: characters 8-25
									$this->invalidChar($char);
								}
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1287: characters 7-15
								$exp1 = 1.;
								break;
							case 48:
							case 49:
							case 50:
							case 51:
							case 52:
							case 53:
							case 54:
							case 55:
							case 56:
							case 57:
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1259: characters 7-31
								$n1 = $n1 * 10 + ($char - 48);
								break;
							case 69:
							case 101:
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1261: characters 7-24
								$tk = $this->token();
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1262: characters 7-34
								$pow = null;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1263: lines 1263-1273
								switch ($tk->index) {
									case 1:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1263: characters 15-17
										if ($tk->params[0]->index === 0) {
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1264: characters 24-25
											$e = $tk->params[0]->params[0];
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1264: characters 29-36
											$pow = $e;
										} else {
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1272: characters 8-16
											$_this2 = $this->tokens;
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1272: characters 8-16
											$_this2->head = new GenericCell($tk, $_this2->head);
										}
										break;
									case 3:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1263: characters 15-17
										if ($tk->params[0] === "-") {
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1266: characters 8-20
											$tk = $this->token();
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1267: lines 1267-1270
											if ($tk->index === 1) {
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1267: characters 16-18
												if ($tk->params[0]->index === 0) {
													#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1268: characters 25-26
													$e1 = $tk->params[0]->params[0];
													#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1268: characters 30-38
													$pow = -$e1;
												} else {
													#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1269: characters 17-25
													$_this3 = $this->tokens;
													#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1269: characters 17-25
													$_this3->head = new GenericCell($tk, $_this3->head);
												}
											} else {
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1269: characters 17-25
												$_this4 = $this->tokens;
												#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1269: characters 17-25
												$_this4->head = new GenericCell($tk, $_this4->head);
											}
										} else {
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1272: characters 8-16
											$_this5 = $this->tokens;
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1272: characters 8-16
											$_this5->head = new GenericCell($tk, $_this5->head);
										}
										break;
									default:
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1272: characters 8-16
										$_this6 = $this->tokens;
										#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1272: characters 8-16
										$_this6->head = new GenericCell($tk, $_this6->head);
										break;
								}
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1274: lines 1274-1275
								if ($pow === null) {
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1275: characters 8-25
									$this->invalidChar($char);
								}
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1276: characters 7-64
								return Token::TConst(Const_hx::CFloat((10 ** $pow) / $exp1 * $n1 * 10));
								break;
							case 120:
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1289: lines 1289-1290
								if (($n1 > 0) || ($exp1 > 0)) {
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1290: characters 8-25
									$this->invalidChar($char);
								}
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1293: characters 7-17
								$n2 = 0;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1294: lines 1294-1307
								while (true) {
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1295: characters 8-25
									$char = $this->readChar();
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1296: lines 1296-1306
									switch ($char) {
										case 48:
										case 49:
										case 50:
										case 51:
										case 52:
										case 53:
										case 54:
										case 55:
										case 56:
										case 57:
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1298: characters 9-33
											$n2 = ($n2 << 4) + $char - 48;
											break;
										case 65:
										case 66:
										case 67:
										case 68:
										case 69:
										case 70:
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1300: characters 9-35
											$n2 = ($n2 << 4) + ($char - 55);
											break;
										case 97:
										case 98:
										case 99:
										case 100:
										case 101:
										case 102:
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1302: characters 9-35
											$n2 = ($n2 << 4) + ($char - 87);
											break;
										default:
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1304: characters 9-25
											$this->char = $char;
											#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1305: characters 9-31
											return Token::TConst(Const_hx::CInt($n2));
											break;
									}
								}
								break;
							default:
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1330: characters 7-23
								$this->char = $char;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1331: characters 7-26
								$i1 = (int)($n1);
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1332: characters 7-91
								return Token::TConst(($exp1 > 0 ? Const_hx::CFloat($n1 * 10 / $exp1) : (Boot::equal($i1, $n1) ? Const_hx::CInt($i1) : Const_hx::CFloat($n1))));
								break;
						}
					}
					break;
				case 58:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1371: characters 19-36
					return Token::TDoubleDot();
					break;
				case 59:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1335: characters 19-36
					return Token::TSemicolon();
					break;
				case 61:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1373: characters 5-22
					$char = $this->readChar();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1374: lines 1374-1377
					if ($char === 61) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1375: characters 6-22
						return Token::TOp("==");
					} else if ($char === 62) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1377: characters 6-22
						return Token::TOp("=>");
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1378: characters 5-21
					$this->char = $char;
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1379: characters 5-20
					return Token::TOp("=");
					break;
				case 63:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1370: characters 19-35
					return Token::TQuestion();
					break;
				case 64:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1381: characters 5-22
					$char = $this->readChar();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1382: lines 1382-1392
					if (($this->idents->arr[$char] ?? null) || ($char === 58)) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1383: characters 6-41
						$id1 = chr($char);
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1384: lines 1384-1391
						while (true) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1385: characters 7-24
							$char = $this->readChar();
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1386: lines 1386-1389
							if (!($this->idents->arr[$char] ?? null)) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1387: characters 8-24
								$this->char = $char;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1388: characters 8-24
								return Token::TMeta($id1);
							}
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1390: characters 7-38
							$id1 = ($id1??'null') . (chr($char)??'null');
						}
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1393: characters 5-22
					$this->invalidChar($char);
					break;
				case 91:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1367: characters 19-33
					return Token::TBkOpen();
					break;
				case 93:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1368: characters 19-34
					return Token::TBkClose();
					break;
				case 123:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1365: characters 19-33
					return Token::TBrOpen();
					break;
				case 125:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1366: characters 19-34
					return Token::TBrClose();
					break;
				default:
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1409: lines 1409-1423
					if (($this->ops->arr[$char] ?? null)) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1410: characters 6-41
						$op = chr($char);
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1411: characters 6-20
						$prev = -1;
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1412: lines 1412-1422
						while (true) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1413: characters 7-24
							$char = $this->readChar();
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1414: lines 1414-1419
							if (!($this->ops->arr[$char] ?? null) || ($prev === 61)) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1415: lines 1415-1416
								if (((0 >= strlen($op) ? null : ord($op[0]))) === 47) {
									#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1416: characters 9-37
									return $this->tokenComment($op, $char);
								}
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1417: characters 8-24
								$this->char = $char;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1418: characters 8-22
								return Token::TOp($op);
							}
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1420: characters 7-18
							$prev = $char;
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1421: characters 7-38
							$op = ($op??'null') . (chr($char)??'null');
						}
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1424: lines 1424-1434
					if (($this->idents->arr[$char] ?? null)) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1425: characters 6-41
						$id2 = chr($char);
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1426: lines 1426-1433
						while (true) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1427: characters 7-24
							$char = $this->readChar();
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1428: lines 1428-1431
							if (!($this->idents->arr[$char] ?? null)) {
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1429: characters 8-24
								$this->char = $char;
								#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1430: characters 8-22
								return Token::TId($id2);
							}
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1432: characters 7-38
							$id2 = ($id2??'null') . (chr($char)??'null');
						}
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1435: characters 5-22
					$this->invalidChar($char);
					break;
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1437: characters 4-21
			$char = $this->readChar();
		}
	}


	/**
	 * @param string $op
	 * @param int $char
	 * 
	 * @return Token
	 */
	public function tokenComment ($op, $char) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1530: characters 3-28
		$c = (1 >= strlen($op) ? null : ord($op[1]));
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1531: characters 3-17
		$s = $this->input;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1532: lines 1532-1542
		if ($c === 47) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1533: lines 1533-1540
			try {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1534: lines 1534-1537
				while (($char !== 13) && ($char !== 10)) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1536: characters 6-25
					$char = $s->readByte();
				}
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1538: characters 5-21
				$this->char = $char;
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e = $__hx__real_e;
							}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1541: characters 4-18
			return $this->token();
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1543: lines 1543-1566
		if ($c === 42) {
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1544: characters 4-19
			$old = $this->line;
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1545: lines 1545-1548
			if ($op === "/**/") {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1546: characters 5-21
				$this->char = $char;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1547: characters 5-19
				return $this->token();
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1549: lines 1549-1564
			try {
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1550: lines 1550-1560
				while (true) {
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1551: lines 1551-1555
					while ($char !== 42) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1552: characters 7-37
						if ($char === 10) {
							#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1552: characters 31-37
							$this->line++;
						}
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1554: characters 7-26
						$char = $s->readByte();
					}
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1557: characters 6-25
					$char = $s->readByte();
					#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1558: lines 1558-1559
					if ($char === 47) {
						#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1559: characters 7-12
						break;
					}
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e1 = $__hx__real_e;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1562: characters 5-15
				$this->line = $old;
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1563: characters 5-52
				throw new HxException(Error::EUnterminatedComment());
			}
			#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1565: characters 4-18
			return $this->token();
		}
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1567: characters 3-19
		$this->char = $char;
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1568: characters 3-17
		return Token::TOp($op);
	}


	/**
	 * @param Token $t
	 * 
	 * @return string
	 */
	public function tokenString ($t) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1583: lines 1583-1601
		switch ($t->index) {
			case 0:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1584: characters 14-21
				return "<eof>";
				break;
			case 1:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1585: characters 15-16
				$c = $t->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1585: characters 19-33
				return $this->constString($c);
				break;
			case 2:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1586: characters 12-13
				$s = $t->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1586: characters 16-17
				return $s;
				break;
			case 3:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1587: characters 12-13
				$s1 = $t->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1587: characters 16-17
				return $s1;
				break;
			case 4:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1588: characters 16-19
				return "(";
				break;
			case 5:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1589: characters 17-20
				return ")";
				break;
			case 6:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1590: characters 17-20
				return "{";
				break;
			case 7:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1591: characters 18-21
				return "}";
				break;
			case 8:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1592: characters 14-17
				return ".";
				break;
			case 9:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1593: characters 16-19
				return ",";
				break;
			case 10:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1594: characters 20-23
				return ";";
				break;
			case 11:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1595: characters 17-20
				return "[";
				break;
			case 12:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1596: characters 18-21
				return "]";
				break;
			case 13:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1597: characters 19-22
				return "?";
				break;
			case 14:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1598: characters 20-23
				return ":";
				break;
			case 15:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1599: characters 14-16
				$id = $t->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1599: characters 19-27
				return "@" . ($id??'null');
				break;
			case 16:
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1600: characters 16-18
				$id1 = $t->params[0];
				#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:1600: characters 21-29
				return "#" . ($id1??'null');
				break;
		}
	}


	/**
	 * @param Token $tk
	 * 
	 * @return mixed
	 */
	public function unexpected ($tk) {
		#/usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Parser.hx:198: characters 3-56
		throw new HxException(Error::EUnexpected($this->tokenString($tk)));
	}
}


Boot::registerClass(Parser::class, 'hscript.Parser');

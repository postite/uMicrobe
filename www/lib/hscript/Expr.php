<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/hscript/2,2,0/hscript/Expr.hx
 */

namespace hscript;

use \php\Boot;
use \php\_Boot\HxEnum;

class Expr extends HxEnum {
	/**
	 * @param Expr $e
	 * @param Expr $index
	 * 
	 * @return Expr
	 */
	static public function EArray ($e, $index) {
		return new Expr('EArray', 16, [$e, $index]);
	}


	/**
	 * @param \Array_hx $e
	 * 
	 * @return Expr
	 */
	static public function EArrayDecl ($e) {
		return new Expr('EArrayDecl', 17, [$e]);
	}


	/**
	 * @param string $op
	 * @param Expr $e1
	 * @param Expr $e2
	 * 
	 * @return Expr
	 */
	static public function EBinop ($op, $e1, $e2) {
		return new Expr('EBinop', 6, [$op, $e1, $e2]);
	}


	/**
	 * @param \Array_hx $e
	 * 
	 * @return Expr
	 */
	static public function EBlock ($e) {
		return new Expr('EBlock', 4, [$e]);
	}


	/**
	 * @return Expr
	 */
	static public function EBreak () {
		static $inst = null;
		if (!$inst) $inst = new Expr('EBreak', 12, []);
		return $inst;
	}


	/**
	 * @param Expr $e
	 * @param \Array_hx $params
	 * 
	 * @return Expr
	 */
	static public function ECall ($e, $params) {
		return new Expr('ECall', 8, [$e, $params]);
	}


	/**
	 * @param Const_hx $c
	 * 
	 * @return Expr
	 */
	static public function EConst ($c) {
		return new Expr('EConst', 0, [$c]);
	}


	/**
	 * @return Expr
	 */
	static public function EContinue () {
		static $inst = null;
		if (!$inst) $inst = new Expr('EContinue', 13, []);
		return $inst;
	}


	/**
	 * @param Expr $cond
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	static public function EDoWhile ($cond, $e) {
		return new Expr('EDoWhile', 24, [$cond, $e]);
	}


	/**
	 * @param Expr $e
	 * @param string $f
	 * 
	 * @return Expr
	 */
	static public function EField ($e, $f) {
		return new Expr('EField', 5, [$e, $f]);
	}


	/**
	 * @param string $v
	 * @param Expr $it
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	static public function EFor ($v, $it, $e) {
		return new Expr('EFor', 11, [$v, $it, $e]);
	}


	/**
	 * @param \Array_hx $args
	 * @param Expr $e
	 * @param string $name
	 * @param CType $ret
	 * 
	 * @return Expr
	 */
	static public function EFunction ($args, $e, $name = null, $ret = null) {
		return new Expr('EFunction', 14, [$args, $e, $name, $ret]);
	}


	/**
	 * @param string $v
	 * 
	 * @return Expr
	 */
	static public function EIdent ($v) {
		return new Expr('EIdent', 1, [$v]);
	}


	/**
	 * @param Expr $cond
	 * @param Expr $e1
	 * @param Expr $e2
	 * 
	 * @return Expr
	 */
	static public function EIf ($cond, $e1, $e2 = null) {
		return new Expr('EIf', 9, [$cond, $e1, $e2]);
	}


	/**
	 * @param string $name
	 * @param \Array_hx $args
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	static public function EMeta ($name, $args, $e) {
		return new Expr('EMeta', 25, [$name, $args, $e]);
	}


	/**
	 * @param string $cl
	 * @param \Array_hx $params
	 * 
	 * @return Expr
	 */
	static public function ENew ($cl, $params) {
		return new Expr('ENew', 18, [$cl, $params]);
	}


	/**
	 * @param \Array_hx $fl
	 * 
	 * @return Expr
	 */
	static public function EObject ($fl) {
		return new Expr('EObject', 21, [$fl]);
	}


	/**
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	static public function EParent ($e) {
		return new Expr('EParent', 3, [$e]);
	}


	/**
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	static public function EReturn ($e = null) {
		return new Expr('EReturn', 15, [$e]);
	}


	/**
	 * @param Expr $e
	 * @param \Array_hx $cases
	 * @param Expr $defaultExpr
	 * 
	 * @return Expr
	 */
	static public function ESwitch ($e, $cases, $defaultExpr = null) {
		return new Expr('ESwitch', 23, [$e, $cases, $defaultExpr]);
	}


	/**
	 * @param Expr $cond
	 * @param Expr $e1
	 * @param Expr $e2
	 * 
	 * @return Expr
	 */
	static public function ETernary ($cond, $e1, $e2) {
		return new Expr('ETernary', 22, [$cond, $e1, $e2]);
	}


	/**
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	static public function EThrow ($e) {
		return new Expr('EThrow', 19, [$e]);
	}


	/**
	 * @param Expr $e
	 * @param string $v
	 * @param CType $t
	 * @param Expr $ecatch
	 * 
	 * @return Expr
	 */
	static public function ETry ($e, $v, $t, $ecatch) {
		return new Expr('ETry', 20, [$e, $v, $t, $ecatch]);
	}


	/**
	 * @param string $op
	 * @param bool $prefix
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	static public function EUnop ($op, $prefix, $e) {
		return new Expr('EUnop', 7, [$op, $prefix, $e]);
	}


	/**
	 * @param string $n
	 * @param CType $t
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	static public function EVar ($n, $t = null, $e = null) {
		return new Expr('EVar', 2, [$n, $t, $e]);
	}


	/**
	 * @param Expr $cond
	 * @param Expr $e
	 * 
	 * @return Expr
	 */
	static public function EWhile ($cond, $e) {
		return new Expr('EWhile', 10, [$cond, $e]);
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			16 => 'EArray',
			17 => 'EArrayDecl',
			6 => 'EBinop',
			4 => 'EBlock',
			12 => 'EBreak',
			8 => 'ECall',
			0 => 'EConst',
			13 => 'EContinue',
			24 => 'EDoWhile',
			5 => 'EField',
			11 => 'EFor',
			14 => 'EFunction',
			1 => 'EIdent',
			9 => 'EIf',
			25 => 'EMeta',
			18 => 'ENew',
			21 => 'EObject',
			3 => 'EParent',
			15 => 'EReturn',
			23 => 'ESwitch',
			22 => 'ETernary',
			19 => 'EThrow',
			20 => 'ETry',
			7 => 'EUnop',
			2 => 'EVar',
			10 => 'EWhile',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'EArray' => 2,
			'EArrayDecl' => 1,
			'EBinop' => 3,
			'EBlock' => 1,
			'EBreak' => 0,
			'ECall' => 2,
			'EConst' => 1,
			'EContinue' => 0,
			'EDoWhile' => 2,
			'EField' => 2,
			'EFor' => 3,
			'EFunction' => 4,
			'EIdent' => 1,
			'EIf' => 3,
			'EMeta' => 3,
			'ENew' => 2,
			'EObject' => 1,
			'EParent' => 1,
			'EReturn' => 1,
			'ESwitch' => 3,
			'ETernary' => 3,
			'EThrow' => 1,
			'ETry' => 4,
			'EUnop' => 3,
			'EVar' => 3,
			'EWhile' => 2,
		];
	}
}


Boot::registerClass(Expr::class, 'hscript.Expr');

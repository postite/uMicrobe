<?php

// Generated by Haxe 3.4.7
class StringTools {
	public function __construct(){}
	static function htmlEscape($s, $quotes = null) {
		$GLOBALS['%s']->push("StringTools::htmlEscape");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = _hx_explode(">", _hx_explode("<", _hx_explode("&", $s)->join("&amp;"))->join("&lt;"))->join("&gt;");
		if($quotes) {
			$tmp = _hx_explode("'", _hx_explode("\"", $s)->join("&quot;"))->join("&#039;");
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$GLOBALS['%s']->pop();
			return $s;
		}
		$GLOBALS['%s']->pop();
	}
	static function startsWith($s, $start) {
		$GLOBALS['%s']->push("StringTools::startsWith");
		$__hx__spos = $GLOBALS['%s']->length;
		if(strlen($s) >= strlen($start)) {
			$tmp = _hx_substr($s, 0, strlen($start)) === $start;
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
	static function endsWith($s, $end) {
		$GLOBALS['%s']->push("StringTools::endsWith");
		$__hx__spos = $GLOBALS['%s']->length;
		$elen = strlen($end);
		$slen = strlen($s);
		if($slen >= $elen) {
			$tmp = _hx_substr($s, $slen - $elen, $elen) === $end;
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
	static function quoteUnixArg($argument) {
		$GLOBALS['%s']->push("StringTools::quoteUnixArg");
		$__hx__spos = $GLOBALS['%s']->length;
		if($argument === "") {
			$GLOBALS['%s']->pop();
			return "''";
		}
		$tmp = !_hx_deref(new EReg("[^a-zA-Z0-9_@%+=:,./-]", ""))->match($argument);
		if($tmp) {
			$GLOBALS['%s']->pop();
			return $argument;
		}
		{
			$tmp2 = "'" . _hx_string_or_null(str_replace("'", "'\"'\"'", $argument)) . "'";
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static $winMetaCharacters;
	static function quoteWinArg($argument, $escapeMetaCharacters) {
		$GLOBALS['%s']->push("StringTools::quoteWinArg");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = !_hx_deref(new EReg("^[^ \x09\\\\\"]+\$", ""))->match($argument);
		if($tmp) {
			$result = new StringBuf();
			$needquote = null;
			$needquote1 = null;
			if(_hx_index_of($argument, " ", null) === -1) {
				$needquote1 = _hx_index_of($argument, "\x09", null) !== -1;
			} else {
				$needquote1 = true;
			}
			if(!$needquote1) {
				$needquote = $argument === "";
			} else {
				$needquote = true;
			}
			if($needquote) {
				$result->add("\"");
			}
			$bs_buf = new StringBuf();
			{
				$_g1 = 0;
				$_g = strlen($argument);
				while($_g1 < $_g) {
					$_g1 = $_g1 + 1;
					$i = $_g1 - 1;
					{
						$_g2 = _hx_char_code_at($argument, $i);
						if($_g2 === null) {
							$c = $_g2;
							{
								if(strlen($bs_buf->b) > 0) {
									$result->add($bs_buf->b);
									$bs_buf = new StringBuf();
								}
								$result1 = $result;
								$result1->b = _hx_string_or_null($result1->b) . _hx_string_or_null(chr($c));
								unset($result1);
							}
							unset($c);
						} else {
							switch($_g2) {
							case 34:{
								$bs = $bs_buf->b;
								$result->add($bs);
								$result->add($bs);
								$bs_buf = new StringBuf();
								$result->add("\\\"");
							}break;
							case 92:{
								$bs_buf->add("\\");
							}break;
							default:{
								$c1 = $_g2;
								{
									if(strlen($bs_buf->b) > 0) {
										$result->add($bs_buf->b);
										$bs_buf = new StringBuf();
									}
									$result2 = $result;
									$result2->b = _hx_string_or_null($result2->b) . _hx_string_or_null(chr($c1));
								}
							}break;
							}
						}
						unset($_g2);
					}
					unset($i);
				}
			}
			$result->add($bs_buf->b);
			if($needquote) {
				$result->add($bs_buf->b);
				$result->add("\"");
			}
			$argument = $result->b;
		}
		if($escapeMetaCharacters) {
			$result3 = new StringBuf();
			{
				$_g11 = 0;
				$_g3 = strlen($argument);
				while($_g11 < $_g3) {
					$_g11 = $_g11 + 1;
					$i1 = $_g11 - 1;
					$c2 = _hx_char_code_at($argument, $i1);
					if(StringTools::$winMetaCharacters->indexOf($c2, null) >= 0) {
						$result4 = $result3;
						$result4->b = _hx_string_or_null($result4->b) . "^";
						unset($result4);
					}
					$result5 = $result3;
					$result5->b = _hx_string_or_null($result5->b) . _hx_string_or_null(chr($c2));
					unset($result5,$i1,$c2);
				}
			}
			{
				$tmp2 = $result3->b;
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		} else {
			$GLOBALS['%s']->pop();
			return $argument;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'StringTools'; }
}
StringTools::$winMetaCharacters = (new _hx_array(array(59, 44, 32, 40, 41, 37, 33, 94, 34, 60, 62, 38, 124, 10, 13)));

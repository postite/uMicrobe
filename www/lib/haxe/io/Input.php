<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/io/Input.hx
 */

namespace haxe\io;

use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxString;
use \haxe\CallStack;

/**
 * An Input is an abstract reader. See other classes in the `haxe.io` package
 * for several possible implementations.
 * All functions which read data throw `Eof` when the end of the stream
 * is reached.
 */
class Input {
	/**
	 * @var bool
	 * Endianness (word byte order) used when reading numbers.
	 * If `true`, big-endian is used, otherwise `little-endian` is used.
	 */
	public $bigEndian;


	/**
	 * Close the input source.
	 * Behaviour while reading after calling this method is unspecified.
	 * 
	 * @return void
	 */
	public function close () {
	}


	/**
	 * Read and return `nbytes` bytes.
	 * 
	 * @param int $nbytes
	 * 
	 * @return Bytes
	 */
	public function read ($nbytes) {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:148: characters 3-31
		$s = Bytes::alloc($nbytes);
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:149: characters 3-13
		$p = 0;
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:150: lines 150-155
		while ($nbytes > 0) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:151: characters 4-34
			$k = $this->readBytes($s, $p, $nbytes);
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:152: characters 4-22
			if ($k === 0) {
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:152: characters 17-22
				throw new HxException(Error::Blocked());
			}
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:153: characters 4-10
			$p = $p + $k;
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:154: characters 4-15
			$nbytes = $nbytes - $k;
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:156: characters 3-11
		return $s;
	}


	/**
	 * Read and return all available data.
	 * The `bufsize` optional argument specifies the size of chunks by
	 * which data is read. Its default value is target-specific.
	 * 
	 * @param int $bufsize
	 * 
	 * @return Bytes
	 */
	public function readAll ($bufsize = null) {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:109: lines 109-111
		if ($bufsize === null) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:111: characters 4-11
			$bufsize = 8192;
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:116: characters 3-34
		$buf = Bytes::alloc($bufsize);
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:117: characters 3-41
		$total = new BytesBuffer();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:118: lines 118-125
		try {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:119: lines 119-124
			while (true) {
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:120: characters 5-40
				$len = $this->readBytes($buf, 0, $bufsize);
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:121: lines 121-122
				if ($len === 0) {
					#/usr/local/lib/haxe/std/haxe/io/Input.hx:122: characters 6-11
					throw new HxException(Error::Blocked());
				}
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:123: characters 5-30
				if (($len < 0) || ($len > $buf->length)) {
					#/usr/local/lib/haxe/std/haxe/io/Input.hx:123: characters 5-30
					throw new HxException(Error::OutsideBounds());
				} else {
					#/usr/local/lib/haxe/std/haxe/io/Input.hx:123: characters 5-30
					$left = $total->b;
					#/usr/local/lib/haxe/std/haxe/io/Input.hx:123: characters 5-30
					$this_s = substr($buf->b->s, 0, $len);
					#/usr/local/lib/haxe/std/haxe/io/Input.hx:123: characters 5-30
					$total->b = ($left . $this_s);
				}
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$e = $__hx__real_e;
							} else  throw $__hx__caught_e;
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:126: characters 3-26
		return $total->getBytes();
	}


	/**
	 * Read and return one byte.
	 * 
	 * @return int
	 */
	public function readByte () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:53: characters 10-15
		throw new HxException("Not implemented");
	}


	/**
	 * Read `len` bytes and write them into `s` to the position specified by `pos`.
	 * Returns the actual length of read data that can be smaller than `len`.
	 * See `readFullBytes` that tries to read the exact amount of specified bytes.
	 * 
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return int
	 */
	public function readBytes ($s, $pos, $len) {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:65: characters 3-15
		$k = $len;
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:66: characters 3-69
		$b = $s->b;
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:67: lines 67-68
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $s->length)) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:68: characters 4-9
			throw new HxException(Error::OutsideBounds());
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:69: lines 69-83
		try {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:70: lines 70-82
			while ($k > 0) {
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:74: characters 6-28
				$val = $this->readByte();
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:74: characters 6-28
				$b->s = substr_replace($b->s, chr($val), $pos, 1);

				#/usr/local/lib/haxe/std/haxe/io/Input.hx:80: characters 5-10
				$pos = $pos + 1;
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:81: characters 5-8
				$k = $k - 1;
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$eof = $__hx__real_e;
							} else  throw $__hx__caught_e;
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:84: characters 3-15
		return $len - $k;
	}


	/**
	 * Read a 64-bit double-precision floating point number.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return float
	 */
	public function readDouble () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:209: characters 3-24
		$i1 = $this->readInt32();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:210: characters 3-24
		$i2 = $this->readInt32();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:211: characters 10-79
		if ($this->bigEndian) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:211: characters 22-49
			return unpack("d", pack("ii", (FPHelper::$isLittleEndian ? $i2 : $i1), (FPHelper::$isLittleEndian ? $i1 : $i2)))[1];
		} else {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:211: characters 52-79
			return unpack("d", pack("ii", (FPHelper::$isLittleEndian ? $i1 : $i2), (FPHelper::$isLittleEndian ? $i2 : $i1)))[1];
		}
	}


	/**
	 * Read a 32-bit floating point number.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return float
	 */
	public function readFloat () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:200: characters 10-42
		return unpack("f", pack("l", $this->readInt32()))[1];
	}


	/**
	 * Read `len` bytes and write them into `s` to the position specified by `pos`.
	 * Unlike `readBytes`, this method tries to read the exact `len` amount of bytes.
	 * 
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return void
	 */
	public function readFullBytes ($s, $pos, $len) {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:135: lines 135-141
		while ($len > 0) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:136: characters 4-33
			$k = $this->readBytes($s, $pos, $len);
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:137: lines 137-138
			if ($k === 0) {
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:138: characters 5-10
				throw new HxException(Error::Blocked());
			}
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:139: characters 4-12
			$pos = $pos + $k;
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:140: characters 4-12
			$len = $len - $k;
		}
	}


	/**
	 * Read a 16-bit signed integer.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return int
	 */
	public function readInt16 () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:230: characters 3-24
		$ch1 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:231: characters 3-24
		$ch2 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:232: characters 3-59
		$n = ($this->bigEndian ? $ch2 | ($ch1 << 8) : $ch1 | ($ch2 << 8));
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:233: lines 233-234
		if (($n & 32768) !== 0) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:234: characters 4-22
			return $n - 65536;
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:235: characters 3-11
		return $n;
	}


	/**
	 * Read a 24-bit signed integer.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return int
	 */
	public function readInt24 () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:255: characters 3-24
		$ch1 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:256: characters 3-24
		$ch2 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:257: characters 3-24
		$ch3 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:258: characters 3-87
		$n = ($this->bigEndian ? $ch3 | ($ch2 << 8) | ($ch1 << 16) : $ch1 | ($ch2 << 8) | ($ch3 << 16));
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:259: lines 259-260
		if (($n & 8388608) !== 0) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:260: characters 4-24
			return $n - 16777216;
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:261: characters 3-11
		return $n;
	}


	/**
	 * Read a 32-bit signed integer.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return int
	 */
	public function readInt32 () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:282: characters 3-24
		$ch1 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:283: characters 3-24
		$ch2 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:284: characters 3-24
		$ch3 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:285: characters 3-24
		$ch4 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:288: characters 3-115
		$n = ($this->bigEndian ? $ch4 | ($ch3 << 8) | ($ch2 << 16) | ($ch1 << 24) : $ch1 | ($ch2 << 8) | ($ch3 << 16) | ($ch4 << 24));
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:289: lines 289-291
		if (($n & ((int)-2147483648)) !== 0) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:290: characters 4-28
			return $n | ((int)-2147483648);
		} else {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:291: characters 8-16
			return $n;
		}
	}


	/**
	 * Read a 8-bit signed integer.
	 * 
	 * @return int
	 */
	public function readInt8 () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:218: characters 3-22
		$n = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:219: lines 219-220
		if ($n >= 128) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:220: characters 4-18
			return $n - 256;
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:221: characters 3-11
		return $n;
	}


	/**
	 * Read a line of text separated by CR and/or LF bytes.
	 * The CR/LF characters are not included in the resulting string.
	 * 
	 * @return string
	 */
	public function readLine () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:178: characters 3-31
		$buf = new BytesBuffer();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:179: characters 3-18
		$last = null;
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:180: characters 3-9
		$s = null;
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:181: lines 181-190
		try {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:182: lines 182-183
			while (true) {
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:182: characters 11-30
				$last = $this->readByte();
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:182: lines 182-183
				if (!($last !== 10)) {
					#/usr/local/lib/haxe/std/haxe/io/Input.hx:182: lines 182-183
					break;
				}
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:183: characters 5-24
				$buf->b = ($buf->b . chr($last));
			}
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:184: characters 4-33
			$s = $buf->getBytes()->toString();
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:185: characters 8-32
			$index = strlen($s) - 1;
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:185: characters 4-59
			if (((($index < 0) || ($index >= strlen($s)) ? null : ord($s[$index]))) === 13) {
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:185: characters 41-59
				$s = HxString::substr($s, 0, -1);
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$e = $__hx__real_e;
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:187: characters 4-33
				$s = $buf->getBytes()->toString();
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:188: lines 188-189
				if (strlen($s) === 0) {
					#/usr/local/lib/haxe/std/haxe/io/Input.hx:189: characters 37-42
					throw new HxException($e);
				}
			} else  throw $__hx__caught_e;
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:191: characters 3-11
		return $s;
	}


	/**
	 * Read and `len` bytes as a string.
	 * 
	 * @param int $len
	 * 
	 * @return string
	 */
	public function readString ($len) {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:304: characters 3-28
		$b = Bytes::alloc($len);
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:305: characters 3-25
		$this->readFullBytes($b, 0, $len);
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:309: characters 3-22
		return $b->toString();
	}


	/**
	 * Read a 16-bit unsigned integer.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return int
	 */
	public function readUInt16 () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:244: characters 3-24
		$ch1 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:245: characters 3-24
		$ch2 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:246: characters 10-57
		if ($this->bigEndian) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:246: characters 22-38
			return $ch2 | ($ch1 << 8);
		} else {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:246: characters 41-57
			return $ch1 | ($ch2 << 8);
		}
	}


	/**
	 * Read a 24-bit unsigned integer.
	 * Endianness is specified by the `bigEndian` property.
	 * 
	 * @return int
	 */
	public function readUInt24 () {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:270: characters 3-24
		$ch1 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:271: characters 3-24
		$ch2 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:272: characters 3-24
		$ch3 = $this->readByte();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:273: characters 10-85
		if ($this->bigEndian) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:273: characters 22-52
			return $ch3 | ($ch2 << 8) | ($ch1 << 16);
		} else {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:273: characters 55-85
			return $ch1 | ($ch2 << 8) | ($ch3 << 16);
		}
	}


	/**
	 * Read a string until a character code specified by `end` is occurred.
	 * The final character is not included in the resulting string.
	 * 
	 * @param int $end
	 * 
	 * @return string
	 */
	public function readUntil ($end) {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:165: characters 3-31
		$buf = new BytesBuffer();
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:166: characters 3-18
		$last = null;
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:167: lines 167-168
		while (true) {
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:167: characters 10-29
			$last = $this->readByte();
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:167: lines 167-168
			if (!($last !== $end)) {
				#/usr/local/lib/haxe/std/haxe/io/Input.hx:167: lines 167-168
				break;
			}
			#/usr/local/lib/haxe/std/haxe/io/Input.hx:168: characters 4-23
			$buf->b = ($buf->b . chr($last));
		}
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:169: characters 3-35
		return $buf->getBytes()->toString();
	}


	/**
	 * @param bool $b
	 * 
	 * @return bool
	 */
	public function set_bigEndian ($b) {
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:96: characters 3-16
		$this->bigEndian = $b;
		#/usr/local/lib/haxe/std/haxe/io/Input.hx:97: characters 3-11
		return $b;
	}
}


Boot::registerClass(Input::class, 'haxe.io.Input');
Boot::registerSetters('haxe\\io\\Input', [
	'bigEndian' => true
]);

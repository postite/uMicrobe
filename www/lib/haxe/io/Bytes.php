<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx
 */

namespace haxe\io;

use \haxe\_Int64\___Int64;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\io\_BytesData\Container;

class Bytes {
	/**
	 * @var Container
	 */
	public $b;
	/**
	 * @var int
	 */
	public $length;


	/**
	 * @param int $length
	 * 
	 * @return Bytes
	 */
	static public function alloc ($length) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:187: characters 3-52
		return new Bytes($length, new Container(str_repeat(chr(0), $length)));
	}


	/**
	 * Read the most efficiently possible the n-th byte of the data.
	 * Behavior when reading outside of the available data is unspecified.
	 * 
	 * @param Container $b
	 * @param int $pos
	 * 
	 * @return int
	 */
	static public function fastGet ($b, $pos) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:203: characters 3-20
		return ord($b->s[$pos]);
	}


	/**
	 * @param Container $b
	 * 
	 * @return Bytes
	 */
	static public function ofData ($b) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:195: characters 3-32
		return new Bytes(strlen($b->s), $b);
	}


	/**
	 * @param string $s
	 * 
	 * @return Bytes
	 */
	static public function ofString ($s) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:191: characters 20-28
		$s1 = strlen($s);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:191: characters 3-32
		return new Bytes($s1, new Container($s));
	}


	/**
	 * @param int $length
	 * @param Container $b
	 * 
	 * @return void
	 */
	public function __construct ($length, $b) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:31: characters 3-23
		$this->length = $length;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:32: characters 3-13
		$this->b = $b;
	}


	/**
	 * @param int $pos
	 * @param Bytes $src
	 * @param int $srcpos
	 * @param int $len
	 * 
	 * @return void
	 */
	public function blit ($pos, $src, $srcpos, $len) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:44: lines 44-48
		if (($pos < 0) || ($srcpos < 0) || ($len < 0) || (($pos + $len) > $this->length) || (($srcpos + $len) > $src->length)) {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:45: characters 4-9
			throw new HxException(Error::OutsideBounds());
		} else {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:47: characters 4-35
			$this1 = $this->b;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:47: characters 4-35
			$src1 = $src->b;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:47: characters 4-35
			$this1->s = ((substr($this1->s, 0, $pos) . substr($src1->s, $srcpos, $len)) . substr($this1->s, $pos + $len));
		}
	}


	/**
	 * @param Bytes $other
	 * 
	 * @return int
	 */
	public function compare ($other) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:64: characters 10-28
		return ($this->b->s <=> $other->b->s);
	}


	/**
	 * @param int $pos
	 * @param int $len
	 * @param int $value
	 * 
	 * @return void
	 */
	public function fill ($pos, $len, $value) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:52: characters 3-42
		$_g1 = $pos;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:52: characters 3-42
		$_g = $pos + $len;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:52: characters 3-42
		while ($_g1 < $_g) {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:52: characters 3-42
			$_g1 = $_g1 + 1;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:52: characters 7-8
			$i = $_g1 - 1;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:52: characters 27-42
			$this1 = $this->b;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:52: characters 27-42
			$this1->s = substr_replace($this1->s, chr($value), $i, 1);

		}
	}


	/**
	 * @param int $pos
	 * 
	 * @return int
	 */
	public function get ($pos) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:36: characters 10-20
		return ord($this->b->s[$pos]);
	}


	/**
	 * @return Container
	 */
	public function getData () {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:183: characters 3-11
		return $this->b;
	}


	/**
	 * Returns the IEEE double precision value at given position (in low endian encoding).
	 * Result is unspecified if reading outside of the bounds
	 * 
	 * @param int $pos
	 * 
	 * @return float
	 */
	public function getDouble ($pos) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:72: characters 31-44
		$v = ord($this->b->s[$pos]) | (ord($this->b->s[$pos + 1]) << 8) | (ord($this->b->s[$pos + 2]) << 16) | (ord($this->b->s[$pos + 3]) << 24);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:72: characters 10-61
		$low = (($v & ((int)-2147483648)) !== 0 ? $v | ((int)-2147483648) : $v);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:72: characters 45-60
		$pos1 = $pos + 4;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:72: characters 45-60
		$v1 = ord($this->b->s[$pos1]) | (ord($this->b->s[$pos1 + 1]) << 8) | (ord($this->b->s[$pos1 + 2]) << 16) | (ord($this->b->s[$pos1 + 3]) << 24);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:72: characters 10-61
		$high = (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:72: characters 10-61
		return unpack("d", pack("ii", (FPHelper::$isLittleEndian ? $low : $high), (FPHelper::$isLittleEndian ? $high : $low)))[1];
	}


	/**
	 * Returns the IEEE single precision value at given position (in low endian encoding).
	 * Result is unspecified if reading outside of the bounds
	 * 
	 * @param int $pos
	 * 
	 * @return float
	 */
	public function getFloat ($pos) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:80: characters 3-46
		$b = new BytesInput($this, $pos, 4);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:81: characters 3-23
		return $b->readFloat();
	}


	/**
	 * Returns the 32 bit integer at given position (in low endian encoding).
	 * 
	 * @param int $pos
	 * 
	 * @return int
	 */
	public function getInt32 ($pos) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:121: characters 3-86
		$v = ord($this->b->s[$pos]) | (ord($this->b->s[$pos + 1]) << 8) | (ord($this->b->s[$pos + 2]) << 16) | (ord($this->b->s[$pos + 3]) << 24);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:122: characters 10-57
		if (($v & ((int)-2147483648)) !== 0) {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:122: characters 36-50
			return $v | ((int)-2147483648);
		} else {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:122: characters 56-57
			return $v;
		}
	}


	/**
	 * Returns the 64 bit integer at given position (in low endian encoding).
	 * 
	 * @param int $pos
	 * 
	 * @return ___Int64
	 */
	public function getInt64 ($pos) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:129: characters 26-41
		$pos1 = $pos + 4;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:129: characters 26-41
		$v = ord($this->b->s[$pos1]) | (ord($this->b->s[$pos1 + 1]) << 8) | (ord($this->b->s[$pos1 + 2]) << 16) | (ord($this->b->s[$pos1 + 3]) << 24);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:129: characters 43-56
		$v1 = ord($this->b->s[$pos]) | (ord($this->b->s[$pos + 1]) << 8) | (ord($this->b->s[$pos + 2]) << 16) | (ord($this->b->s[$pos + 3]) << 24);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:129: characters 10-57
		$this1 = new ___Int64((($v & ((int)-2147483648)) !== 0 ? $v | ((int)-2147483648) : $v), (($v1 & ((int)-2147483648)) !== 0 ? $v1 | ((int)-2147483648) : $v1));
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:129: characters 10-57
		return $this1;
	}


	/**
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	public function getString ($pos, $len) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:151: lines 151-155
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $this->length)) {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:152: characters 4-9
			throw new HxException(Error::OutsideBounds());
		} else {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:154: characters 11-32
			return substr($this->b->s, $pos, $len);
		}
	}


	/**
	 * Returns the 16 bit unsigned integer at given position (in low endian encoding).
	 * 
	 * @param int $pos
	 * 
	 * @return int
	 */
	public function getUInt16 ($pos) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:106: characters 3-40
		return ord($this->b->s[$pos]) | (ord($this->b->s[$pos + 1]) << 8);
	}


	/**
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	public function readString ($pos, $len) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:161: characters 10-29
		$tmp = null;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:161: characters 10-29
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $this->length)) {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:161: characters 10-29
			throw new HxException(Error::OutsideBounds());
		} else {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:161: characters 10-29
			$tmp = substr($this->b->s, $pos, $len);
		}
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:161: characters 3-29
		return $tmp;
	}


	/**
	 * @param int $pos
	 * @param int $v
	 * 
	 * @return void
	 */
	public function set ($pos, $v) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:40: characters 3-16
		$this1 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:40: characters 3-16
		$this1->s = substr_replace($this1->s, chr($v), $pos, 1);
	}


	/**
	 * Store the IEEE double precision value at given position in low endian encoding.
	 * Result is unspecified if writing outside of the bounds.
	 * 
	 * @param int $pos
	 * @param float $v
	 * 
	 * @return void
	 */
	public function setDouble ($pos, $v) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:89: characters 3-35
		$i = FPHelper::doubleToI64($v);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:90: characters 3-23
		$v1 = $i->low;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:90: characters 3-23
		$this1 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:90: characters 3-23
		$this1->s = substr_replace($this1->s, chr($v1), $pos, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:90: characters 3-23
		$this2 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:90: characters 3-23
		$this2->s = substr_replace($this2->s, chr($v1 >> 8), $pos + 1, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:90: characters 3-23
		$this3 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:90: characters 3-23
		$this3->s = substr_replace($this3->s, chr($v1 >> 16), $pos + 2, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:90: characters 3-23
		$this4 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:90: characters 3-23
		$this4->s = substr_replace($this4->s, chr(Boot::shiftRightUnsigned($v1, 24)), $pos + 3, 1);


		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$pos1 = $pos + 4;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$v2 = $i->high;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$this5 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$this5->s = substr_replace($this5->s, chr($v2), $pos1, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$this6 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$this6->s = substr_replace($this6->s, chr($v2 >> 8), $pos1 + 1, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$this7 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$this7->s = substr_replace($this7->s, chr($v2 >> 16), $pos1 + 2, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$this8 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:91: characters 3-28
		$this8->s = substr_replace($this8->s, chr(Boot::shiftRightUnsigned($v2, 24)), $pos1 + 3, 1);


	}


	/**
	 * Store the IEEE single precision value at given position in low endian encoding.
	 * Result is unspecified if writing outside of the bounds.
	 * 
	 * @param int $pos
	 * @param float $v
	 * 
	 * @return void
	 */
	public function setFloat ($pos, $v) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:99: characters 3-40
		$v1 = unpack("l", pack("f", $v))[1];
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:99: characters 3-40
		$this1 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:99: characters 3-40
		$this1->s = substr_replace($this1->s, chr($v1), $pos, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:99: characters 3-40
		$this2 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:99: characters 3-40
		$this2->s = substr_replace($this2->s, chr($v1 >> 8), $pos + 1, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:99: characters 3-40
		$this3 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:99: characters 3-40
		$this3->s = substr_replace($this3->s, chr($v1 >> 16), $pos + 2, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:99: characters 3-40
		$this4 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:99: characters 3-40
		$this4->s = substr_replace($this4->s, chr(Boot::shiftRightUnsigned($v1, 24)), $pos + 3, 1);

	}


	/**
	 * Store the 32 bit integer at given position (in low endian encoding).
	 * 
	 * @param int $pos
	 * @param int $v
	 * 
	 * @return void
	 */
	public function setInt32 ($pos, $v) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:136: characters 3-14
		$this1 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:136: characters 3-14
		$this1->s = substr_replace($this1->s, chr($v), $pos, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:137: characters 3-23
		$this2 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:137: characters 3-23
		$this2->s = substr_replace($this2->s, chr($v >> 8), $pos + 1, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:138: characters 3-24
		$this3 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:138: characters 3-24
		$this3->s = substr_replace($this3->s, chr($v >> 16), $pos + 2, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:139: characters 3-25
		$this4 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:139: characters 3-25
		$this4->s = substr_replace($this4->s, chr(Boot::shiftRightUnsigned($v, 24)), $pos + 3, 1);

	}


	/**
	 * Store the 64 bit integer at given position (in low endian encoding).
	 * 
	 * @param int $pos
	 * @param ___Int64 $v
	 * 
	 * @return void
	 */
	public function setInt64 ($pos, $v) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:146: characters 3-23
		$v1 = $v->low;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:146: characters 3-23
		$this1 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:146: characters 3-23
		$this1->s = substr_replace($this1->s, chr($v1), $pos, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:146: characters 3-23
		$this2 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:146: characters 3-23
		$this2->s = substr_replace($this2->s, chr($v1 >> 8), $pos + 1, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:146: characters 3-23
		$this3 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:146: characters 3-23
		$this3->s = substr_replace($this3->s, chr($v1 >> 16), $pos + 2, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:146: characters 3-23
		$this4 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:146: characters 3-23
		$this4->s = substr_replace($this4->s, chr(Boot::shiftRightUnsigned($v1, 24)), $pos + 3, 1);


		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$pos1 = $pos + 4;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$v2 = $v->high;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$this5 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$this5->s = substr_replace($this5->s, chr($v2), $pos1, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$this6 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$this6->s = substr_replace($this6->s, chr($v2 >> 8), $pos1 + 1, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$this7 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$this7->s = substr_replace($this7->s, chr($v2 >> 16), $pos1 + 2, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$this8 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:147: characters 3-28
		$this8->s = substr_replace($this8->s, chr(Boot::shiftRightUnsigned($v2, 24)), $pos1 + 3, 1);


	}


	/**
	 * Store the 16 bit unsigned integer at given position (in low endian encoding).
	 * 
	 * @param int $pos
	 * @param int $v
	 * 
	 * @return void
	 */
	public function setUInt16 ($pos, $v) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:113: characters 3-14
		$this1 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:113: characters 3-14
		$this1->s = substr_replace($this1->s, chr($v), $pos, 1);

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:114: characters 3-23
		$this2 = $this->b;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:114: characters 3-23
		$this2->s = substr_replace($this2->s, chr($v >> 8), $pos + 1, 1);

	}


	/**
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return Bytes
	 */
	public function sub ($pos, $len) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:56: lines 56-60
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $this->length)) {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:57: characters 4-9
			throw new HxException(Error::OutsideBounds());
		} else {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:59: characters 4-42
			return new Bytes($len, new Container(substr($this->b->s, $pos, $len)));
		}
	}


	/**
	 * @return string
	 */
	public function toHex () {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:169: characters 3-27
		$s = new \StringBuf();
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:170: characters 3-18
		$chars = new \Array_hx();
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:171: characters 3-32
		$str = "0123456789abcdef";
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:172: lines 172-173
		$_g1 = 0;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:172: lines 172-173
		$_g = strlen($str);
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:172: lines 172-173
		while ($_g1 < $_g) {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:172: lines 172-173
			$_g1 = $_g1 + 1;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:172: characters 8-9
			$i = $_g1 - 1;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:173: characters 4-33
			$x = (($i < 0) || ($i >= strlen($str)) ? null : ord($str[$i]));
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:173: characters 4-33
			$chars->arr[$chars->length] = $x;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:173: characters 4-33
			++$chars->length;

		}

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:174: lines 174-178
		$_g11 = 0;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:174: lines 174-178
		$_g2 = $this->length;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:174: lines 174-178
		while ($_g11 < $_g2) {
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:174: lines 174-178
			$_g11 = $_g11 + 1;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:174: characters 8-9
			$i1 = $_g11 - 1;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:175: characters 4-19
			$c = ord($this->b->s[$i1]);
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:176: characters 4-5
			$s1 = $s;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:176: characters 4-28
			$s1->b = ($s1->b??'null') . (chr(($chars->arr[$c >> 4] ?? null))??'null');
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:177: characters 4-5
			$s2 = $s;
			#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:177: characters 4-28
			$s2->b = ($s2->b??'null') . (chr(($chars->arr[$c & 15] ?? null))??'null');
		}

		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:179: characters 3-22
		return $s->b;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/Bytes.hx:165: characters 3-11
		return $this->b->s;
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(Bytes::class, 'haxe.io.Bytes');

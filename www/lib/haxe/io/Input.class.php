<?php

// Generated by Haxe 3.4.7
class haxe_io_Input {
	public function __construct(){}
	public $bigEndian;
	public function readByte() {
		$GLOBALS['%s']->push("haxe.io.Input::readByte");
		$__hx__spos = $GLOBALS['%s']->length;
		throw new HException("Not implemented");
		$GLOBALS['%s']->pop();
	}
	public function readBytes($s, $pos, $len) {
		$GLOBALS['%s']->push("haxe.io.Input::readBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		$k = $len;
		$b = $s->b;
		$tmp = null;
		$tmp1 = null;
		if($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $pos + $len > $s->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		try {
			while($k > 0) {
				{
					$val = $this->readByte();
					$b->s[$pos] = chr($val);
					unset($val);
				}
				$pos = $pos + 1;
				$k = $k - 1;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($eof = $_ex_) instanceof haxe_io_Eof){
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
			} else throw $__hx__e;;
		}
		{
			$tmp2 = $len - $k;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function close() {
		$GLOBALS['%s']->push("haxe.io.Input::close");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
	public function set_bigEndian($b) {
		$GLOBALS['%s']->push("haxe.io.Input::set_bigEndian");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->bigEndian = $b;
		{
			$GLOBALS['%s']->pop();
			return $b;
		}
		$GLOBALS['%s']->pop();
	}
	public function readAll($bufsize = null) {
		$GLOBALS['%s']->push("haxe.io.Input::readAll");
		$__hx__spos = $GLOBALS['%s']->length;
		if($bufsize === null) {
			$bufsize = 8192;
		}
		$buf = haxe_io_Bytes::alloc($bufsize);
		$total = new haxe_io_BytesBuffer();
		try {
			while(true) {
				$len = $this->readBytes($buf, 0, $bufsize);
				if($len === 0) {
					throw new HException(haxe_io_Error::$Blocked);
				}
				{
					$tmp = null;
					if($len >= 0) {
						$tmp = $len > $buf->length;
					} else {
						$tmp = true;
					}
					if($tmp) {
						throw new HException(haxe_io_Error::$OutsideBounds);
					}
					$total1 = $total;
					$total2 = $total1->b;
					$this1 = $buf->b;
					$x = new php__BytesData_Wrapper(substr($this1->s, 0, $len));
					$this2 = $x;
					$total1->b = _hx_string_or_null($total2) . _hx_string_or_null($this2->s);
					unset($x,$total2,$total1,$tmp,$this2,$this1);
				}
				unset($len);
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof haxe_io_Eof){
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
			} else throw $__hx__e;;
		}
		{
			$tmp = $total->getBytes();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function readFullBytes($s, $pos, $len) {
		$GLOBALS['%s']->push("haxe.io.Input::readFullBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		while($len > 0) {
			$k = $this->readBytes($s, $pos, $len);
			if($k === 0) {
				throw new HException(haxe_io_Error::$Blocked);
			}
			$pos = $pos + $k;
			$len = $len - $k;
			unset($k);
		}
		$GLOBALS['%s']->pop();
	}
	public function read($nbytes) {
		$GLOBALS['%s']->push("haxe.io.Input::read");
		$__hx__spos = $GLOBALS['%s']->length;
		$s = haxe_io_Bytes::alloc($nbytes);
		$p = 0;
		while($nbytes > 0) {
			$k = $this->readBytes($s, $p, $nbytes);
			if($k === 0) {
				throw new HException(haxe_io_Error::$Blocked);
			}
			$p = $p + $k;
			$nbytes = $nbytes - $k;
			unset($k);
		}
		{
			$GLOBALS['%s']->pop();
			return $s;
		}
		$GLOBALS['%s']->pop();
	}
	public function readUInt16() {
		$GLOBALS['%s']->push("haxe.io.Input::readUInt16");
		$__hx__spos = $GLOBALS['%s']->length;
		$ch1 = $this->readByte();
		$ch2 = $this->readByte();
		if($this->bigEndian) {
			$tmp = $ch2 | $ch1 << 8;
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$tmp = $ch1 | $ch2 << 8;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function readInt32() {
		$GLOBALS['%s']->push("haxe.io.Input::readInt32");
		$__hx__spos = $GLOBALS['%s']->length;
		$ch1 = $this->readByte();
		$ch2 = $this->readByte();
		$ch3 = $this->readByte();
		$ch4 = $this->readByte();
		$n = null;
		if($this->bigEndian) {
			$n = $ch4 | $ch3 << 8 | $ch2 << 16 | $ch1 << 24;
		} else {
			$n = $ch1 | $ch2 << 8 | $ch3 << 16 | $ch4 << 24;
		}
		if(($n & -2147483648) !== 0) {
			$tmp = $n | -2147483648;
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$GLOBALS['%s']->pop();
			return $n;
		}
		$GLOBALS['%s']->pop();
	}
	public function readString($len) {
		$GLOBALS['%s']->push("haxe.io.Input::readString");
		$__hx__spos = $GLOBALS['%s']->length;
		$b = haxe_io_Bytes::alloc($len);
		$this->readFullBytes($b, 0, $len);
		{
			$tmp = $b->toString();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("set_bigEndian" => "set_bigEndian");
	function __toString() { return 'haxe.io.Input'; }
}

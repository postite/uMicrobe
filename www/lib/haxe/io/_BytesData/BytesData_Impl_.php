<?php
/**
 * Generated by Haxe 3.4.7
 * Haxe source file: /usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx
 */

namespace haxe\io\_BytesData;

use \php\Boot;

final class BytesData_Impl_ {


	/**
	 * @param int $length
	 * 
	 * @return Container
	 */
	static public function alloc ($length) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:36: characters 2-49
		return new Container(str_repeat(chr(0), $length));
	}


	/**
	 * @param Container $this
	 * @param int $pos
	 * @param Container $src
	 * @param int $srcpos
	 * @param int $len
	 * 
	 * @return void
	 */
	static public function blit ($this1, $pos, $src, $srcpos, $len) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:62: characters 2-145
		$this1->s = ((substr($this1->s, 0, $pos) . substr($src->s, $srcpos, $len)) . substr($this1->s, $pos + $len));
	}


	/**
	 * @param Container $this
	 * @param Container $other
	 * 
	 * @return int
	 */
	static public function compare ($this1, $other) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:50: characters 2-57
		return ($this1->s <=> $other->s);
	}


	/**
	 * @param mixed $s
	 * 
	 * @return Container
	 */
	static public function fromNativeString ($s) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:71: characters 2-25
		return new Container($s);
	}


	/**
	 * @param string $s
	 * 
	 * @return Container
	 */
	static public function fromString ($s) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:81: characters 2-25
		return new Container($s);
	}


	/**
	 * @param Container $this
	 * @param int $pos
	 * 
	 * @return int
	 */
	static public function get ($this1, $pos) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:41: characters 2-32
		return ord($this1->s[$pos]);
	}


	/**
	 * @param Container $this
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	static public function getString ($this1, $pos, $len) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:54: characters 2-40
		return substr($this1->s, $pos, $len);
	}


	/**
	 * @param Container $this
	 * 
	 * @return int
	 */
	static public function get_length ($this1) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:66: characters 2-30
		return strlen($this1->s);
	}


	/**
	 * @param Container $this
	 * @param int $index
	 * @param int $val
	 * 
	 * @return void
	 */
	static public function set ($this1, $index, $val) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:46: characters 2-67
		$this1->s = substr_replace($this1->s, chr($val), $index, 1);
	}


	/**
	 * @param Container $this
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return Container
	 */
	static public function sub ($this1, $pos, $len) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:58: characters 2-49
		return new Container(substr($this1->s, $pos, $len));
	}


	/**
	 * @param Container $this
	 * 
	 * @return mixed
	 */
	static public function toNativeString ($this1) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:76: characters 2-15
		return $this1->s;
	}


	/**
	 * @param Container $this
	 * 
	 * @return string
	 */
	static public function toString ($this1) {
		#/usr/local/lib/haxe/std/php7/_std/haxe/io/BytesData.hx:86: characters 2-15
		return $this1->s;
	}
}


Boot::registerClass(BytesData_Impl_::class, 'haxe.io._BytesData.BytesData_Impl_');
Boot::registerGetters('haxe\\io\\_BytesData\\BytesData_Impl_', [
	'length' => true
]);

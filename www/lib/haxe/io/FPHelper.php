<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/php/_std/haxe/io/FPHelper.hx
 */

namespace haxe\io;

use \haxe\_Int64\___Int64;
use \php\Boot;

/**
 * Helper that converts between floating point and binary representation.
 * Always works in low-endian encoding.
 */
class FPHelper {
	/**
	 * @var ___Int64
	 */
	static public $i64tmp;
	/**
	 * @var bool
	 */
	static public $isLittleEndian;


	/**
	 * Returns an Int64 representing the bytes representation of the double precision IEEE float value.
	 * WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.
	 * We still ensure that this is safe to use in a multithread environment
	 * 
	 * @param float $v
	 * 
	 * @return ___Int64
	 */
	static public function doubleToI64 ($v) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/FPHelper.hx:53: characters 3-76
		$a = unpack((FPHelper::$isLittleEndian ? "V2" : "N2"), pack("d", $v));
		#/usr/local/lib/haxe/std/php/_std/haxe/io/FPHelper.hx:54: characters 3-20
		$i64 = FPHelper::$i64tmp;
		#/usr/local/lib/haxe/std/php/_std/haxe/io/FPHelper.hx:55: characters 19-57
		$i64->low = $a[(FPHelper::$isLittleEndian ? 1 : 2)];
		#/usr/local/lib/haxe/std/php/_std/haxe/io/FPHelper.hx:56: characters 19-58
		$i64->high = $a[(FPHelper::$isLittleEndian ? 2 : 1)];
		#/usr/local/lib/haxe/std/php/_std/haxe/io/FPHelper.hx:58: characters 3-13
		return $i64;
	}


	/**
	 * @param float $f
	 * 
	 * @return int
	 */
	static public function floatToI32 ($f) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/FPHelper.hx:40: characters 3-52
		return unpack("l", pack("f", $f))[1];
	}


	/**
	 * @param int $i
	 * 
	 * @return float
	 */
	static public function i32ToFloat ($i) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/FPHelper.hx:36: characters 3-52
		return unpack("f", pack("l", $i))[1];
	}


	/**
	 * @param int $low
	 * @param int $high
	 * 
	 * @return float
	 */
	static public function i64ToDouble ($low, $high) {
		#/usr/local/lib/haxe/std/php/_std/haxe/io/FPHelper.hx:44: characters 3-108
		return unpack("d", pack("ii", (FPHelper::$isLittleEndian ? $low : $high), (FPHelper::$isLittleEndian ? $high : $low)))[1];
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$isLittleEndian = Boot::equal(unpack("S", "\x01\x00")[1], 1);
$this1 = new ___Int64(0, 0);
self::$i64tmp = $this1;
	}
}


Boot::registerClass(FPHelper::class, 'haxe.io.FPHelper');
FPHelper::__hx__init();

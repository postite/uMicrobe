<?php

// Generated by Haxe 3.4.7
class haxe_io_Bytes {
	public function __construct($length, $b) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("haxe.io.Bytes::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->length = $length;
		$this->b = $b;
		$GLOBALS['%s']->pop();
	}}
	public $length;
	public $b;
	public function blit($pos, $src, $srcpos, $len) {
		$GLOBALS['%s']->push("haxe.io.Bytes::blit");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		$tmp3 = null;
		if($pos >= 0) {
			$tmp3 = $srcpos < 0;
		} else {
			$tmp3 = true;
		}
		if(!$tmp3) {
			$tmp2 = $len < 0;
		} else {
			$tmp2 = true;
		}
		if(!$tmp2) {
			$tmp1 = $pos + $len > $this->length;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $srcpos + $len > $src->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		{
			$this1 = $this->b;
			$src1 = $src->b;
			$this1->s = substr($this1->s, 0, $pos) . substr($src1->s, $srcpos, $len) . substr($this1->s, $pos+$len);
		}
		$GLOBALS['%s']->pop();
	}
	public function sub($pos, $len) {
		$GLOBALS['%s']->push("haxe.io.Bytes::sub");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = null;
		if($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $pos + $len > $this->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		$this1 = $this->b;
		$x = new php__BytesData_Wrapper(substr($this1->s, $pos, $len));
		$this2 = $x;
		{
			$tmp2 = new haxe_io_Bytes($len, $this2);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function compare($other) {
		$GLOBALS['%s']->push("haxe.io.Bytes::compare");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = $this->b;
		$other1 = $other->b;
		{
			$tmp = $this1->s < $other1->s ? -1 : ($this1->s == $other1->s ? 0 : 1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getString($pos, $len) {
		$GLOBALS['%s']->push("haxe.io.Bytes::getString");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		$tmp1 = null;
		if($pos >= 0) {
			$tmp1 = $len < 0;
		} else {
			$tmp1 = true;
		}
		if(!$tmp1) {
			$tmp = $pos + $len > $this->length;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException(haxe_io_Error::$OutsideBounds);
		}
		$this1 = $this->b;
		{
			$tmp2 = substr($this1->s, $pos, $len);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function toString() {
		$GLOBALS['%s']->push("haxe.io.Bytes::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->b->s;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function alloc($length) {
		$GLOBALS['%s']->push("haxe.io.Bytes::alloc");
		$__hx__spos = $GLOBALS['%s']->length;
		$x = new php__BytesData_Wrapper(str_repeat(chr(0), $length));
		$this1 = $x;
		{
			$tmp = new haxe_io_Bytes($length, $this1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function ofString($s) {
		$GLOBALS['%s']->push("haxe.io.Bytes::ofString");
		$__hx__spos = $GLOBALS['%s']->length;
		$x = new php__BytesData_Wrapper($s);
		$this1 = $x;
		$x1 = $this1;
		{
			$tmp = new haxe_io_Bytes(strlen($x1->s), $x1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function ofData($b) {
		$GLOBALS['%s']->push("haxe.io.Bytes::ofData");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new haxe_io_Bytes(strlen($b->s), $b);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fastGet($b, $pos) {
		$GLOBALS['%s']->push("haxe.io.Bytes::fastGet");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ord($b->s[$pos]);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return $this->toString(); }
}

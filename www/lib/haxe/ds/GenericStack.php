<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/ds/GenericStack.hx
 */

namespace haxe\ds;

use \php\Boot;
use \php\_Boot\HxAnon;

/**
 * A stack of elements.
 * This class is generic, which means one type is generated for each type
 * parameter T on static targets. For example:
 * - `new GenericStack<Int>()` generates `GenericStack_Int`
 * - `new GenericStack<String>()` generates `GenericStack_String`
 * The generated name is an implementation detail and should not be relied
 * upon.
 * @see https://haxe.org/manual/std-GenericStack.html
 */
class GenericStack {
	/**
	 * @var GenericCell
	 */
	public $head;


	/**
	 * Creates a new empty GenericStack.
	 * 
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * Pushes element `item` onto the stack.
	 * 
	 * @param mixed $item
	 * 
	 * @return void
	 */
	public function add ($item) {
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:92: characters 3-39
		$this->head = new GenericCell($item, $this->head);
	}


	/**
	 * Returns the topmost stack element without removing it.
	 * If the stack is empty, null is returned.
	 * 
	 * @return mixed
	 */
	public function first () {
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:101: characters 10-47
		if ($this->head === null) {
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:101: characters 29-33
			return null;
		} else {
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:101: characters 39-47
			return $this->head->elt;
		}
	}


	/**
	 * Tells if the stack is empty.
	 * 
	 * @return bool
	 */
	public function isEmpty () {
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:123: characters 3-24
		return $this->head === null;
	}


	/**
	 * Returns an iterator over the elements of `this` GenericStack.
	 * 
	 * @return object
	 */
	public function iterator () {
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:167: characters 3-16
		$l = $this->head;
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:168: lines 168-177
		return new HxAnon([
			"hasNext" => function ()  use (&$l) {
				#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:170: characters 5-21
				return $l !== null;
			},
			"next" => function ()  use (&$l) {
				#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:173: characters 5-15
				$k = $l;
				#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:174: characters 5-15
				$l = $k->next;
				#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:175: characters 5-17
				return $k->elt;
			},
		]);
	}


	/**
	 * Returns the topmost stack element and removes it.
	 * If the stack is empty, null is returned.
	 * 
	 * @return mixed
	 */
	public function pop () {
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:110: characters 3-16
		$k = $this->head;
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:111: lines 111-116
		if ($k === null) {
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:112: characters 4-15
			return null;
		} else {
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:114: characters 4-17
			$this->head = $k->next;
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:115: characters 4-16
			return $k->elt;
		}
	}


	/**
	 * Removes the first element which is equal to `v` according to the `==`
	 * operator.
	 * This method traverses the stack until it finds a matching element and
	 * unlinks it, returning true.
	 * If no matching element is found, false is returned.
	 * 
	 * @param mixed $v
	 * 
	 * @return bool
	 */
	public function remove ($v) {
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:136: characters 3-34
		$prev = null;
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:137: characters 3-16
		$l = $this->head;
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:138: lines 138-148
		while ($l !== null) {
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:139: lines 139-145
			if (Boot::equal($l->elt, $v)) {
				#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:140: lines 140-143
				if ($prev === null) {
					#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:141: characters 6-19
					$this->head = $l->next;
				} else {
					#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:143: characters 6-24
					$prev->next = $l->next;
				}
				#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:144: characters 5-10
				break;
			}
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:146: characters 4-12
			$prev = $l;
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:147: characters 4-14
			$l = $l->next;
		}
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:149: characters 3-21
		return $l !== null;
	}


	/**
	 * Returns a String representation of `this` GenericStack.
	 * 
	 * @return string
	 */
	public function toString () {
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:185: characters 3-23
		$a = new \Array_hx();
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:186: characters 3-16
		$l = $this->head;
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:187: lines 187-190
		while ($l !== null) {
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:188: characters 4-17
			$a->arr[$a->length] = $l->elt;
			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:188: characters 4-17
			++$a->length;

			#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:189: characters 4-14
			$l = $l->next;
		}
		#/usr/local/lib/haxe/std/haxe/ds/GenericStack.hx:191: characters 3-29
		return "{" . ($a->join(",")??'null') . "}";
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(GenericStack::class, 'haxe.ds.GenericStack');

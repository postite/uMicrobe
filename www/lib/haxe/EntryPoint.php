<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/EntryPoint.hx
 */

namespace haxe;

use \php\Boot;
use \haxe\_EntryPoint\Lock;
use \haxe\_EntryPoint\Mutex;
use \haxe\_EntryPoint\Thread;

/**
 * If haxe.MainLoop is kept from DCE, then we will insert an haxe.EntryPoint.run() call just at then end of main().
 * This class can be redefined by custom frameworks so they can handle their own main loop logic.
 */
class EntryPoint {
	/**
	 * @var Mutex
	 */
	static public $mutex;
	/**
	 * @var \Array_hx
	 */
	static public $pending;
	/**
	 * @var Lock
	 */
	static public $sleepLock;
	/**
	 * @var int
	 */
	static public $threadCount = 0;


	/**
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	static public function addThread ($f) {
		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:76: characters 3-16
		EntryPoint::$threadCount++;
		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:78: lines 78-84
		Thread::create(function ()  use (&$f) {
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:79: characters 4-7
			$f();
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:81: characters 4-17
			EntryPoint::$threadCount--;
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:82: characters 4-35
			if (EntryPoint::$threadCount === 0) {
				#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:82: characters 27-35
				EntryPoint::wakeup();
			}
		});
	}


	/**
	 * @return float
	 */
	static public function processEvents () {
		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:93: lines 93-103
		while (true) {
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:96: characters 12-27
			$_this = EntryPoint::$pending;
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:96: characters 12-27
			if ($_this->length > 0) {
				#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:96: characters 12-27
				$_this->length--;
			}
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:96: characters 4-28
			$f = array_shift($_this->arr);
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:101: characters 4-25
			if ($f === null) {
				#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:101: characters 20-25
				break;
			}
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:102: characters 4-7
			$f();
		}
		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:104: lines 104-105
		if (!MainLoop::hasEvents() && (EntryPoint::$threadCount === 0)) {
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:105: characters 4-13
			return -1;
		}
		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:106: characters 3-41
		return MainLoop::tick();
	}


	/**
	 * Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.
	 * 
	 * @return void
	 */
	static public function run () {
		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:134: lines 134-140
		while (true) {
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:135: characters 4-35
			$nextTick = EntryPoint::processEvents();
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:136: lines 136-137
			if ($nextTick < 0) {
				#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:137: characters 5-10
				break;
			}
			#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:138: characters 8-20
			$tmp = $nextTick > 0;
		}
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	static public function runInMainThread ($f) {
		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:65: characters 3-18
		$_this = EntryPoint::$pending;
		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:65: characters 3-18
		$_this->arr[$_this->length] = $f;
		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:65: characters 3-18
		++$_this->length;

		#/usr/local/lib/haxe/std/haxe/EntryPoint.hx:67: characters 3-11
		EntryPoint::wakeup();
	}


	/**
	 * Wakeup a sleeping run()
	 * 
	 * @return void
	 */
	static public function wakeup () {
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$sleepLock = new Lock();
self::$mutex = new Mutex();
self::$pending = new \Array_hx();
	}
}


Boot::registerClass(EntryPoint::class, 'haxe.EntryPoint');
EntryPoint::__hx__init();

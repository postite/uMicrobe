<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/Unserializer.hx
 */

namespace haxe\_Unserializer;

use \php\Boot;

class NullResolver {
	/**
	 * @var NullResolver
	 */
	static public $instance;


	/**
	 * @return NullResolver
	 */
	static public function get_instance () {
		#/usr/local/lib/haxe/std/haxe/Unserializer.hx:489: characters 3-54
		if (NullResolver::$instance === null) {
			#/usr/local/lib/haxe/std/haxe/Unserializer.hx:489: characters 25-54
			NullResolver::$instance = new NullResolver();
		}
		#/usr/local/lib/haxe/std/haxe/Unserializer.hx:490: characters 3-18
		return NullResolver::$instance;
	}


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param string $name
	 * 
	 * @return Class
	 */
	final public function resolveClass ($name) {
		#/usr/local/lib/haxe/std/haxe/Unserializer.hx:485: characters 74-85
		return null;
	}


	/**
	 * @param string $name
	 * 
	 * @return Enum
	 */
	final public function resolveEnum ($name) {
		#/usr/local/lib/haxe/std/haxe/Unserializer.hx:486: characters 72-83
		return null;
	}
}


Boot::registerClass(NullResolver::class, 'haxe._Unserializer.NullResolver');
Boot::registerGetters('haxe\\_Unserializer\\NullResolver', [
	'instance' => true
]);

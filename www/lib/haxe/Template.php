<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/Template.hx
 */

namespace haxe;

use \php\_Boot\HxClosure;
use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxString;
use \haxe\ds\List_hx;
use \php\_Boot\HxAnon;
use \haxe\_Template\TemplateExpr;

/**
 * Template provides a basic templating mechanism to replace values in a source
 * String, and to have some basic logic.
 * A complete documentation of the supported syntax is available at:
 * <https://haxe.org/manual/std-template.html>
 */
class Template {
	/**
	 * @var \EReg
	 */
	static public $expr_float;
	/**
	 * @var \EReg
	 */
	static public $expr_int;
	/**
	 * @var \EReg
	 */
	static public $expr_splitter;
	/**
	 * @var \EReg
	 */
	static public $expr_trim;
	/**
	 * @var mixed
	 * Global replacements which are used across all Template instances. This
	 * has lower priority than the context argument of execute().
	 */
	static public $globals;
	/**
	 * @var \EReg
	 */
	static public $splitter;


	/**
	 * @var \StringBuf
	 */
	public $buf;
	/**
	 * @var mixed
	 */
	public $context;
	/**
	 * @var TemplateExpr
	 */
	public $expr;
	/**
	 * @var mixed
	 */
	public $macros;
	/**
	 * @var List_hx
	 */
	public $stack;


	/**
	 * Creates a new Template instance from `str`.
	 * `str` is parsed into tokens, which are stored for internal use. This
	 * means that multiple execute() operations on a single Template instance
	 * are more efficient than one execute() operations on multiple Template
	 * instances.
	 * If `str` is null, the result is unspecified.
	 * 
	 * @param string $str
	 * 
	 * @return void
	 */
	public function __construct ($str) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:85: characters 3-33
		$tokens = $this->parseTokens($str);
		#/usr/local/lib/haxe/std/haxe/Template.hx:86: characters 3-28
		$this->expr = $this->parseBlock($tokens);
		#/usr/local/lib/haxe/std/haxe/Template.hx:87: lines 87-88
		if (!$tokens->isEmpty()) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:88: characters 4-9
			throw new HxException("Unexpected '" . (\Std::string($tokens->first()->s)??'null') . "'");
		}
	}


	/**
	 * Executes `this` Template, taking into account `context` for
	 * replacements and `macros` for callback functions.
	 * If `context` has a field 'name', its value replaces all occurrences of
	 * ::name:: in the Template. Otherwise Template.globals is checked instead,
	 * If 'name' is not a field of that either, ::name:: is replaced with null.
	 * If `macros` has a field 'name', all occurrences of $$name(args) are
	 * replaced with the result of calling that field. The first argument is
	 * always the resolve() method, followed by the given arguments.
	 * If `macros` has no such field, the result is unspecified.
	 * If `context` is null, the result is unspecified. If `macros` is null,
	 * no macros are used.
	 * 
	 * @param mixed $context
	 * @param mixed $macros
	 * 
	 * @return string
	 */
	public function execute ($context, $macros = null) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:108: characters 3-52
		$this->macros = ($macros === null ? new HxAnon() : $macros);
		#/usr/local/lib/haxe/std/haxe/Template.hx:109: characters 3-25
		$this->context = $context;
		#/usr/local/lib/haxe/std/haxe/Template.hx:110: characters 3-21
		$this->stack = new List_hx();
		#/usr/local/lib/haxe/std/haxe/Template.hx:111: characters 3-24
		$this->buf = new \StringBuf();
		#/usr/local/lib/haxe/std/haxe/Template.hx:112: characters 3-12
		$this->run($this->expr);
		#/usr/local/lib/haxe/std/haxe/Template.hx:113: characters 3-24
		return $this->buf->b;
	}


	/**
	 * @param string $v
	 * 
	 * @return \Closure
	 */
	public function makeConst ($v) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:273: characters 3-21
		Template::$expr_trim->match($v);
		#/usr/local/lib/haxe/std/haxe/Template.hx:274: characters 3-27
		$v = Template::$expr_trim->matched(1);
		#/usr/local/lib/haxe/std/haxe/Template.hx:275: lines 275-278
		if (((0 >= strlen($v) ? null : ord($v[0]))) === 34) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:276: characters 4-37
			$str = HxString::substr($v, 1, strlen($v) - 2);
			#/usr/local/lib/haxe/std/haxe/Template.hx:277: characters 4-32
			return function ()  use (&$str) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:277: characters 22-32
				return $str;
			};
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:279: lines 279-282
		if (Template::$expr_int->match($v)) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:280: characters 4-28
			$i = \Std::parseInt($v);
			#/usr/local/lib/haxe/std/haxe/Template.hx:281: characters 4-35
			return function ()  use (&$i) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:281: characters 24-32
				return $i;
			};
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:283: lines 283-286
		if (Template::$expr_float->match($v)) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:284: characters 4-30
			$f = \Std::parseFloat($v);
			#/usr/local/lib/haxe/std/haxe/Template.hx:285: characters 4-35
			return function ()  use (&$f) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:285: characters 24-32
				return $f;
			};
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:287: characters 3-17
		$me = $this;
		#/usr/local/lib/haxe/std/haxe/Template.hx:288: characters 3-46
		return function ()  use (&$v, &$me) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:288: characters 23-43
			return $me->resolve($v);
		};
	}


	/**
	 * @param List_hx $l
	 * 
	 * @return \Closure
	 */
	public function makeExpr ($l) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:306: characters 3-34
		return $this->makePath($this->makeExpr2($l), $l);
	}


	/**
	 * @param List_hx $l
	 * 
	 * @return \Closure
	 */
	public function makeExpr2 ($l) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:310: characters 3-19
		$p = $l->pop();
		#/usr/local/lib/haxe/std/haxe/Template.hx:311: lines 311-312
		if ($p === null) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:312: characters 4-9
			throw new HxException("<eof>");
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:313: lines 313-314
		if ($p->s) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:314: characters 4-25
			return $this->makeConst($p->p);
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:315: characters 11-14
		$_g = $p->p;
		#/usr/local/lib/haxe/std/haxe/Template.hx:315: characters 11-14
		switch ($_g) {
			case "!":
				#/usr/local/lib/haxe/std/haxe/Template.hx:343: characters 4-40
				$e = $this->makeExpr($l);
				#/usr/local/lib/haxe/std/haxe/Template.hx:344: lines 344-347
				return function ()  use (&$e) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:345: characters 5-27
					$v = $e();
					#/usr/local/lib/haxe/std/haxe/Template.hx:346: characters 12-37
					if ($v !== null) {
						#/usr/local/lib/haxe/std/haxe/Template.hx:346: characters 26-36
						return $v === false;
					} else {
						#/usr/local/lib/haxe/std/haxe/Template.hx:346: characters 12-37
						return true;
					}
				};
				break;
			case "(":
				#/usr/local/lib/haxe/std/haxe/Template.hx:317: characters 4-33
				$e1 = $this->makeExpr($l);
				#/usr/local/lib/haxe/std/haxe/Template.hx:318: characters 4-20
				$p1 = $l->pop();
				#/usr/local/lib/haxe/std/haxe/Template.hx:319: lines 319-320
				if (($p1 === null) || $p1->s) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:320: characters 5-10
					throw new HxException($p1);
				}
				#/usr/local/lib/haxe/std/haxe/Template.hx:321: lines 321-322
				if ($p1->p === ")") {
					#/usr/local/lib/haxe/std/haxe/Template.hx:322: characters 5-14
					return $e1;
				}
				#/usr/local/lib/haxe/std/haxe/Template.hx:323: characters 4-33
				$e2 = $this->makeExpr($l);
				#/usr/local/lib/haxe/std/haxe/Template.hx:324: characters 4-21
				$p2 = $l->pop();
				#/usr/local/lib/haxe/std/haxe/Template.hx:325: lines 325-326
				if (($p2 === null) || ($p2->p !== ")")) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:326: characters 5-10
					throw new HxException($p2);
				}
				#/usr/local/lib/haxe/std/haxe/Template.hx:327: characters 19-22
				$_g1 = $p1->p;
				#/usr/local/lib/haxe/std/haxe/Template.hx:327: characters 19-22
				switch ($_g1) {
					case "!=":
						#/usr/local/lib/haxe/std/haxe/Template.hx:337: characters 15-55
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:337: characters 28-52
							return !Boot::equal($e1(), $e2());
						};
						break;
					case "&&":
						#/usr/local/lib/haxe/std/haxe/Template.hx:338: characters 15-55
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:338: characters 28-52
							return $e1() && $e2();
						};
						break;
					case "*":
						#/usr/local/lib/haxe/std/haxe/Template.hx:330: characters 14-53
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:330: characters 27-50
							return $e1() * $e2();
						};
						break;
					case "+":
						#/usr/local/lib/haxe/std/haxe/Template.hx:328: characters 14-53
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:328: characters 27-50
							return Boot::addOrConcat($e1(), $e2());
						};
						break;
					case "-":
						#/usr/local/lib/haxe/std/haxe/Template.hx:329: characters 14-53
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:329: characters 27-50
							return $e1() - $e2();
						};
						break;
					case "/":
						#/usr/local/lib/haxe/std/haxe/Template.hx:331: characters 14-53
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:331: characters 27-50
							return $e1() / $e2();
						};
						break;
					case "<":
						#/usr/local/lib/haxe/std/haxe/Template.hx:333: characters 14-53
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:333: characters 27-50
							return $e1() < $e2();
						};
						break;
					case "<=":
						#/usr/local/lib/haxe/std/haxe/Template.hx:335: characters 15-55
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:335: characters 28-52
							return $e1() <= $e2();
						};
						break;
					case "==":
						#/usr/local/lib/haxe/std/haxe/Template.hx:336: characters 15-55
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:336: characters 28-52
							return Boot::equal($e1(), $e2());
						};
						break;
					case ">":
						#/usr/local/lib/haxe/std/haxe/Template.hx:332: characters 14-53
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:332: characters 27-50
							return $e1() > $e2();
						};
						break;
					case ">=":
						#/usr/local/lib/haxe/std/haxe/Template.hx:334: characters 15-55
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:334: characters 28-52
							return $e1() >= $e2();
						};
						break;
					case "||":
						#/usr/local/lib/haxe/std/haxe/Template.hx:339: characters 15-55
						return function ()  use (&$e1, &$e2) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:339: characters 28-52
							return $e1() || $e2();
						};
						break;
					default:
						#/usr/local/lib/haxe/std/haxe/Template.hx:340: characters 13-18
						throw new HxException("Unknown operation " . ($p1->p??'null'));
						break;
				}
				break;
			case "-":
				#/usr/local/lib/haxe/std/haxe/Template.hx:349: characters 4-24
				$e3 = $this->makeExpr($l);
				#/usr/local/lib/haxe/std/haxe/Template.hx:350: characters 4-38
				return function ()  use (&$e3) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:350: characters 24-35
					return -$e3();
				};
				break;
		}

		#/usr/local/lib/haxe/std/haxe/Template.hx:352: characters 3-8
		throw new HxException($p->p);
	}


	/**
	 * @param \Closure $e
	 * @param List_hx $l
	 * 
	 * @return \Closure
	 */
	public function makePath ($e, $l) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:292: characters 3-21
		$p = $l->first();
		#/usr/local/lib/haxe/std/haxe/Template.hx:293: lines 293-294
		if (($p === null) || ($p->p !== ".")) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:294: characters 4-12
			return $e;
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:295: characters 3-10
		$l->pop();
		#/usr/local/lib/haxe/std/haxe/Template.hx:296: characters 3-23
		$field = $l->pop();
		#/usr/local/lib/haxe/std/haxe/Template.hx:297: lines 297-298
		if (($field === null) || !$field->s) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:298: characters 4-9
			throw new HxException($field->p);
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:299: characters 3-19
		$f = $field->p;
		#/usr/local/lib/haxe/std/haxe/Template.hx:300: characters 3-21
		Template::$expr_trim->match($f);
		#/usr/local/lib/haxe/std/haxe/Template.hx:301: characters 3-27
		$f = Template::$expr_trim->matched(1);
		#/usr/local/lib/haxe/std/haxe/Template.hx:302: characters 3-65
		return $this->makePath(function ()  use (&$f, &$e) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:302: characters 32-59
			return \Reflect::field($e(), $f);
		}, $l);
	}


	/**
	 * @param List_hx $tokens
	 * 
	 * @return TemplateExpr
	 */
	public function parse ($tokens) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:192: characters 3-24
		$t = $tokens->pop();
		#/usr/local/lib/haxe/std/haxe/Template.hx:193: characters 3-15
		$p = $t->p;
		#/usr/local/lib/haxe/std/haxe/Template.hx:194: lines 194-195
		if ($t->s) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:195: characters 4-19
			return TemplateExpr::OpStr($p);
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:197: lines 197-202
		if ($t->l !== null) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:198: characters 4-24
			$pe = new List_hx();
			#/usr/local/lib/haxe/std/haxe/Template.hx:199: lines 199-200
			$_g = 0;
			#/usr/local/lib/haxe/std/haxe/Template.hx:199: lines 199-200
			$_g1 = $t->l;
			#/usr/local/lib/haxe/std/haxe/Template.hx:199: lines 199-200
			while ($_g < $_g1->length) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:199: characters 9-10
				$p1 = ($_g1->arr[$_g] ?? null);
				#/usr/local/lib/haxe/std/haxe/Template.hx:199: lines 199-200
				$_g = $_g + 1;
				#/usr/local/lib/haxe/std/haxe/Template.hx:200: characters 5-39
				$pe->add($this->parseBlock($this->parseTokens($p1)));
			}

			#/usr/local/lib/haxe/std/haxe/Template.hx:201: characters 4-24
			return TemplateExpr::OpMacro($p, $pe);
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:204: lines 204-226
		if (HxString::substr($p, 0, 3) === "if ") {
			#/usr/local/lib/haxe/std/haxe/Template.hx:205: characters 4-32
			$p = HxString::substr($p, 3, strlen($p) - 3);
			#/usr/local/lib/haxe/std/haxe/Template.hx:206: characters 4-25
			$e = $this->parseExpr($p);
			#/usr/local/lib/haxe/std/haxe/Template.hx:207: characters 4-33
			$eif = $this->parseBlock($tokens);
			#/usr/local/lib/haxe/std/haxe/Template.hx:208: characters 4-27
			$t1 = $tokens->first();
			#/usr/local/lib/haxe/std/haxe/Template.hx:209: characters 4-14
			$eelse = null;
			#/usr/local/lib/haxe/std/haxe/Template.hx:210: lines 210-211
			if ($t1 === null) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:211: characters 5-10
				throw new HxException("Unclosed 'if'");
			}
			#/usr/local/lib/haxe/std/haxe/Template.hx:212: lines 212-224
			if ($t1->p === "end") {
				#/usr/local/lib/haxe/std/haxe/Template.hx:213: characters 5-17
				$tokens->pop();
				#/usr/local/lib/haxe/std/haxe/Template.hx:214: characters 5-17
				$eelse = null;
			} else if ($t1->p === "else") {
				#/usr/local/lib/haxe/std/haxe/Template.hx:216: characters 5-17
				$tokens->pop();
				#/usr/local/lib/haxe/std/haxe/Template.hx:217: characters 5-31
				$eelse = $this->parseBlock($tokens);
				#/usr/local/lib/haxe/std/haxe/Template.hx:218: characters 5-21
				$t1 = $tokens->pop();
				#/usr/local/lib/haxe/std/haxe/Template.hx:219: lines 219-220
				if (($t1 === null) || ($t1->p !== "end")) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:220: characters 6-11
					throw new HxException("Unclosed 'else'");
				}
			} else {
				#/usr/local/lib/haxe/std/haxe/Template.hx:222: characters 5-39
				$t1->p = HxString::substr($t1->p, 4, strlen($t1->p) - 4);
				#/usr/local/lib/haxe/std/haxe/Template.hx:223: characters 5-26
				$eelse = $this->parse($tokens);
			}
			#/usr/local/lib/haxe/std/haxe/Template.hx:225: characters 4-28
			return TemplateExpr::OpIf($e, $eif, $eelse);
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:227: lines 227-235
		if (HxString::substr($p, 0, 8) === "foreach ") {
			#/usr/local/lib/haxe/std/haxe/Template.hx:228: characters 4-32
			$p = HxString::substr($p, 8, strlen($p) - 8);
			#/usr/local/lib/haxe/std/haxe/Template.hx:229: characters 4-25
			$e1 = $this->parseExpr($p);
			#/usr/local/lib/haxe/std/haxe/Template.hx:230: characters 4-34
			$efor = $this->parseBlock($tokens);
			#/usr/local/lib/haxe/std/haxe/Template.hx:231: characters 4-25
			$t2 = $tokens->pop();
			#/usr/local/lib/haxe/std/haxe/Template.hx:232: lines 232-233
			if (($t2 === null) || ($t2->p !== "end")) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:233: characters 5-10
				throw new HxException("Unclosed 'foreach'");
			}
			#/usr/local/lib/haxe/std/haxe/Template.hx:234: characters 4-28
			return TemplateExpr::OpForeach($e1, $efor);
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:236: lines 236-237
		if (Template::$expr_splitter->match($p)) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:237: characters 4-31
			return TemplateExpr::OpExpr($this->parseExpr($p));
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:238: characters 3-18
		return TemplateExpr::OpVar($p);
	}


	/**
	 * @param List_hx $tokens
	 * 
	 * @return TemplateExpr
	 */
	public function parseBlock ($tokens) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:177: characters 3-22
		$l = new List_hx();
		#/usr/local/lib/haxe/std/haxe/Template.hx:178: lines 178-185
		while (true) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:179: characters 4-27
			$t = $tokens->first();
			#/usr/local/lib/haxe/std/haxe/Template.hx:180: lines 180-181
			if ($t === null) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:181: characters 5-10
				break;
			}
			#/usr/local/lib/haxe/std/haxe/Template.hx:182: lines 182-183
			if (!$t->s && (($t->p === "end") || ($t->p === "else") || (HxString::substr($t->p, 0, 7) === "elseif "))) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:183: characters 5-10
				break;
			}
			#/usr/local/lib/haxe/std/haxe/Template.hx:184: characters 4-24
			$l->add($this->parse($tokens));
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:186: lines 186-187
		if ($l->length === 1) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:187: characters 4-20
			return $l->first();
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:188: characters 3-20
		return TemplateExpr::OpBlock($l);
	}


	/**
	 * @param string $data
	 * 
	 * @return \Closure
	 */
	public function parseExpr ($data) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:242: characters 3-33
		$l = new List_hx();
		#/usr/local/lib/haxe/std/haxe/Template.hx:243: characters 3-19
		$expr = $data;
		#/usr/local/lib/haxe/std/haxe/Template.hx:244: lines 244-252
		while (Template::$expr_splitter->match($data)) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:245: characters 4-39
			$p = Template::$expr_splitter->matchedPos();
			#/usr/local/lib/haxe/std/haxe/Template.hx:246: characters 4-26
			$k = $p->pos + $p->len;
			#/usr/local/lib/haxe/std/haxe/Template.hx:247: lines 247-248
			if ($p->pos !== 0) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:248: characters 5-50
				$l->add(new HxAnon([
					"p" => HxString::substr($data, 0, $p->pos),
					"s" => true,
				]));
			}
			#/usr/local/lib/haxe/std/haxe/Template.hx:249: characters 4-37
			$p1 = Template::$expr_splitter->matched(0);
			#/usr/local/lib/haxe/std/haxe/Template.hx:250: characters 4-45
			$l->add(new HxAnon([
				"p" => $p1,
				"s" => HxString::indexOf($p1, "\"") >= 0,
			]));
			#/usr/local/lib/haxe/std/haxe/Template.hx:251: characters 4-39
			$data = Template::$expr_splitter->matchedRight();
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:253: lines 253-254
		if (strlen($data) !== 0) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:254: characters 4-33
			$l->add(new HxAnon([
				"p" => $data,
				"s" => true,
			]));
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:255: characters 3-23
		$e = null;
		#/usr/local/lib/haxe/std/haxe/Template.hx:256: lines 256-262
		try {
			#/usr/local/lib/haxe/std/haxe/Template.hx:257: characters 4-19
			$e = $this->makeExpr($l);
			#/usr/local/lib/haxe/std/haxe/Template.hx:258: lines 258-259
			if (!$l->isEmpty()) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:259: characters 5-10
				throw new HxException($l->first()->p);
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if (is_string($__hx__real_e)) {
				$s = $__hx__real_e;
				#/usr/local/lib/haxe/std/haxe/Template.hx:261: characters 4-9
				throw new HxException("Unexpected '" . ($s??'null') . "' in " . ($expr??'null'));
			} else  throw $__hx__caught_e;
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:263: lines 263-269
		return function ()  use (&$e, &$expr, &$exc) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:264: lines 264-268
			try {
				#/usr/local/lib/haxe/std/haxe/Template.hx:265: characters 5-15
				return $e();
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$exc = $__hx__real_e;
				#/usr/local/lib/haxe/std/haxe/Template.hx:267: characters 5-10
				throw new HxException("Error : " . (\Std::string($exc)??'null') . " in " . ($expr??'null'));
			}
		};
	}


	/**
	 * @param string $data
	 * 
	 * @return List_hx
	 */
	public function parseTokens ($data) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:131: characters 3-34
		$tokens = new List_hx();
		#/usr/local/lib/haxe/std/haxe/Template.hx:132: lines 132-170
		while (Template::$splitter->match($data)) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:133: characters 4-34
			$p = Template::$splitter->matchedPos();
			#/usr/local/lib/haxe/std/haxe/Template.hx:134: lines 134-135
			if ($p->pos > 0) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:135: characters 5-65
				$tokens->add(new HxAnon([
					"p" => HxString::substr($data, 0, $p->pos),
					"s" => true,
					"l" => null,
				]));
			}
			#/usr/local/lib/haxe/std/haxe/Template.hx:138: characters 8-30
			$index = $p->pos;
			#/usr/local/lib/haxe/std/haxe/Template.hx:138: lines 138-142
			if (((($index < 0) || ($index >= strlen($data)) ? null : ord($data[$index]))) === 58) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:139: characters 5-78
				$tokens->add(new HxAnon([
					"p" => HxString::substr($data, $p->pos + 2, $p->len - 4),
					"s" => false,
					"l" => null,
				]));
				#/usr/local/lib/haxe/std/haxe/Template.hx:140: characters 5-35
				$data = Template::$splitter->matchedRight();
				#/usr/local/lib/haxe/std/haxe/Template.hx:141: characters 5-13
				continue;
			}
			#/usr/local/lib/haxe/std/haxe/Template.hx:145: characters 4-29
			$parp = $p->pos + $p->len;
			#/usr/local/lib/haxe/std/haxe/Template.hx:146: characters 4-17
			$npar = 1;
			#/usr/local/lib/haxe/std/haxe/Template.hx:147: characters 4-20
			$params = new \Array_hx();
			#/usr/local/lib/haxe/std/haxe/Template.hx:148: characters 4-18
			$part = "";
			#/usr/local/lib/haxe/std/haxe/Template.hx:149: lines 149-166
			while (true) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:150: characters 5-35
				$c = (($parp < 0) || ($parp >= strlen($data)) ? null : ord($data[$parp]));
				#/usr/local/lib/haxe/std/haxe/Template.hx:151: characters 5-11
				$parp = $parp + 1;
				#/usr/local/lib/haxe/std/haxe/Template.hx:152: lines 152-159
				if ($c === 40) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:153: characters 6-12
					$npar = $npar + 1;
				} else if ($c === 41) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:155: characters 6-12
					$npar = $npar - 1;
					#/usr/local/lib/haxe/std/haxe/Template.hx:156: characters 6-26
					if ($npar <= 0) {
						#/usr/local/lib/haxe/std/haxe/Template.hx:156: characters 21-26
						break;
					}
				} else if ($c === null) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:158: characters 6-11
					throw new HxException("Unclosed macro parenthesis");
				}
				#/usr/local/lib/haxe/std/haxe/Template.hx:160: lines 160-165
				if (($c === 44) && ($npar === 1)) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:161: characters 6-23
					$params->arr[$params->length] = $part;
					#/usr/local/lib/haxe/std/haxe/Template.hx:161: characters 6-23
					++$params->length;

					#/usr/local/lib/haxe/std/haxe/Template.hx:162: characters 6-15
					$part = "";
				} else {
					#/usr/local/lib/haxe/std/haxe/Template.hx:164: characters 6-36
					$part = ($part??'null') . (chr($c)??'null');
				}
			}
			#/usr/local/lib/haxe/std/haxe/Template.hx:167: characters 4-21
			$params->arr[$params->length] = $part;
			#/usr/local/lib/haxe/std/haxe/Template.hx:167: characters 4-21
			++$params->length;

			#/usr/local/lib/haxe/std/haxe/Template.hx:168: characters 4-66
			$tokens->add(new HxAnon([
				"p" => Template::$splitter->matched(2),
				"s" => false,
				"l" => $params,
			]));
			#/usr/local/lib/haxe/std/haxe/Template.hx:169: characters 4-47
			$data = HxString::substr($data, $parp, strlen($data) - $parp);
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:171: lines 171-172
		if (strlen($data) > 0) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:172: characters 4-48
			$tokens->add(new HxAnon([
				"p" => $data,
				"s" => true,
				"l" => null,
			]));
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:173: characters 3-16
		return $tokens;
	}


	/**
	 * @param string $v
	 * 
	 * @return mixed
	 */
	public function resolve ($v) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:117: lines 117-118
		if ($v === "__current__") {
			#/usr/local/lib/haxe/std/haxe/Template.hx:118: characters 4-18
			return $this->context;
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:119: characters 3-47
		$value = \Reflect::getProperty($this->context, $v);
		#/usr/local/lib/haxe/std/haxe/Template.hx:120: lines 120-121
		if (($value !== null) || \Reflect::hasField($this->context, $v)) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:121: characters 4-16
			return $value;
		}
		#/usr/local/lib/haxe/std/haxe/Template.hx:122: characters 15-20
		$_g_head = $this->stack->h;
		#/usr/local/lib/haxe/std/haxe/Template.hx:122: lines 122-126
		while ($_g_head !== null) {
			#/usr/local/lib/haxe/std/haxe/Template.hx:122: lines 122-126
			$val = $_g_head->item;
			#/usr/local/lib/haxe/std/haxe/Template.hx:122: lines 122-126
			$_g_head = $_g_head->next;
			#/usr/local/lib/haxe/std/haxe/Template.hx:122: lines 122-126
			$ctx = $val;
			#/usr/local/lib/haxe/std/haxe/Template.hx:123: characters 4-9
			$value = \Reflect::getProperty($ctx, $v);
			#/usr/local/lib/haxe/std/haxe/Template.hx:124: lines 124-125
			if (($value !== null) || \Reflect::hasField($ctx, $v)) {
				#/usr/local/lib/haxe/std/haxe/Template.hx:125: characters 5-17
				return $value;
			}
		}

		#/usr/local/lib/haxe/std/haxe/Template.hx:127: characters 3-34
		return \Reflect::field(Template::$globals, $v);
	}


	/**
	 * @param TemplateExpr $e
	 * 
	 * @return void
	 */
	public function run ($e) {
		#/usr/local/lib/haxe/std/haxe/Template.hx:356: lines 356-416
		switch ($e->index) {
			case 0:
				#/usr/local/lib/haxe/std/haxe/Template.hx:357: characters 14-15
				$v = $e->params[0];
				#/usr/local/lib/haxe/std/haxe/Template.hx:358: characters 4-35
				$this->buf->add(\Std::string($this->resolve($v)));
				break;
			case 1:
				#/usr/local/lib/haxe/std/haxe/Template.hx:359: characters 15-16
				$e1 = $e->params[0];
				#/usr/local/lib/haxe/std/haxe/Template.hx:360: characters 4-28
				$this->buf->add(\Std::string($e1()));
				break;
			case 2:
				#/usr/local/lib/haxe/std/haxe/Template.hx:361: characters 19-24
				$eelse = $e->params[2];
				#/usr/local/lib/haxe/std/haxe/Template.hx:361: characters 15-18
				$eif = $e->params[1];
				#/usr/local/lib/haxe/std/haxe/Template.hx:361: characters 13-14
				$e2 = $e->params[0];
				#/usr/local/lib/haxe/std/haxe/Template.hx:362: characters 4-26
				$v1 = $e2();
				#/usr/local/lib/haxe/std/haxe/Template.hx:363: lines 363-366
				if (($v1 === null) || ($v1 === false)) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:364: characters 5-35
					if ($eelse !== null) {
						#/usr/local/lib/haxe/std/haxe/Template.hx:364: characters 25-35
						$this->run($eelse);
					}
				} else {
					#/usr/local/lib/haxe/std/haxe/Template.hx:366: characters 5-13
					$this->run($eif);
				}

				break;
			case 3:
				#/usr/local/lib/haxe/std/haxe/Template.hx:367: characters 14-17
				$str = $e->params[0];
				#/usr/local/lib/haxe/std/haxe/Template.hx:368: characters 4-16
				$this->buf->add($str);
				break;
			case 4:
				#/usr/local/lib/haxe/std/haxe/Template.hx:369: characters 16-17
				$l = $e->params[0];
				#/usr/local/lib/haxe/std/haxe/Template.hx:370: characters 14-15
				$_g_head = $l->h;
				#/usr/local/lib/haxe/std/haxe/Template.hx:370: lines 370-371
				while ($_g_head !== null) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:370: lines 370-371
					$val = $_g_head->item;
					#/usr/local/lib/haxe/std/haxe/Template.hx:370: lines 370-371
					$_g_head = $_g_head->next;
					#/usr/local/lib/haxe/std/haxe/Template.hx:370: lines 370-371
					$e3 = $val;
					#/usr/local/lib/haxe/std/haxe/Template.hx:371: characters 5-11
					$this->run($e3);
				}

				break;
			case 5:
				#/usr/local/lib/haxe/std/haxe/Template.hx:372: characters 20-24
				$loop = $e->params[1];
				#/usr/local/lib/haxe/std/haxe/Template.hx:372: characters 18-19
				$e4 = $e->params[0];
				#/usr/local/lib/haxe/std/haxe/Template.hx:373: characters 4-26
				$v2 = $e4();
				#/usr/local/lib/haxe/std/haxe/Template.hx:374: lines 374-382
				try {
					#/usr/local/lib/haxe/std/haxe/Template.hx:375: characters 5-36
					$x = $v2->iterator();
					#/usr/local/lib/haxe/std/haxe/Template.hx:376: characters 5-34
					if (Boot::dynamicField($x, 'hasNext') === null) {
						#/usr/local/lib/haxe/std/haxe/Template.hx:376: characters 29-34
						throw new HxException(null);
					}
					#/usr/local/lib/haxe/std/haxe/Template.hx:377: characters 5-6
					$v2 = $x;
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$e5 = $__hx__real_e;
					#/usr/local/lib/haxe/std/haxe/Template.hx:378: lines 378-382
					try {
						#/usr/local/lib/haxe/std/haxe/Template.hx:379: characters 5-34
						if (Boot::dynamicField($v2, 'hasNext') === null) {
							#/usr/local/lib/haxe/std/haxe/Template.hx:379: characters 29-34
							throw new HxException(null);
						}
					} catch (\Throwable $__hx__caught_e) {
						CallStack::saveExceptionTrace($__hx__caught_e);
						$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
						$e6 = $__hx__real_e;
						#/usr/local/lib/haxe/std/haxe/Template.hx:381: characters 5-10
						throw new HxException("Cannot iter on " . (\Std::string($v2)??'null'));
					}
				}
				#/usr/local/lib/haxe/std/haxe/Template.hx:383: characters 4-23
				$this->stack->push($this->context);
				#/usr/local/lib/haxe/std/haxe/Template.hx:384: characters 4-34
				$v3 = $v2;
				#/usr/local/lib/haxe/std/haxe/Template.hx:385: characters 16-17
				$ctx = $v3;
				#/usr/local/lib/haxe/std/haxe/Template.hx:385: characters 16-17
				while ($ctx->hasNext()) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:385: lines 385-388
					$ctx1 = $ctx->next();
					#/usr/local/lib/haxe/std/haxe/Template.hx:386: characters 5-12
					$this->context = $ctx1;
					#/usr/local/lib/haxe/std/haxe/Template.hx:387: characters 5-14
					$this->run($loop);
				}

				#/usr/local/lib/haxe/std/haxe/Template.hx:389: characters 4-11
				$this->context = $this->stack->pop();

				break;
			case 6:
				#/usr/local/lib/haxe/std/haxe/Template.hx:390: characters 18-24
				$params = $e->params[1];
				#/usr/local/lib/haxe/std/haxe/Template.hx:390: characters 16-17
				$m = $e->params[0];
				#/usr/local/lib/haxe/std/haxe/Template.hx:391: characters 4-46
				$v4 = \Reflect::field($this->macros, $m);
				#/usr/local/lib/haxe/std/haxe/Template.hx:392: characters 4-34
				$pl = new \Array_hx();
				#/usr/local/lib/haxe/std/haxe/Template.hx:393: characters 4-18
				$old = $this->buf;
				#/usr/local/lib/haxe/std/haxe/Template.hx:394: characters 4-20
				$pl->arr[$pl->length] = new HxClosure($this, 'resolve');
				#/usr/local/lib/haxe/std/haxe/Template.hx:394: characters 4-20
				++$pl->length;

				#/usr/local/lib/haxe/std/haxe/Template.hx:395: characters 14-20
				$_g_head1 = $params->h;
				#/usr/local/lib/haxe/std/haxe/Template.hx:395: lines 395-403
				while ($_g_head1 !== null) {
					#/usr/local/lib/haxe/std/haxe/Template.hx:395: lines 395-403
					$val1 = $_g_head1->item;
					#/usr/local/lib/haxe/std/haxe/Template.hx:395: lines 395-403
					$_g_head1 = $_g_head1->next;
					#/usr/local/lib/haxe/std/haxe/Template.hx:395: lines 395-403
					$p = $val1;
					#/usr/local/lib/haxe/std/haxe/Template.hx:396: lines 396-402
					if ($p->index === 0) {
						#/usr/local/lib/haxe/std/haxe/Template.hx:397: characters 16-17
						$v5 = $p->params[0];
						#/usr/local/lib/haxe/std/haxe/Template.hx:397: characters 20-39
						$x1 = $this->resolve($v5);
						#/usr/local/lib/haxe/std/haxe/Template.hx:397: characters 20-39
						$pl->arr[$pl->length] = $x1;
						#/usr/local/lib/haxe/std/haxe/Template.hx:397: characters 20-39
						++$pl->length;

					} else {
						#/usr/local/lib/haxe/std/haxe/Template.hx:399: characters 6-9
						$this->buf = new \StringBuf();
						#/usr/local/lib/haxe/std/haxe/Template.hx:400: characters 6-12
						$this->run($p);
						#/usr/local/lib/haxe/std/haxe/Template.hx:401: characters 6-29
						$pl->arr[$pl->length] = $this->buf->b;
						#/usr/local/lib/haxe/std/haxe/Template.hx:401: characters 6-29
						++$pl->length;

					}
				}

				#/usr/local/lib/haxe/std/haxe/Template.hx:404: characters 4-7
				$this->buf = $old;
				#/usr/local/lib/haxe/std/haxe/Template.hx:405: lines 405-415
				try {
					#/usr/local/lib/haxe/std/haxe/Template.hx:406: characters 5-57
					$this->buf->add(\Std::string(\Reflect::callMethod($this->macros, $v4, $pl)));
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$e7 = $__hx__real_e;
					#/usr/local/lib/haxe/std/haxe/Template.hx:408: characters 5-61
					$plstr = null;
					#/usr/local/lib/haxe/std/haxe/Template.hx:408: characters 17-60
					try {
						#/usr/local/lib/haxe/std/haxe/Template.hx:408: characters 5-61
						$plstr = $pl->join(",");
					} catch (\Throwable $__hx__caught_e) {
						CallStack::saveExceptionTrace($__hx__caught_e);
						$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
						$e8 = $__hx__real_e;
						#/usr/local/lib/haxe/std/haxe/Template.hx:408: characters 5-61
						$plstr = "???";
					}
					#/usr/local/lib/haxe/std/haxe/Template.hx:409: characters 5-72
					$msg = "Macro call " . ($m??'null') . "(" . ($plstr??'null') . ") failed (" . (\Std::string($e7)??'null') . ")";
					#/usr/local/lib/haxe/std/haxe/Template.hx:413: characters 5-10
					throw new HxException($msg);
				}

				break;
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$splitter = new \EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\\$\\\$([A-Za-z0-9_-]+)\\()", "");
self::$expr_splitter = new \EReg("(\\(|\\)|[ \x0D\x0A\x09]*\"[^\"]*\"[ \x0D\x0A\x09]*|[!+=/><*.&|-]+)", "");
self::$expr_trim = new \EReg("^[ ]*([^ ]+)[ ]*\$", "");
self::$expr_int = new \EReg("^[0-9]+\$", "");
self::$expr_float = new \EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?\$", "");
self::$globals = new HxAnon();
	}
}


Boot::registerClass(Template::class, 'haxe.Template');
Template::__hx__init();

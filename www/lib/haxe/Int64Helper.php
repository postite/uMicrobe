<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/Int64Helper.hx
 */

namespace haxe;

use \haxe\_Int64\___Int64;
use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxString;
use \haxe\_Int32\Int32_Impl_;

/**
 * Helper for parsing to `Int64` instances.
 */
class Int64Helper {
	/**
	 * Create `Int64` from given float.
	 * 
	 * @param float $f
	 * 
	 * @return ___Int64
	 */
	static public function fromFloat ($f) {
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:79: lines 79-81
		if (is_nan($f) || !is_finite($f)) {
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:80: characters 4-9
			throw new HxException("Number is NaN or Infinite");
		}
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:83: characters 3-33
		$noFractions = $f - fmod($f, 1);
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:89: lines 89-91
		if ($noFractions > 9007199254740991) {
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:90: characters 4-9
			throw new HxException("Conversion overflow");
		}
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:92: lines 92-94
		if ($noFractions < -9007199254740991) {
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:93: characters 4-9
			throw new HxException("Conversion underflow");
		}
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:96: characters 16-30
		$this1 = new ___Int64(0, 0);
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:96: characters 3-31
		$result = $this1;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:97: characters 3-29
		$neg = $noFractions < 0;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:98: characters 3-47
		$rest = ($neg ? -$noFractions : $noFractions);
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:100: characters 3-13
		$i = 0;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:101: lines 101-108
		while ($rest >= 1) {
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:102: characters 4-24
			$curr = fmod($rest, 2);
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:103: characters 4-8
			$rest = $rest / 2;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:104: lines 104-106
			if ($curr >= 1) {
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 42-56
				$this_high = 0;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 42-56
				$this_low = 1;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 32-60
				$b = $i;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 32-60
				$b = $b & 63;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
				$b1 = null;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 32-60
				if ($b === 0) {
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 32-60
					$this2 = new ___Int64($this_high, $this_low);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
					$b1 = $this2;
				} else if ($b < 32) {
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 32-60
					$this3 = new ___Int64((((($this_high << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) | Boot::shiftRightUnsigned($this_low, (32 - $b))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, ($this_low << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
					$b1 = $this3;
				} else {
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 32-60
					$this4 = new ___Int64(($this_low << ($b - 32) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits, 0);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
					$b1 = $this4;
				}
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
				$high = (($result->high + $b1->high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
				$low = (($result->low + $b1->low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
				if (Int32_Impl_::ucompare($low, $result->low) < 0) {
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
					$high = $high + 1;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
					$ret = $high - 1;
					#/usr/local/lib/haxe/std/haxe/Int64.hx:256: characters 42-46
					$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
				}
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
				$this5 = new ___Int64($high, $low);
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:105: characters 14-61
				$result = $this5;
			}
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:107: characters 4-7
			$i = $i + 1;
		}
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:110: lines 110-112
		if ($neg) {
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:111: characters 13-30
			$high1 = (~$result->high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:111: characters 13-30
			$low1 = -$result->low;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:111: characters 13-30
			if ($low1 === 0) {
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:111: characters 13-30
				$high1 = $high1 + 1;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:111: characters 13-30
				$ret1 = $high1 - 1;
				#/usr/local/lib/haxe/std/haxe/Int64.hx:220: characters 4-8
				$high1 = ($high1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			}
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:111: characters 13-30
			$this6 = new ___Int64($high1, $low1);
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:111: characters 13-30
			$result = $this6;
		}
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:113: characters 3-16
		return $result;
	}


	/**
	 * Create `Int64` from given string.
	 * 
	 * @param string $sParam
	 * 
	 * @return ___Int64
	 */
	static public function parseString ($sParam) {
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:36: characters 14-29
		$base_high = 0;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:36: characters 14-29
		$base_low = 10;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:37: characters 17-31
		$this1 = new ___Int64(0, 0);
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:37: characters 3-32
		$current = $this1;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:38: characters 20-34
		$this2 = new ___Int64(0, 1);
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:38: characters 3-35
		$multiplier = $this2;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:39: characters 3-27
		$sIsNegative = false;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:41: characters 3-36
		$s = trim($sParam);
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:42: lines 42-45
		if (((0 >= strlen($s) ? "" : $s[0])) === "-") {
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:43: characters 4-15
			$sIsNegative = true;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:44: characters 4-5
			$s = HxString::substring($s, 1, strlen($s));
		}
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:46: characters 3-22
		$len = strlen($s);
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:48: lines 48-71
		$_g1 = 0;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:48: lines 48-71
		$_g = $len;
		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:48: lines 48-71
		while ($_g1 < $_g) {
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:48: lines 48-71
			$_g1 = $_g1 + 1;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:48: characters 8-9
			$i = $_g1 - 1;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:49: characters 19-44
			$index = $len - 1 - $i;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:49: characters 4-56
			$digitInt = ((($index < 0) || ($index >= strlen($s)) ? null : ord($s[$index]))) - 48;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:51: lines 51-53
			if (($digitInt < 0) || ($digitInt > 9)) {
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:52: characters 5-10
				throw new HxException("NumberFormatError");
			}
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:55: lines 55-68
			if ($digitInt !== 0) {
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:56: characters 23-44
				$digit_high = $digitInt >> 31;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:56: characters 23-44
				$digit_low = $digitInt;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:57: lines 57-67
				if ($sIsNegative) {
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$mask = 65535;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$al = $multiplier->low & $mask;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$ah = Boot::shiftRightUnsigned($multiplier->low, 16);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$bl = $digit_low & $mask;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$bh = Boot::shiftRightUnsigned($digit_low, 16);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$p00 = Int32_Impl_::mul($al, $bl);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$p10 = Int32_Impl_::mul($ah, $bl);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$p01 = Int32_Impl_::mul($al, $bh);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$p11 = Int32_Impl_::mul($ah, $bh);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$low = $p00;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$high = ((((($p11 + (Boot::shiftRightUnsigned($p01, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) + (Boot::shiftRightUnsigned($p10, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64.hx:292: characters 3-6
					$p01 = ($p01 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64.hx:293: characters 3-6
					$low = (($low + $p01) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					if (Int32_Impl_::ucompare($low, $p01) < 0) {
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
						$high = $high + 1;
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
						$ret = $high - 1;
						#/usr/local/lib/haxe/std/haxe/Int64.hx:294: characters 38-42
						$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					}
					#/usr/local/lib/haxe/std/haxe/Int64.hx:295: characters 3-6
					$p10 = ($p10 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64.hx:296: characters 3-6
					$low = (($low + $p10) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					if (Int32_Impl_::ucompare($low, $p10) < 0) {
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
						$high = $high + 1;
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
						$ret1 = $high - 1;
						#/usr/local/lib/haxe/std/haxe/Int64.hx:297: characters 38-42
						$high = ($high << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					}
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$high = (($high + (((Int32_Impl_::mul($multiplier->low, $digit_high) + Int32_Impl_::mul($multiplier->high, $digit_low)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$this_high = $high;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 35-63
					$this_low = $low;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 16-64
					$high1 = (($current->high - $this_high) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 16-64
					$low1 = (($current->low - $this_low) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 16-64
					if (Int32_Impl_::ucompare($current->low, $this_low) < 0) {
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 16-64
						$high1 = $high1 - 1;
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 16-64
						$ret2 = $high1 + 1;
						#/usr/local/lib/haxe/std/haxe/Int64.hx:269: characters 44-48
						$high1 = ($high1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					}
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 16-64
					$this3 = new ___Int64($high1, $low1);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:58: characters 16-64
					$current = $this3;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:59: lines 59-61
					if (!($current->high < 0)) {
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:60: characters 7-12
						throw new HxException("NumberFormatError: Underflow");
					}
				} else {
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$mask1 = 65535;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$al1 = $multiplier->low & $mask1;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$ah1 = Boot::shiftRightUnsigned($multiplier->low, 16);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$bl1 = $digit_low & $mask1;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$bh1 = Boot::shiftRightUnsigned($digit_low, 16);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$p001 = Int32_Impl_::mul($al1, $bl1);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$p101 = Int32_Impl_::mul($ah1, $bl1);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$p011 = Int32_Impl_::mul($al1, $bh1);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$p111 = Int32_Impl_::mul($ah1, $bh1);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$low2 = $p001;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$high2 = ((((($p111 + (Boot::shiftRightUnsigned($p011, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) + (Boot::shiftRightUnsigned($p101, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64.hx:292: characters 3-6
					$p011 = ($p011 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64.hx:293: characters 3-6
					$low2 = (($low2 + $p011) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					if (Int32_Impl_::ucompare($low2, $p011) < 0) {
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
						$high2 = $high2 + 1;
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
						$ret3 = $high2 - 1;
						#/usr/local/lib/haxe/std/haxe/Int64.hx:294: characters 38-42
						$high2 = ($high2 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					}
					#/usr/local/lib/haxe/std/haxe/Int64.hx:295: characters 3-6
					$p101 = ($p101 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64.hx:296: characters 3-6
					$low2 = (($low2 + $p101) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					if (Int32_Impl_::ucompare($low2, $p101) < 0) {
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
						$high2 = $high2 + 1;
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
						$ret4 = $high2 - 1;
						#/usr/local/lib/haxe/std/haxe/Int64.hx:297: characters 38-42
						$high2 = ($high2 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					}
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$high2 = (($high2 + (((Int32_Impl_::mul($multiplier->low, $digit_high) + Int32_Impl_::mul($multiplier->high, $digit_low)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$this_high1 = $high2;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 35-63
					$this_low1 = $low2;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 16-64
					$high3 = (($current->high + $this_high1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 16-64
					$low3 = (($current->low + $this_low1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 16-64
					if (Int32_Impl_::ucompare($low3, $current->low) < 0) {
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 16-64
						$high3 = $high3 + 1;
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 16-64
						$ret5 = $high3 - 1;
						#/usr/local/lib/haxe/std/haxe/Int64.hx:256: characters 42-46
						$high3 = ($high3 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
					}
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 16-64
					$this4 = new ___Int64($high3, $low3);
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:63: characters 16-64
					$current = $this4;
					#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:64: lines 64-66
					if ($current->high < 0) {
						#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:65: characters 7-12
						throw new HxException("NumberFormatError: Overflow");
					}
				}
			}
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$mask2 = 65535;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$al2 = $multiplier->low & $mask2;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$ah2 = Boot::shiftRightUnsigned($multiplier->low, 16);
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$bl2 = $base_low & $mask2;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$bh2 = Boot::shiftRightUnsigned($base_low, 16);
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$p002 = Int32_Impl_::mul($al2, $bl2);
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$p102 = Int32_Impl_::mul($ah2, $bl2);
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$p012 = Int32_Impl_::mul($al2, $bh2);
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$p112 = Int32_Impl_::mul($ah2, $bh2);
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$low4 = $p002;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$high4 = ((((($p112 + (Boot::shiftRightUnsigned($p012, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) + (Boot::shiftRightUnsigned($p102, 16))) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			#/usr/local/lib/haxe/std/haxe/Int64.hx:292: characters 3-6
			$p012 = ($p012 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			#/usr/local/lib/haxe/std/haxe/Int64.hx:293: characters 3-6
			$low4 = (($low4 + $p012) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			if (Int32_Impl_::ucompare($low4, $p012) < 0) {
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
				$high4 = $high4 + 1;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
				$ret6 = $high4 - 1;
				#/usr/local/lib/haxe/std/haxe/Int64.hx:294: characters 38-42
				$high4 = ($high4 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			}
			#/usr/local/lib/haxe/std/haxe/Int64.hx:295: characters 3-6
			$p102 = ($p102 << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			#/usr/local/lib/haxe/std/haxe/Int64.hx:296: characters 3-6
			$low4 = (($low4 + $p102) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			if (Int32_Impl_::ucompare($low4, $p102) < 0) {
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
				$high4 = $high4 + 1;
				#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
				$ret7 = $high4 - 1;
				#/usr/local/lib/haxe/std/haxe/Int64.hx:297: characters 38-42
				$high4 = ($high4 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			}
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$high4 = (($high4 + (((Int32_Impl_::mul($multiplier->low, $base_high) + Int32_Impl_::mul($multiplier->high, $base_low)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$this5 = new ___Int64($high4, $low4);
			#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:70: characters 17-44
			$multiplier = $this5;
		}

		#/usr/local/lib/haxe/std/haxe/Int64Helper.hx:72: characters 3-17
		return $current;
	}
}


Boot::registerClass(Int64Helper::class, 'haxe.Int64Helper');

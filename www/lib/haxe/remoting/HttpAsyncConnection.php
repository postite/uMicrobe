<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx
 */

namespace haxe\remoting;

use \haxe\Unserializer;
use \php\Boot;
use \php\_Boot\HxException;
use \sys\Http;
use \php\_Boot\HxString;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \haxe\Serializer;

/**
 * Allows an asynchronous connection to the given URL which should link to a Haxe server application.
 */
class HttpAsyncConnection implements AsyncConnection {
	/**
	 * @var object
	 */
	public $__data;
	/**
	 * @var \Array_hx
	 */
	public $__path;


	/**
	 * @param string $url
	 * 
	 * @return HttpAsyncConnection
	 */
	static public function urlConnect ($url) {
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:77: characters 3-80
		return new HttpAsyncConnection(new HxAnon([
			"url" => $url,
			"error" => function ($e) {
				#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:77: characters 67-72
				throw new HxException($e);
			},
		]), new \Array_hx());
	}


	/**
	 * @param object $data
	 * @param \Array_hx $path
	 * 
	 * @return void
	 */
	public function __construct ($data, $path) {
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:33: characters 3-16
		$this->__data = $data;
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:34: characters 3-16
		$this->__path = $path;
	}


	/**
	 * @param \Array_hx $params
	 * @param \Closure $onResult
	 * 
	 * @return void
	 */
	public function call ($params, $onResult = null) {
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:48: characters 3-37
		$h = new Http($this->__data->url);
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:52: characters 3-33
		$s = new Serializer();
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:53: characters 3-22
		$s->serialize($this->__path);
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:54: characters 3-22
		$s->serialize($params);
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:55: characters 3-37
		$h->setHeader("X-Haxe-Remoting", "1");
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:56: characters 3-37
		$h->setParameter("__x", $s->toString());
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:57: characters 3-28
		$error = $this->__data->error;
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:58: lines 58-71
		$h->onData = function ($response)  use (&$onResult, &$err, &$error) {
			#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:59: characters 4-18
			$ok = true;
			#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:60: characters 4-12
			$ret = null;
			#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:61: lines 61-69
			try {
				#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:62: characters 5-46
				if (HxString::substr($response, 0, 3) !== "hxr") {
					#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:62: characters 41-46
					throw new HxException("Invalid response : '" . ($response??'null') . "'");
				}
				#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:63: characters 5-55
				$s1 = new Unserializer(HxString::substr($response, 3));
				#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:64: characters 5-26
				$ret = $s1->unserialize();
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$err = $__hx__real_e;
				#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:66: characters 5-15
				$ret = null;
				#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:67: characters 5-15
				$ok = false;
				#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:68: characters 5-15
				$error($err);
			}
			#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:70: characters 4-46
			if ($ok && ($onResult !== null)) {
				#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:70: characters 33-46
				$onResult($ret);
			}
		};
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:72: characters 3-20
		$h->onError = $error;
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:73: characters 3-18
		$h->request(true);
	}


	/**
	 * @param string $name
	 * 
	 * @return AsyncConnection
	 */
	public function resolve ($name) {
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:38: characters 35-41
		$c = $this->__data;
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:38: characters 3-57
		$c1 = new HttpAsyncConnection($c, $this->__path->copy());
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:39: characters 3-22
		$_this = $c1->__path;
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:39: characters 3-22
		$_this->arr[$_this->length] = $name;
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:39: characters 3-22
		++$_this->length;

		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:40: characters 3-11
		return $c1;
	}


	/**
	 * @param \Closure $h
	 * 
	 * @return void
	 */
	public function setErrorHandler ($h) {
		#/usr/local/lib/haxe/std/haxe/remoting/HttpAsyncConnection.hx:44: characters 3-19
		$this->__data->error = $h;
	}
}


Boot::registerClass(HttpAsyncConnection::class, 'haxe.remoting.HttpAsyncConnection');

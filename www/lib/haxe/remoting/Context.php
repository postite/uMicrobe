<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/remoting/Context.hx
 */

namespace haxe\remoting;

use \php\_Boot\HxClosure;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxAnon;

/**
 * Allows communication between platforms. This is a shared API that can be called on the connection at the client code.
 */
class Context {
	/**
	 * @var StringMap
	 */
	public $objects;


	/**
	 * @param string $name
	 * @param object $obj
	 * 
	 * @return Context
	 */
	static public function share ($name, $obj) {
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:59: characters 3-27
		$ctx = new Context();
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:60: characters 3-26
		$ctx->addObject($name, $obj);
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:61: characters 3-13
		return $ctx;
	}


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:32: characters 3-36
		$this->objects = new StringMap();
	}


	/**
	 * @param string $name
	 * @param object $obj
	 * @param bool $recursive
	 * 
	 * @return void
	 */
	public function addObject ($name, $obj, $recursive = null) {
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:36: characters 3-51
		$this->objects->data[$name] = new HxAnon([
			"obj" => $obj,
			"rec" => $recursive,
		]);
	}


	/**
	 * @param \Array_hx $path
	 * @param \Array_hx $params
	 * 
	 * @return mixed
	 */
	public function call ($path, $params) {
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:40: characters 3-30
		if ($path->length < 2) {
			#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:40: characters 25-30
			throw new HxException("Invalid path '" . ($path->join(".")??'null') . "'");
		}
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:41: characters 3-34
		$inf = ($this->objects->data[($path->arr[0] ?? null)] ?? null);
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:42: lines 42-43
		if ($inf === null) {
			#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:43: characters 4-9
			throw new HxException("No such object " . (($path->arr[0] ?? null)??'null'));
		}
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:44: characters 3-19
		$o = $inf->obj;
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:45: characters 3-36
		$m = \Reflect::field($o, ($path->arr[1] ?? null));
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:46: lines 46-52
		if ($path->length > 2) {
			#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:47: characters 4-24
			if (!$inf->rec) {
				#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:47: characters 19-24
				throw new HxException("Can't access " . ($path->join(".")??'null'));
			}
			#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:48: lines 48-51
			$_g1 = 2;
			#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:48: lines 48-51
			$_g = $path->length;
			#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:48: lines 48-51
			while ($_g1 < $_g) {
				#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:48: lines 48-51
				$_g1 = $_g1 + 1;
				#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:48: characters 9-10
				$i = $_g1 - 1;
				#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:49: characters 5-10
				$o = $m;
				#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:50: characters 5-33
				$m = \Reflect::field($o, ($path->arr[$i] ?? null));
			}

		}
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:53: lines 53-54
		if (!(($m instanceof \Closure) || ($m instanceof HxClosure))) {
			#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:54: characters 4-9
			throw new HxException("No such method " . ($path->join(".")??'null'));
		}
		#/usr/local/lib/haxe/std/haxe/remoting/Context.hx:55: characters 3-40
		return \Reflect::callMethod($o, $m, $params);
	}
}


Boot::registerClass(Context::class, 'haxe.remoting.Context');

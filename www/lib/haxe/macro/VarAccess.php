<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/macro/Type.hx
 */

namespace haxe\macro;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * Represents the variable accessor.
 */
class VarAccess extends HxEnum {
	/**
	 * Access through accessor function (`get`, `set`, `dynamic`).
	 * 
	 * @return VarAccess
	 */
	static public function AccCall () {
		static $inst = null;
		if (!$inst) $inst = new VarAccess('AccCall', 4, []);
		return $inst;
	}


	/**
	 * Access is only allowed from the constructor.
	 * 
	 * @return VarAccess
	 */
	static public function AccCtor () {
		static $inst = null;
		if (!$inst) $inst = new VarAccess('AccCtor', 7, []);
		return $inst;
	}


	/**
	 * Inline access (`inline`).
	 * 
	 * @return VarAccess
	 */
	static public function AccInline () {
		static $inst = null;
		if (!$inst) $inst = new VarAccess('AccInline', 5, []);
		return $inst;
	}


	/**
	 * No access (`never`).
	 * 
	 * @return VarAccess
	 */
	static public function AccNever () {
		static $inst = null;
		if (!$inst) $inst = new VarAccess('AccNever', 2, []);
		return $inst;
	}


	/**
	 * Private access (`null`).
	 * 
	 * @return VarAccess
	 */
	static public function AccNo () {
		static $inst = null;
		if (!$inst) $inst = new VarAccess('AccNo', 1, []);
		return $inst;
	}


	/**
	 * Normal access (`default`).
	 * 
	 * @return VarAccess
	 */
	static public function AccNormal () {
		static $inst = null;
		if (!$inst) $inst = new VarAccess('AccNormal', 0, []);
		return $inst;
	}


	/**
	 * Failed access due to a `@:require` metadata.
	 * 
	 * @param string $r
	 * @param string $msg
	 * 
	 * @return VarAccess
	 */
	static public function AccRequire ($r, $msg = null) {
		return new VarAccess('AccRequire', 6, [$r, $msg]);
	}


	/**
	 * Unused.
	 * 
	 * @return VarAccess
	 */
	static public function AccResolve () {
		static $inst = null;
		if (!$inst) $inst = new VarAccess('AccResolve', 3, []);
		return $inst;
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			4 => 'AccCall',
			7 => 'AccCtor',
			5 => 'AccInline',
			2 => 'AccNever',
			1 => 'AccNo',
			0 => 'AccNormal',
			6 => 'AccRequire',
			3 => 'AccResolve',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'AccCall' => 0,
			'AccCtor' => 0,
			'AccInline' => 0,
			'AccNever' => 0,
			'AccNo' => 0,
			'AccNormal' => 0,
			'AccRequire' => 2,
			'AccResolve' => 0,
		];
	}
}


Boot::registerClass(VarAccess::class, 'haxe.macro.VarAccess');

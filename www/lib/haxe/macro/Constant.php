<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/macro/Expr.hx
 */

namespace haxe\macro;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * Represents a constant.
 * @see https://haxe.org/manual/expression-constants.html
 */
class Constant extends HxEnum {
	/**
	 * Represents a float literal.
	 * 
	 * @param string $f
	 * 
	 * @return Constant
	 */
	static public function CFloat ($f) {
		return new Constant('CFloat', 1, [$f]);
	}


	/**
	 * Represents an identifier.
	 * 
	 * @param string $s
	 * 
	 * @return Constant
	 */
	static public function CIdent ($s) {
		return new Constant('CIdent', 3, [$s]);
	}


	/**
	 * Represents an integer literal.
	 * 
	 * @param string $v
	 * 
	 * @return Constant
	 */
	static public function CInt ($v) {
		return new Constant('CInt', 0, [$v]);
	}


	/**
	 * Represents a regular expression literal.
	 * Example: `~/haxe/i`
	 * The first argument _haxe_ is a string with regular expression pattern.
	 * The second argument _i_ is a string with regular expression flags.
	 * @see https://haxe.org/manual/std-regex.html
	 * 
	 * @param string $r
	 * @param string $opt
	 * 
	 * @return Constant
	 */
	static public function CRegexp ($r, $opt) {
		return new Constant('CRegexp', 4, [$r, $opt]);
	}


	/**
	 * Represents a string literal.
	 * 
	 * @param string $s
	 * 
	 * @return Constant
	 */
	static public function CString ($s) {
		return new Constant('CString', 2, [$s]);
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			1 => 'CFloat',
			3 => 'CIdent',
			0 => 'CInt',
			4 => 'CRegexp',
			2 => 'CString',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'CFloat' => 1,
			'CIdent' => 1,
			'CInt' => 1,
			'CRegexp' => 2,
			'CString' => 1,
		];
	}
}


Boot::registerClass(Constant::class, 'haxe.macro.Constant');

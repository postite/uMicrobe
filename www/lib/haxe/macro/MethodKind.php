<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/macro/Type.hx
 */

namespace haxe\macro;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * Represents the method kind.
 */
class MethodKind extends HxEnum {
	/**
	 * A dynamic, rebindable method.
	 * @see https://haxe.org/manual/class-field-dynamic.html
	 * 
	 * @return MethodKind
	 */
	static public function MethDynamic () {
		static $inst = null;
		if (!$inst) $inst = new MethodKind('MethDynamic', 2, []);
		return $inst;
	}


	/**
	 * An inline method.
	 * @see https://haxe.org/manual/class-field-inline.html
	 * 
	 * @return MethodKind
	 */
	static public function MethInline () {
		static $inst = null;
		if (!$inst) $inst = new MethodKind('MethInline', 1, []);
		return $inst;
	}


	/**
	 * A macro method.
	 * 
	 * @return MethodKind
	 */
	static public function MethMacro () {
		static $inst = null;
		if (!$inst) $inst = new MethodKind('MethMacro', 3, []);
		return $inst;
	}


	/**
	 * A normal method.
	 * 
	 * @return MethodKind
	 */
	static public function MethNormal () {
		static $inst = null;
		if (!$inst) $inst = new MethodKind('MethNormal', 0, []);
		return $inst;
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			2 => 'MethDynamic',
			1 => 'MethInline',
			3 => 'MethMacro',
			0 => 'MethNormal',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'MethDynamic' => 0,
			'MethInline' => 0,
			'MethMacro' => 0,
			'MethNormal' => 0,
		];
	}
}


Boot::registerClass(MethodKind::class, 'haxe.macro.MethodKind');

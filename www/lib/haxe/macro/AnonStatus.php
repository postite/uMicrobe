<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/macro/Type.hx
 */

namespace haxe\macro;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * Represents the kind of the anonymous structure type.
 */
class AnonStatus extends HxEnum {
	/**
	 * A structure that represents the static fields of an abstract.
	 * 
	 * @param object $t
	 * 
	 * @return AnonStatus
	 */
	static public function AAbstractStatics ($t) {
		return new AnonStatus('AAbstractStatics', 6, [$t]);
	}


	/**
	 * A structure that represents the static fields of a class.
	 * 
	 * @param object $t
	 * 
	 * @return AnonStatus
	 */
	static public function AClassStatics ($t) {
		return new AnonStatus('AClassStatics', 4, [$t]);
	}


	/**
	 * A closed structure is considered complete. That is, no further fields
	 * can be added to it.
	 * 
	 * @return AnonStatus
	 */
	static public function AClosed () {
		static $inst = null;
		if (!$inst) $inst = new AnonStatus('AClosed', 0, []);
		return $inst;
	}


	/**
	 * A const structure is one that appears directly in syntax. It cannot be
	 * assigned to a smaller structure type (that is, it does not allow
	 * structural sub-typing).
	 * 
	 * @return AnonStatus
	 */
	static public function AConst () {
		static $inst = null;
		if (!$inst) $inst = new AnonStatus('AConst', 2, []);
		return $inst;
	}


	/**
	 * A structure that represents the constructors of an enum.
	 * 
	 * @param object $t
	 * 
	 * @return AnonStatus
	 */
	static public function AEnumStatics ($t) {
		return new AnonStatus('AEnumStatics', 5, [$t]);
	}


	/**
	 * Represents a structure which extends one or multiple structures defined
	 * in `tl`.
	 * @see https://haxe.org/manual/type-system-extensions.html
	 * 
	 * @param object $tl
	 * 
	 * @return AnonStatus
	 */
	static public function AExtend ($tl) {
		return new AnonStatus('AExtend', 3, [$tl]);
	}


	/**
	 * An open structure allows having additional fields added to it, which is
	 * used during type inference. It is closed upon unification.
	 * 
	 * @return AnonStatus
	 */
	static public function AOpened () {
		static $inst = null;
		if (!$inst) $inst = new AnonStatus('AOpened', 1, []);
		return $inst;
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			6 => 'AAbstractStatics',
			4 => 'AClassStatics',
			0 => 'AClosed',
			2 => 'AConst',
			5 => 'AEnumStatics',
			3 => 'AExtend',
			1 => 'AOpened',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'AAbstractStatics' => 1,
			'AClassStatics' => 1,
			'AClosed' => 0,
			'AConst' => 0,
			'AEnumStatics' => 1,
			'AExtend' => 1,
			'AOpened' => 0,
		];
	}
}


Boot::registerClass(AnonStatus::class, 'haxe.macro.AnonStatus');

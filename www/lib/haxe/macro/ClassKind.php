<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/macro/Type.hx
 */

namespace haxe\macro;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * Represents the kind of a class.
 */
class ClassKind extends HxEnum {
	/**
	 * An implementation class of an abstract, i.e. where all its run-time code
	 * is.
	 * 
	 * @param object $a
	 * 
	 * @return ClassKind
	 */
	static public function KAbstractImpl ($a) {
		return new ClassKind('KAbstractImpl', 7, [$a]);
	}


	/**
	 * A special kind of class to encode expressions into type parameters.
	 * 
	 * @param object $expr
	 * 
	 * @return ClassKind
	 */
	static public function KExpr ($expr) {
		return new ClassKind('KExpr', 3, [$expr]);
	}


	/**
	 * A structurally extended class.
	 * @deprecated
	 * 
	 * @param object $cl
	 * @param \Array_hx $params
	 * 
	 * @return ClassKind
	 */
	static public function KExtension ($cl, $params) {
		return new ClassKind('KExtension', 2, [$cl, $params]);
	}


	/**
	 * A `@:generic` base class.
	 * 
	 * @return ClassKind
	 */
	static public function KGeneric () {
		static $inst = null;
		if (!$inst) $inst = new ClassKind('KGeneric', 4, []);
		return $inst;
	}


	/**
	 * A `@:genericBuild` class
	 * 
	 * @return ClassKind
	 */
	static public function KGenericBuild () {
		static $inst = null;
		if (!$inst) $inst = new ClassKind('KGenericBuild', 8, []);
		return $inst;
	}


	/**
	 * A concrete `@:generic` instance, referencing the original class and the
	 * applied type parameters.
	 * 
	 * @param object $cl
	 * @param \Array_hx $params
	 * 
	 * @return ClassKind
	 */
	static public function KGenericInstance ($cl, $params) {
		return new ClassKind('KGenericInstance', 5, [$cl, $params]);
	}


	/**
	 * A special class for `haxe.macro.MacroType`.
	 * @deprecated
	 * 
	 * @return ClassKind
	 */
	static public function KMacroType () {
		static $inst = null;
		if (!$inst) $inst = new ClassKind('KMacroType', 6, []);
		return $inst;
	}


	/**
	 * A normal class.
	 * 
	 * @return ClassKind
	 */
	static public function KNormal () {
		static $inst = null;
		if (!$inst) $inst = new ClassKind('KNormal', 0, []);
		return $inst;
	}


	/**
	 * A type parameter class with a set of constraints.
	 * 
	 * @param \Array_hx $constraints
	 * 
	 * @return ClassKind
	 */
	static public function KTypeParameter ($constraints) {
		return new ClassKind('KTypeParameter', 1, [$constraints]);
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			7 => 'KAbstractImpl',
			3 => 'KExpr',
			2 => 'KExtension',
			4 => 'KGeneric',
			8 => 'KGenericBuild',
			5 => 'KGenericInstance',
			6 => 'KMacroType',
			0 => 'KNormal',
			1 => 'KTypeParameter',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'KAbstractImpl' => 1,
			'KExpr' => 1,
			'KExtension' => 2,
			'KGeneric' => 0,
			'KGenericBuild' => 0,
			'KGenericInstance' => 2,
			'KMacroType' => 0,
			'KNormal' => 0,
			'KTypeParameter' => 1,
		];
	}
}


Boot::registerClass(ClassKind::class, 'haxe.macro.ClassKind');

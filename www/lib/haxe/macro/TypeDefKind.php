<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/haxe/macro/Expr.hx
 */

namespace haxe\macro;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * Represents a type definition kind.
 */
class TypeDefKind extends HxEnum {
	/**
	 * Represents an abstract kind.
	 * 
	 * @param ComplexType $tthis
	 * @param \Array_hx $from
	 * @param \Array_hx $to
	 * 
	 * @return TypeDefKind
	 */
	static public function TDAbstract ($tthis, $from = null, $to = null) {
		return new TypeDefKind('TDAbstract', 4, [$tthis, $from, $to]);
	}


	/**
	 * Represents an alias/typedef kind.
	 * 
	 * @param ComplexType $t
	 * 
	 * @return TypeDefKind
	 */
	static public function TDAlias ($t) {
		return new TypeDefKind('TDAlias', 3, [$t]);
	}


	/**
	 * Represents a class kind.
	 * 
	 * @param object $superClass
	 * @param \Array_hx $interfaces
	 * @param bool $isInterface
	 * 
	 * @return TypeDefKind
	 */
	static public function TDClass ($superClass = null, $interfaces = null, $isInterface = null) {
		return new TypeDefKind('TDClass', 2, [$superClass, $interfaces, $isInterface]);
	}


	/**
	 * Represents an enum kind.
	 * 
	 * @return TypeDefKind
	 */
	static public function TDEnum () {
		static $inst = null;
		if (!$inst) $inst = new TypeDefKind('TDEnum', 0, []);
		return $inst;
	}


	/**
	 * Represents a structure kind.
	 * 
	 * @return TypeDefKind
	 */
	static public function TDStructure () {
		static $inst = null;
		if (!$inst) $inst = new TypeDefKind('TDStructure', 1, []);
		return $inst;
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			4 => 'TDAbstract',
			3 => 'TDAlias',
			2 => 'TDClass',
			0 => 'TDEnum',
			1 => 'TDStructure',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'TDAbstract' => 3,
			'TDAlias' => 1,
			'TDClass' => 3,
			'TDEnum' => 0,
			'TDStructure' => 0,
		];
	}
}


Boot::registerClass(TypeDefKind::class, 'haxe.macro.TypeDefKind');

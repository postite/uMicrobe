<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx
 */

namespace sys\ufront\web\context;

use \ufront\web\context\HttpResponse as ContextHttpResponse;
use \php\Boot;
use \php\_Boot\HxException;
use \php\_NativeArray\NativeArrayIterator;
use \php\Web;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \ufront\web\HttpError;

/**
 * An implementation of `ufront.web.context.HttpRequest` for Neko and PHP, based on the `neko.Web` and `php.Web` API.
 * @author Franco Ponticelli, Jason O'Neil
 */
class HttpResponse extends ContextHttpResponse {
	/**
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:16: lines 16-61
		parent::__construct();
	}


	/**
	 * @return void
	 */
	public function flush () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:20: lines 20-23
		if (!$this->_flushedStatus) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:21: characters 4-25
			$this->_flushedStatus = true;
			#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:22: characters 4-31
			Web::setReturnCode($this->status);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:26: lines 26-36
		if (!$this->_flushedCookies) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:27: characters 4-26
			$this->_flushedCookies = true;
			#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:28: lines 28-35
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:29: characters 21-29
				$cookie = new NativeArrayIterator($this->_cookies->data);
				#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:29: characters 21-29
				while ($cookie->hasNext()) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:29: lines 29-31
					$cookie1 = $cookie->next();
					#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:30: characters 6-124
					Web::setCookie($cookie1->name, $cookie1->value, $cookie1->expires, $cookie1->domain, $cookie1->path, $cookie1->secure, $cookie1->httpOnly);
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:34: characters 5-10
				throw new HxException(HttpError::internalServerError("Failed to set cookie on response", $e, new HxAnon([
					"fileName" => "sys/ufront/web/context/HttpResponse.hx",
					"lineNumber" => 34,
					"className" => "sys.ufront.web.context.HttpResponse",
					"methodName" => "flush",
				])));
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:39: lines 39-53
		if (!$this->_flushedHeaders) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:40: characters 4-26
			$this->_flushedHeaders = true;
			#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:41: characters 17-32
			$key = $this->_headers->keys();
			#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:41: characters 17-32
			while ($key->hasNext()) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:41: lines 41-52
				$key1 = $key->next();
				#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:42: characters 5-33
				$val = $this->_headers->get($key1);
				#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:43: lines 43-45
				if (($key1 === "Content-type") && (null !== $this->charset) && (($val === "application/json") || \StringTools::startsWith($val, "text/"))) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:44: characters 6-35
					$val = ($val??'null') . (("; charset=" . ($this->charset??'null'))??'null');
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:46: lines 46-51
				try {
					#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:47: characters 6-31
					header("" . ($key1??'null') . ": " . ($val??'null'));
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$e1 = $__hx__real_e;
					#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:50: characters 6-11
					throw new HxException(HttpError::internalServerError("Invalid header: \"" . ($key1??'null') . ": " . ($val??'null') . "\", or output already sent", $e1, new HxAnon([
						"fileName" => "sys/ufront/web/context/HttpResponse.hx",
						"lineNumber" => 50,
						"className" => "sys.ufront.web.context.HttpResponse",
						"methodName" => "flush",
					])));
				}
			}

		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:56: lines 56-59
		if (!$this->_flushedContent) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:57: characters 4-26
			$this->_flushedContent = true;
			#/Users/ut/Documents/LAB/ufront-mvc/src/sys/ufront/web/context/HttpResponse.hx:58: characters 4-33
			echo(\Std::string($this->_buff->b));
		}
	}
}


Boot::registerClass(HttpResponse::class, 'sys.ufront.web.context.HttpResponse');

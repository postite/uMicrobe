<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx
 */

namespace sys\db\_Sqlite;

use \php\Boot;
use \haxe\ds\List_hx;
use \sys\db\ResultSet;
use \php\_Boot\HxAnon;

class SQLiteResultSet implements ResultSet {
	/**
	 * @var int
	 */
	public $_length;
	/**
	 * @var int
	 */
	public $_nfields;
	/**
	 * @var int
	 */
	public $currentIndex;
	/**
	 * @var mixed
	 */
	public $fetchedRow;
	/**
	 * @var mixed
	 */
	public $fieldsInfo;
	/**
	 * @var int
	 */
	public $length;
	/**
	 * @var bool
	 */
	public $loaded;
	/**
	 * @var int
	 */
	public $nfields;
	/**
	 * @var \SQLite3Result
	 */
	public $result;
	/**
	 * @var mixed
	 */
	public $rows;


	/**
	 * @param \SQLite3Result $result
	 * 
	 * @return void
	 */
	public function __construct ($result) {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:99: characters 25-26
		$this->currentIndex = 0;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:98: characters 20-25
		$this->loaded = false;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:96: characters 23-24
		$this->_nfields = 0;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:95: characters 22-23
		$this->_length = 0;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:106: characters 3-23
		$this->result = $result;
	}


	/**
	 * @param mixed $row
	 * 
	 * @return mixed
	 */
	public function correctArrayTypes ($row) {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:146: lines 146-152
		$_gthis = $this;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:147: characters 20-35
		if ($this->fieldsInfo === null) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:147: characters 20-35
			$this->fieldsInfo = [];
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:147: characters 20-35
			$_g1 = 0;
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:147: characters 20-35
			$_g = $this->get_nfields();
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:147: characters 20-35
			while ($_g1 < $_g) {
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:147: characters 20-35
				$_g1 = $_g1 + 1;
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:147: characters 20-35
				$i = $_g1 - 1;
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:147: characters 20-35
				$this->fieldsInfo[$this->result->columnName($i)] = $this->result->columnType($i);
			}

		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:147: characters 3-36
		$fieldsInfo = $this->fieldsInfo;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:148: lines 148-150
		foreach ($row as $field => $value) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:149: characters 4-54
			$val = $_gthis->correctType($value, $fieldsInfo[$field]);
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:149: characters 4-54
			$row[$field] = $val;
		};
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:151: characters 3-18
		return $row;
	}


	/**
	 * @param string $value
	 * @param int $type
	 * 
	 * @return mixed
	 */
	public function correctType ($value, $type) {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:172: characters 3-33
		if ($value === null) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:172: characters 22-33
			return null;
		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:173: characters 3-62
		if ($type === SQLITE3_INTEGER) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:173: characters 38-62
			return (int)($value);
		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:174: characters 3-62
		if ($type === SQLITE3_FLOAT) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:174: characters 36-62
			return (float)($value);
		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:175: characters 3-15
		return $value;
	}


	/**
	 * @return void
	 */
	public function fetchAll () {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:179: characters 3-28
		$this->rows = [];
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:180: characters 3-17
		$index = 0;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:181: characters 3-52
		$row = $this->result->fetchArray(SQLITE3_ASSOC);
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:182: lines 182-186
		while ($row !== false) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:183: characters 4-40
			$this->rows[$index] = $this->correctArrayTypes($row);
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:184: characters 4-48
			$row = $this->result->fetchArray(SQLITE3_ASSOC);
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:185: characters 4-11
			$index = $index + 1;
		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:187: characters 3-18
		$this->_length = $index;
	}


	/**
	 * @return mixed
	 */
	public function getFieldsInfo () {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:155: lines 155-160
		if ($this->fieldsInfo === null) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:156: characters 4-40
			$this->fieldsInfo = [];
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:157: lines 157-159
			$_g1 = 0;
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:157: lines 157-159
			$_g = $this->get_nfields();
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:157: lines 157-159
			while ($_g1 < $_g) {
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:157: lines 157-159
				$_g1 = $_g1 + 1;
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:157: characters 8-9
				$i = $_g1 - 1;
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:158: characters 5-60
				$this->fieldsInfo[$this->result->columnName($i)] = $this->result->columnType($i);
			}

		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:161: characters 3-20
		return $this->fieldsInfo;
	}


	/**
	 * @return \Array_hx
	 */
	public function getFieldsNames () {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:142: characters 20-35
		if ($this->fieldsInfo === null) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:142: characters 20-35
			$this->fieldsInfo = [];
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:142: characters 20-35
			$_g1 = 0;
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:142: characters 20-35
			$_g = $this->get_nfields();
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:142: characters 20-35
			while ($_g1 < $_g) {
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:142: characters 20-35
				$_g1 = $_g1 + 1;
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:142: characters 20-35
				$i = $_g1 - 1;
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:142: characters 20-35
				$this->fieldsInfo[$this->result->columnName($i)] = $this->result->columnType($i);
			}

		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:142: characters 3-36
		$fieldsInfo = $this->fieldsInfo;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:143: characters 3-39
		return \Array_hx::wrap(array_keys($fieldsInfo));
	}


	/**
	 * @param int $n
	 * 
	 * @return float
	 */
	public function getFloatResult ($n) {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:138: characters 10-36
		return (float)($this->getResult($n));
	}


	/**
	 * @param int $n
	 * 
	 * @return int
	 */
	public function getIntResult ($n) {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:134: characters 10-34
		return (int)($this->getResult($n));
	}


	/**
	 * @param int $n
	 * 
	 * @return string
	 */
	public function getResult ($n) {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:128: characters 3-22
		if (!$this->loaded) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:128: characters 16-22
			$this->load();
		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:129: characters 3-30
		if (!$this->hasNext()) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:129: characters 19-30
			return null;
		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:130: characters 10-52
		return array_values($this->rows[$this->currentIndex])[$n];
	}


	/**
	 * @return int
	 */
	public function get_length () {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:190: characters 24-38
		return $this->_length;
	}


	/**
	 * @return int
	 */
	public function get_nfields () {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:191: characters 25-40
		return $this->_nfields;
	}


	/**
	 * @return bool
	 */
	public function hasNext () {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:110: characters 3-22
		if (!$this->loaded) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:110: characters 16-22
			$this->load();
		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:111: characters 3-32
		return $this->currentIndex < $this->_length;
	}


	/**
	 * @return void
	 */
	public function load () {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:165: characters 3-16
		$this->loaded = true;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:166: characters 3-33
		$this->_nfields = $this->result->numColumns();
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:167: characters 3-18
		if ($this->fieldsInfo === null) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:167: characters 3-18
			$this->fieldsInfo = [];
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:167: characters 3-18
			$_g1 = 0;
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:167: characters 3-18
			$_g = $this->get_nfields();
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:167: characters 3-18
			while ($_g1 < $_g) {
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:167: characters 3-18
				$_g1 = $_g1 + 1;
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:167: characters 3-18
				$i = $_g1 - 1;
				#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:167: characters 3-18
				$this->fieldsInfo[$this->result->columnName($i)] = $this->result->columnType($i);
			}

		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:168: characters 3-13
		$this->fetchAll();
	}


	/**
	 * @return mixed
	 */
	public function next () {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:115: characters 3-22
		if (!$this->loaded) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:115: characters 16-22
			$this->load();
		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:116: characters 3-43
		$next = $this->rows[$this->currentIndex++];
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:117: characters 10-50
		return new HxAnon($this->correctArrayTypes($next));
	}


	/**
	 * @return List_hx
	 */
	public function results () {
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:120: lines 120-125
		$_gthis = $this;
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:121: characters 3-22
		if (!$this->loaded) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:121: characters 16-22
			$this->load();
		}
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:122: characters 3-25
		$list = new List_hx();
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:123: characters 3-91
		foreach (($this->rows) as $_ => $row) {
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:123: characters 50-89
			$tmp = new HxAnon($_gthis->correctArrayTypes($row));
			#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:123: characters 41-90
			$list->add($tmp);
		};
		#/usr/local/lib/haxe/std/php/_std/sys/db/Sqlite.hx:124: characters 3-14
		return $list;
	}
}


Boot::registerClass(SQLiteResultSet::class, 'sys.db._Sqlite.SQLiteResultSet');
Boot::registerGetters('sys\\db\\_Sqlite\\SQLiteResultSet', [
	'nfields' => true,
	'length' => true
]);

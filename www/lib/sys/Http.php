<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/std/sys/Http.hx
 */

namespace sys;

use \haxe\io\Eof;
use \haxe\http\HttpBase;
use \haxe\io\Output;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\io\BytesBuffer;
use \haxe\io\Input;
use \sys\net\Host;
use \php\_Boot\HxString;
use \haxe\io\Bytes;
use \haxe\io\_BytesData\Container;
use \haxe\io\BytesOutput;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \haxe\io\Error;
use \php\net\SslSocket;
use \sys\net\Socket;

class Http extends HttpBase {
	/**
	 * @var object
	 */
	static public $PROXY = null;


	/**
	 * @var Bytes
	 */
	public $chunk_buf;
	/**
	 * @var int
	 */
	public $chunk_size;
	/**
	 * @var float
	 */
	public $cnxTimeout;
	/**
	 * @var object
	 */
	public $file;
	/**
	 * @var bool
	 */
	public $noShutdown;
	/**
	 * @var StringMap
	 */
	public $responseHeaders;


	/**
	 * Makes a synchronous request to `url`.
	 * This creates a new Http instance and makes a GET request by calling its
	 * `request(false)` method.
	 * If `url` is null, the result is unspecified.
	 * 
	 * @param string $url
	 * 
	 * @return string
	 */
	static public function requestUrl ($url) {
		#/usr/local/lib/haxe/std/sys/Http.hx:448: characters 3-25
		$h = new Http($url);
		#/usr/local/lib/haxe/std/sys/Http.hx:449: characters 3-16
		$r = null;
		#/usr/local/lib/haxe/std/sys/Http.hx:450: lines 450-452
		$h->onData = function ($d)  use (&$r) {
			#/usr/local/lib/haxe/std/sys/Http.hx:451: characters 4-9
			$r = $d;
		};
		#/usr/local/lib/haxe/std/sys/Http.hx:453: lines 453-455
		$h->onError = function ($e) {
			#/usr/local/lib/haxe/std/sys/Http.hx:454: characters 4-9
			throw new HxException($e);
		};
		#/usr/local/lib/haxe/std/sys/Http.hx:456: characters 3-19
		$h->request(false);
		#/usr/local/lib/haxe/std/sys/Http.hx:457: characters 3-11
		return $r;
	}


	/**
	 * @param string $url
	 * 
	 * @return void
	 */
	public function __construct ($url) {
		#/usr/local/lib/haxe/std/sys/Http.hx:38: characters 3-18
		$this->cnxTimeout = 10;
		#/usr/local/lib/haxe/std/sys/Http.hx:40: characters 3-69
		$this->noShutdown = !function_exists("stream_socket_shutdown");
		#/usr/local/lib/haxe/std/sys/Http.hx:42: characters 3-13
		parent::__construct($url);
	}


	/**
	 * @param bool $post
	 * @param Output $api
	 * @param Socket $sock
	 * @param string $method
	 * 
	 * @return void
	 */
	public function customRequest ($post, $api, $sock = null, $method = null) {
		#/usr/local/lib/haxe/std/sys/Http.hx:80: characters 3-27
		$this->responseData = null;
		#/usr/local/lib/haxe/std/sys/Http.hx:81: characters 3-72
		$url_regexp = new \EReg("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)\$", "");
		#/usr/local/lib/haxe/std/sys/Http.hx:82: lines 82-85
		if (!$url_regexp->match($this->url)) {
			#/usr/local/lib/haxe/std/sys/Http.hx:83: characters 4-26
			$this->onError("Invalid URL");
			#/usr/local/lib/haxe/std/sys/Http.hx:84: characters 4-10
			return;
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:86: characters 3-54
		$secure = $url_regexp->matched(1) === "https://";
		#/usr/local/lib/haxe/std/sys/Http.hx:87: lines 87-102
		if ($sock === null) {
			#/usr/local/lib/haxe/std/sys/Http.hx:88: lines 88-101
			if ($secure) {
				#/usr/local/lib/haxe/std/sys/Http.hx:90: characters 5-35
				$sock = new SslSocket();
			} else {
				#/usr/local/lib/haxe/std/sys/Http.hx:101: characters 5-24
				$sock = new Socket();
			}
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:103: characters 3-36
		$host = $url_regexp->matched(2);
		#/usr/local/lib/haxe/std/sys/Http.hx:104: characters 3-42
		$portString = $url_regexp->matched(3);
		#/usr/local/lib/haxe/std/sys/Http.hx:105: characters 3-39
		$request = $url_regexp->matched(4);
		#/usr/local/lib/haxe/std/sys/Http.hx:106: lines 106-107
		if ($request === "") {
			#/usr/local/lib/haxe/std/sys/Http.hx:107: characters 4-17
			$request = "/";
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:108: characters 3-137
		$port = (($portString === null) || ($portString === "") ? ($secure ? 443 : 80) : \Std::parseInt(HxString::substr($portString, 1, strlen($portString) - 1)));
		#/usr/local/lib/haxe/std/sys/Http.hx:110: characters 3-34
		$multipart = $this->file !== null;
		#/usr/local/lib/haxe/std/sys/Http.hx:111: characters 3-23
		$boundary = null;
		#/usr/local/lib/haxe/std/sys/Http.hx:112: characters 3-18
		$uri = null;
		#/usr/local/lib/haxe/std/sys/Http.hx:113: lines 113-150
		if ($multipart) {
			#/usr/local/lib/haxe/std/sys/Http.hx:114: characters 4-15
			$post = true;
			#/usr/local/lib/haxe/std/sys/Http.hx:115: characters 4-130
			$boundary = (\Std::string(mt_rand(0, 999))??'null') . (\Std::string(mt_rand(0, 999))??'null') . (\Std::string(mt_rand(0, 999))??'null') . (\Std::string(mt_rand(0, 999))??'null');
			#/usr/local/lib/haxe/std/sys/Http.hx:116: lines 116-117
			while (strlen($boundary) < 38) {
				#/usr/local/lib/haxe/std/sys/Http.hx:117: characters 5-30
				$boundary = "-" . ($boundary??'null');
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:118: characters 4-28
			$b = new \StringBuf();
			#/usr/local/lib/haxe/std/sys/Http.hx:119: lines 119-130
			$_g = 0;
			#/usr/local/lib/haxe/std/sys/Http.hx:119: lines 119-130
			$_g1 = $this->params;
			#/usr/local/lib/haxe/std/sys/Http.hx:119: lines 119-130
			while ($_g < $_g1->length) {
				#/usr/local/lib/haxe/std/sys/Http.hx:119: characters 8-9
				$p = ($_g1->arr[$_g] ?? null);
				#/usr/local/lib/haxe/std/sys/Http.hx:119: lines 119-130
				$_g = $_g + 1;
				#/usr/local/lib/haxe/std/sys/Http.hx:120: characters 5-16
				$b->add("--");
				#/usr/local/lib/haxe/std/sys/Http.hx:121: characters 5-20
				$b->add($boundary);
				#/usr/local/lib/haxe/std/sys/Http.hx:122: characters 5-18
				$b->add("\x0D\x0A");
				#/usr/local/lib/haxe/std/sys/Http.hx:123: characters 5-52
				$b->add("Content-Disposition: form-data; name=\"");
				#/usr/local/lib/haxe/std/sys/Http.hx:124: characters 5-18
				$b->add($p->name);
				#/usr/local/lib/haxe/std/sys/Http.hx:125: characters 5-15
				$b->add("\"");
				#/usr/local/lib/haxe/std/sys/Http.hx:126: characters 5-18
				$b->add("\x0D\x0A");
				#/usr/local/lib/haxe/std/sys/Http.hx:127: characters 5-18
				$b->add("\x0D\x0A");
				#/usr/local/lib/haxe/std/sys/Http.hx:128: characters 5-19
				$b->add($p->value);
				#/usr/local/lib/haxe/std/sys/Http.hx:129: characters 5-18
				$b->add("\x0D\x0A");
			}

			#/usr/local/lib/haxe/std/sys/Http.hx:131: characters 4-15
			$b->add("--");
			#/usr/local/lib/haxe/std/sys/Http.hx:132: characters 4-19
			$b->add($boundary);
			#/usr/local/lib/haxe/std/sys/Http.hx:133: characters 4-17
			$b->add("\x0D\x0A");
			#/usr/local/lib/haxe/std/sys/Http.hx:134: characters 4-51
			$b->add("Content-Disposition: form-data; name=\"");
			#/usr/local/lib/haxe/std/sys/Http.hx:135: characters 4-21
			$b->add($this->file->param);
			#/usr/local/lib/haxe/std/sys/Http.hx:136: characters 4-26
			$b->add("\"; filename=\"");
			#/usr/local/lib/haxe/std/sys/Http.hx:137: characters 4-24
			$b->add($this->file->filename);
			#/usr/local/lib/haxe/std/sys/Http.hx:138: characters 4-14
			$b->add("\"");
			#/usr/local/lib/haxe/std/sys/Http.hx:139: characters 4-17
			$b->add("\x0D\x0A");
			#/usr/local/lib/haxe/std/sys/Http.hx:140: characters 4-55
			$b->add("Content-Type: " . ($this->file->mimeType??'null') . "\x0D\x0A" . "\x0D\x0A");
			#/usr/local/lib/haxe/std/sys/Http.hx:141: characters 4-22
			$uri = $b->b;
		} else {
			#/usr/local/lib/haxe/std/sys/Http.hx:143: lines 143-149
			$_g2 = 0;
			#/usr/local/lib/haxe/std/sys/Http.hx:143: lines 143-149
			$_g11 = $this->params;
			#/usr/local/lib/haxe/std/sys/Http.hx:143: lines 143-149
			while ($_g2 < $_g11->length) {
				#/usr/local/lib/haxe/std/sys/Http.hx:143: characters 8-9
				$p1 = ($_g11->arr[$_g2] ?? null);
				#/usr/local/lib/haxe/std/sys/Http.hx:143: lines 143-149
				$_g2 = $_g2 + 1;
				#/usr/local/lib/haxe/std/sys/Http.hx:144: lines 144-147
				if ($uri === null) {
					#/usr/local/lib/haxe/std/sys/Http.hx:145: characters 6-14
					$uri = "";
				} else {
					#/usr/local/lib/haxe/std/sys/Http.hx:147: characters 6-16
					$uri = ($uri??'null') . "&";
				}
				#/usr/local/lib/haxe/std/sys/Http.hx:148: characters 5-76
				$uri = ($uri??'null') . (((rawurlencode($p1->name)??'null') . "=" . (rawurlencode($p1->value)??'null'))??'null');
			}
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:152: characters 3-27
		$b1 = new \StringBuf();
		#/usr/local/lib/haxe/std/sys/Http.hx:153: lines 153-159
		if ($method !== null) {
			#/usr/local/lib/haxe/std/sys/Http.hx:154: characters 4-17
			$b1->add($method);
			#/usr/local/lib/haxe/std/sys/Http.hx:155: characters 4-14
			$b1->add(" ");
		} else if ($post) {
			#/usr/local/lib/haxe/std/sys/Http.hx:157: characters 4-18
			$b1->add("POST ");
		} else {
			#/usr/local/lib/haxe/std/sys/Http.hx:159: characters 4-17
			$b1->add("GET ");
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:161: lines 161-168
		if (Http::$PROXY !== null) {
			#/usr/local/lib/haxe/std/sys/Http.hx:162: characters 4-20
			$b1->add("http://");
			#/usr/local/lib/haxe/std/sys/Http.hx:163: characters 4-15
			$b1->add($host);
			#/usr/local/lib/haxe/std/sys/Http.hx:164: lines 164-167
			if ($port !== 80) {
				#/usr/local/lib/haxe/std/sys/Http.hx:165: characters 5-15
				$b1->add(":");
				#/usr/local/lib/haxe/std/sys/Http.hx:166: characters 5-16
				$b1->add($port);
			}
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:169: characters 3-17
		$b1->add($request);
		#/usr/local/lib/haxe/std/sys/Http.hx:171: lines 171-177
		if (!$post && ($uri !== null)) {
			#/usr/local/lib/haxe/std/sys/Http.hx:172: lines 172-175
			if (HxString::indexOf($request, "?", 0) >= 0) {
				#/usr/local/lib/haxe/std/sys/Http.hx:173: characters 5-15
				$b1->add("&");
			} else {
				#/usr/local/lib/haxe/std/sys/Http.hx:175: characters 5-15
				$b1->add("?");
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:176: characters 4-14
			$b1->add($uri);
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:178: characters 3-43
		$b1->add(" HTTP/1.1\x0D\x0AHost: " . ($host??'null') . "\x0D\x0A");
		#/usr/local/lib/haxe/std/sys/Http.hx:179: lines 179-196
		if ($this->postData !== null) {
			#/usr/local/lib/haxe/std/sys/Http.hx:180: characters 4-52
			$b1->add("Content-Length: " . (strlen($this->postData)??'null') . "\x0D\x0A");
		} else if ($post && ($uri !== null)) {
			#/usr/local/lib/haxe/std/sys/Http.hx:182: lines 182-191
			if ($multipart || !\Lambda::exists($this->headers, function ($h) {
				#/usr/local/lib/haxe/std/sys/Http.hx:182: characters 56-87
				return $h->name === "Content-Type";
			})) {
				#/usr/local/lib/haxe/std/sys/Http.hx:183: characters 5-28
				$b1->add("Content-Type: ");
				#/usr/local/lib/haxe/std/sys/Http.hx:184: lines 184-189
				if ($multipart) {
					#/usr/local/lib/haxe/std/sys/Http.hx:185: characters 6-34
					$b1->add("multipart/form-data");
					#/usr/local/lib/haxe/std/sys/Http.hx:186: characters 6-26
					$b1->add("; boundary=");
					#/usr/local/lib/haxe/std/sys/Http.hx:187: characters 6-21
					$b1->add($boundary);
				} else {
					#/usr/local/lib/haxe/std/sys/Http.hx:189: characters 6-48
					$b1->add("application/x-www-form-urlencoded");
				}
				#/usr/local/lib/haxe/std/sys/Http.hx:190: characters 5-18
				$b1->add("\x0D\x0A");
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:192: lines 192-195
			if ($multipart) {
				#/usr/local/lib/haxe/std/sys/Http.hx:193: characters 5-78
				$b1->add("Content-Length: " . ((strlen($uri) + $this->file->size + strlen($boundary) + 6)??'null') . "\x0D\x0A");
			} else {
				#/usr/local/lib/haxe/std/sys/Http.hx:195: characters 5-48
				$b1->add("Content-Length: " . (strlen($uri)??'null') . "\x0D\x0A");
			}
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:197: characters 3-33
		$b1->add("Connection: close\x0D\x0A");
		#/usr/local/lib/haxe/std/sys/Http.hx:198: lines 198-203
		$_g3 = 0;
		#/usr/local/lib/haxe/std/sys/Http.hx:198: lines 198-203
		$_g12 = $this->headers;
		#/usr/local/lib/haxe/std/sys/Http.hx:198: lines 198-203
		while ($_g3 < $_g12->length) {
			#/usr/local/lib/haxe/std/sys/Http.hx:198: characters 7-8
			$h1 = ($_g12->arr[$_g3] ?? null);
			#/usr/local/lib/haxe/std/sys/Http.hx:198: lines 198-203
			$_g3 = $_g3 + 1;
			#/usr/local/lib/haxe/std/sys/Http.hx:199: characters 4-17
			$b1->add($h1->name);
			#/usr/local/lib/haxe/std/sys/Http.hx:200: characters 4-15
			$b1->add(": ");
			#/usr/local/lib/haxe/std/sys/Http.hx:201: characters 4-18
			$b1->add($h1->value);
			#/usr/local/lib/haxe/std/sys/Http.hx:202: characters 4-17
			$b1->add("\x0D\x0A");
		}

		#/usr/local/lib/haxe/std/sys/Http.hx:204: characters 3-16
		$b1->add("\x0D\x0A");
		#/usr/local/lib/haxe/std/sys/Http.hx:205: lines 205-208
		if ($this->postData !== null) {
			#/usr/local/lib/haxe/std/sys/Http.hx:206: characters 4-19
			$b1->add($this->postData);
		} else if ($post && ($uri !== null)) {
			#/usr/local/lib/haxe/std/sys/Http.hx:208: characters 4-14
			$b1->add($uri);
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:209: lines 209-237
		try {
			#/usr/local/lib/haxe/std/sys/Http.hx:210: lines 210-213
			if (Http::$PROXY !== null) {
				#/usr/local/lib/haxe/std/sys/Http.hx:211: characters 5-60
				$sock->connect(new Host(Http::$PROXY->host), Http::$PROXY->port);
			} else {
				#/usr/local/lib/haxe/std/sys/Http.hx:213: characters 5-38
				$sock->connect(new Host($host), $port);
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:214: characters 4-28
			$sock->write($b1->b);
			#/usr/local/lib/haxe/std/sys/Http.hx:215: lines 215-231
			if ($multipart) {
				#/usr/local/lib/haxe/std/sys/Http.hx:216: characters 5-24
				$bufsize = 4096;
				#/usr/local/lib/haxe/std/sys/Http.hx:217: characters 5-44
				$buf = Bytes::alloc($bufsize);
				#/usr/local/lib/haxe/std/sys/Http.hx:218: lines 218-226
				while ($this->file->size > 0) {
					#/usr/local/lib/haxe/std/sys/Http.hx:219: characters 6-64
					$size = ($this->file->size > $bufsize ? $bufsize : $this->file->size);
					#/usr/local/lib/haxe/std/sys/Http.hx:220: characters 6-18
					$len = 0;
					#/usr/local/lib/haxe/std/sys/Http.hx:221: lines 221-223
					try {
						#/usr/local/lib/haxe/std/sys/Http.hx:222: characters 7-42
						$len = $this->file->io->readBytes($buf, 0, $size);
					} catch (\Throwable $__hx__caught_e) {
						CallStack::saveExceptionTrace($__hx__caught_e);
						$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
						if ($__hx__real_e instanceof Eof) {
							$e = $__hx__real_e;
							#/usr/local/lib/haxe/std/sys/Http.hx:223: characters 29-34
							break;
						} else  throw $__hx__caught_e;
					}
					#/usr/local/lib/haxe/std/sys/Http.hx:224: characters 6-43
					$sock->output->writeFullBytes($buf, 0, $len);
					#/usr/local/lib/haxe/std/sys/Http.hx:225: characters 6-10
					$tmp = $this->file;
					#/usr/local/lib/haxe/std/sys/Http.hx:225: characters 6-22
					$tmp->size = $tmp->size - $len;
				}
				#/usr/local/lib/haxe/std/sys/Http.hx:227: characters 5-23
				$sock->write("\x0D\x0A");
				#/usr/local/lib/haxe/std/sys/Http.hx:228: characters 5-21
				$sock->write("--");
				#/usr/local/lib/haxe/std/sys/Http.hx:229: characters 5-25
				$sock->write($boundary);
				#/usr/local/lib/haxe/std/sys/Http.hx:230: characters 5-21
				$sock->write("--");
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:232: characters 4-30
			$this->readHttpResponse($api, $sock);
			#/usr/local/lib/haxe/std/sys/Http.hx:233: characters 4-16
			$sock->close();
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e1 = $__hx__real_e;
			#/usr/local/lib/haxe/std/sys/Http.hx:235: characters 4-41
			try {
				#/usr/local/lib/haxe/std/sys/Http.hx:235: characters 8-20
				$sock->close();
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e2 = $__hx__real_e;
							}
			#/usr/local/lib/haxe/std/sys/Http.hx:236: characters 4-26
			$this->onError(\Std::string($e1));
		}
	}


	/**
	 * @param string $argname
	 * @param string $filename
	 * @param Input $file
	 * @param int $size
	 * @param string $mimeType
	 * 
	 * @return void
	 */
	public function fileTransfer ($argname, $filename, $file, $size, $mimeType = "application/octet-stream") {
		#/usr/local/lib/haxe/std/sys/Http.hx:76: characters 3-90
		if ($mimeType === null) {
			#/usr/local/lib/haxe/std/sys/Http.hx:76: characters 3-90
			$mimeType = "application/octet-stream";
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:76: characters 3-90
		$this->file = new HxAnon([
			"param" => $argname,
			"filename" => $filename,
			"io" => $file,
			"size" => $size,
			"mimeType" => $mimeType,
		]);
	}


	/**
	 * @param string $argname
	 * @param string $filename
	 * @param Input $file
	 * @param int $size
	 * @param string $mimeType
	 * 
	 * @return void
	 */
	public function fileTransfert ($argname, $filename, $file, $size, $mimeType = "application/octet-stream") {
		#/usr/local/lib/haxe/std/sys/Http.hx:72: characters 6-59
		if ($mimeType === null) {
			#/usr/local/lib/haxe/std/sys/Http.hx:72: characters 6-59
			$mimeType = "application/octet-stream";
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:72: characters 6-59
		$this->fileTransfer($argname, $filename, $file, $size, $mimeType);
	}


	/**
	 * @param \EReg $chunk_re
	 * @param Output $api
	 * @param Bytes $buf
	 * @param int $len
	 * 
	 * @return bool
	 */
	public function readChunk ($chunk_re, $api, $buf, $len) {
		#/usr/local/lib/haxe/std/sys/Http.hx:383: lines 383-417
		if ($this->chunk_size === null) {
			#/usr/local/lib/haxe/std/sys/Http.hx:384: lines 384-391
			if ($this->chunk_buf !== null) {
				#/usr/local/lib/haxe/std/sys/Http.hx:385: characters 5-39
				$b = new BytesBuffer();
				#/usr/local/lib/haxe/std/sys/Http.hx:386: characters 5-21
				$b->b = ($b->b . $this->chunk_buf->b->s);
				#/usr/local/lib/haxe/std/sys/Http.hx:387: characters 5-26
				if (($len < 0) || ($len > $buf->length)) {
					#/usr/local/lib/haxe/std/sys/Http.hx:387: characters 5-26
					throw new HxException(Error::OutsideBounds());
				} else {
					#/usr/local/lib/haxe/std/sys/Http.hx:387: characters 5-26
					$left = $b->b;
					#/usr/local/lib/haxe/std/sys/Http.hx:387: characters 5-26
					$this_s = substr($buf->b->s, 0, $len);
					#/usr/local/lib/haxe/std/sys/Http.hx:387: characters 5-26
					$b->b = ($left . $this_s);
				}
				#/usr/local/lib/haxe/std/sys/Http.hx:388: characters 5-8
				$buf = $b->getBytes();
				#/usr/local/lib/haxe/std/sys/Http.hx:389: characters 5-28
				$len = $len + $this->chunk_buf->length;
				#/usr/local/lib/haxe/std/sys/Http.hx:390: characters 5-14
				$this->chunk_buf = null;
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:395: lines 395-409
			if ($chunk_re->match($buf->toString())) {
				#/usr/local/lib/haxe/std/sys/Http.hx:397: characters 5-35
				$p = $chunk_re->matchedPos();
				#/usr/local/lib/haxe/std/sys/Http.hx:398: lines 398-408
				if ($p->len <= $len) {
					#/usr/local/lib/haxe/std/sys/Http.hx:399: characters 6-37
					$cstr = $chunk_re->matched(1);
					#/usr/local/lib/haxe/std/sys/Http.hx:400: characters 6-16
					$this->chunk_size = \Std::parseInt("0x" . ($cstr??'null'));
					#/usr/local/lib/haxe/std/sys/Http.hx:401: lines 401-405
					if ($this->chunk_size === 0) {
						#/usr/local/lib/haxe/std/sys/Http.hx:402: characters 7-17
						$this->chunk_size = null;
						#/usr/local/lib/haxe/std/sys/Http.hx:403: characters 7-16
						$this->chunk_buf = null;
						#/usr/local/lib/haxe/std/sys/Http.hx:404: characters 7-19
						return false;
					}
					#/usr/local/lib/haxe/std/sys/Http.hx:406: characters 6-18
					$len = $len - $p->len;
					#/usr/local/lib/haxe/std/sys/Http.hx:407: characters 36-54
					$pos = $p->len;
					#/usr/local/lib/haxe/std/sys/Http.hx:407: characters 36-54
					$tmp = null;
					#/usr/local/lib/haxe/std/sys/Http.hx:407: characters 36-54
					if (($pos < 0) || ($len < 0) || (($pos + $len) > $buf->length)) {
						#/usr/local/lib/haxe/std/sys/Http.hx:407: characters 36-54
						throw new HxException(Error::OutsideBounds());
					} else {
						#/usr/local/lib/haxe/std/sys/Http.hx:407: characters 36-54
						$tmp = new Bytes($len, new Container(substr($buf->b->s, $pos, $len)));
					}
					#/usr/local/lib/haxe/std/sys/Http.hx:407: characters 6-59
					return $this->readChunk($chunk_re, $api, $tmp, $len);
				}
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:411: lines 411-414
			if ($len > 10) {
				#/usr/local/lib/haxe/std/sys/Http.hx:412: characters 5-29
				$this->onError("Invalid chunk");
				#/usr/local/lib/haxe/std/sys/Http.hx:413: characters 5-17
				return false;
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:415: characters 16-30
			$tmp1 = null;
			#/usr/local/lib/haxe/std/sys/Http.hx:415: characters 16-30
			if (($len < 0) || ($len > $buf->length)) {
				#/usr/local/lib/haxe/std/sys/Http.hx:415: characters 16-30
				throw new HxException(Error::OutsideBounds());
			} else {
				#/usr/local/lib/haxe/std/sys/Http.hx:415: characters 16-30
				$tmp1 = new Bytes($len, new Container(substr($buf->b->s, 0, $len)));
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:415: characters 4-13
			$this->chunk_buf = $tmp1;
			#/usr/local/lib/haxe/std/sys/Http.hx:416: characters 4-15
			return true;
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:418: lines 418-422
		if ($this->chunk_size > $len) {
			#/usr/local/lib/haxe/std/sys/Http.hx:419: characters 4-14
			$tmp2 = $this;
			#/usr/local/lib/haxe/std/sys/Http.hx:419: characters 4-21
			$tmp2->chunk_size = $tmp2->chunk_size - $len;
			#/usr/local/lib/haxe/std/sys/Http.hx:420: characters 4-29
			$api->writeBytes($buf, 0, $len);
			#/usr/local/lib/haxe/std/sys/Http.hx:421: characters 4-15
			return true;
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:423: characters 3-28
		$end = $this->chunk_size + 2;
		#/usr/local/lib/haxe/std/sys/Http.hx:424: lines 424-432
		if ($len >= $end) {
			#/usr/local/lib/haxe/std/sys/Http.hx:425: lines 425-426
			if ($this->chunk_size > 0) {
				#/usr/local/lib/haxe/std/sys/Http.hx:426: characters 5-37
				$api->writeBytes($buf, 0, $this->chunk_size);
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:427: characters 4-14
			$len = $len - $end;
			#/usr/local/lib/haxe/std/sys/Http.hx:428: characters 4-14
			$this->chunk_size = null;
			#/usr/local/lib/haxe/std/sys/Http.hx:429: lines 429-430
			if ($len === 0) {
				#/usr/local/lib/haxe/std/sys/Http.hx:430: characters 5-16
				return true;
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:431: characters 34-50
			$tmp3 = null;
			#/usr/local/lib/haxe/std/sys/Http.hx:431: characters 34-50
			if (($end < 0) || ($len < 0) || (($end + $len) > $buf->length)) {
				#/usr/local/lib/haxe/std/sys/Http.hx:431: characters 34-50
				throw new HxException(Error::OutsideBounds());
			} else {
				#/usr/local/lib/haxe/std/sys/Http.hx:431: characters 34-50
				$tmp3 = new Bytes($len, new Container(substr($buf->b->s, $end, $len)));
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:431: characters 4-55
			return $this->readChunk($chunk_re, $api, $tmp3, $len);
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:433: lines 433-434
		if ($this->chunk_size > 0) {
			#/usr/local/lib/haxe/std/sys/Http.hx:434: characters 4-36
			$api->writeBytes($buf, 0, $this->chunk_size);
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:435: characters 3-13
		$tmp4 = $this;
		#/usr/local/lib/haxe/std/sys/Http.hx:435: characters 3-20
		$tmp4->chunk_size = $tmp4->chunk_size - $len;
		#/usr/local/lib/haxe/std/sys/Http.hx:436: characters 3-14
		return true;
	}


	/**
	 * @param Output $api
	 * @param Socket $sock
	 * 
	 * @return void
	 */
	public function readHttpResponse ($api, $sock) {
		#/usr/local/lib/haxe/std/sys/Http.hx:242: characters 3-37
		$b = new BytesBuffer();
		#/usr/local/lib/haxe/std/sys/Http.hx:243: characters 3-13
		$k = 4;
		#/usr/local/lib/haxe/std/sys/Http.hx:244: characters 3-34
		$s = Bytes::alloc(4);
		#/usr/local/lib/haxe/std/sys/Http.hx:245: characters 3-30
		$sock->setTimeout($this->cnxTimeout);
		#/usr/local/lib/haxe/std/sys/Http.hx:246: lines 246-302
		while (true) {
			#/usr/local/lib/haxe/std/sys/Http.hx:247: characters 4-40
			$p = $sock->input->readBytes($s, 0, $k);
			#/usr/local/lib/haxe/std/sys/Http.hx:248: lines 248-249
			while ($p !== $k) {
				#/usr/local/lib/haxe/std/sys/Http.hx:249: characters 5-41
				$p = $p + $sock->input->readBytes($s, $p, $k - $p);
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:250: characters 4-21
			if (($k < 0) || ($k > $s->length)) {
				#/usr/local/lib/haxe/std/sys/Http.hx:250: characters 4-21
				throw new HxException(Error::OutsideBounds());
			} else {
				#/usr/local/lib/haxe/std/sys/Http.hx:250: characters 4-21
				$left = $b->b;
				#/usr/local/lib/haxe/std/sys/Http.hx:250: characters 4-21
				$this_s = substr($s->b->s, 0, $k);
				#/usr/local/lib/haxe/std/sys/Http.hx:250: characters 4-21
				$b->b = ($left . $this_s);
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:251: lines 251-301
			switch ($k) {
				case 1:
					#/usr/local/lib/haxe/std/sys/Http.hx:253: characters 5-22
					$c = ord($s->b->s[0]);
					#/usr/local/lib/haxe/std/sys/Http.hx:254: lines 254-255
					if ($c === 10) {
						#/usr/local/lib/haxe/std/sys/Http.hx:255: characters 6-11
						break 2;
					}
					#/usr/local/lib/haxe/std/sys/Http.hx:256: lines 256-259
					if ($c === 13) {
						#/usr/local/lib/haxe/std/sys/Http.hx:257: characters 6-7
						$k = 3;
					} else {
						#/usr/local/lib/haxe/std/sys/Http.hx:259: characters 6-7
						$k = 4;
					}
					break;
				case 2:
					#/usr/local/lib/haxe/std/sys/Http.hx:261: characters 5-22
					$c1 = ord($s->b->s[1]);
					#/usr/local/lib/haxe/std/sys/Http.hx:262: lines 262-269
					if ($c1 === 10) {
						#/usr/local/lib/haxe/std/sys/Http.hx:263: lines 263-264
						if (ord($s->b->s[0]) === 13) {
							#/usr/local/lib/haxe/std/sys/Http.hx:264: characters 7-12
							break 2;
						}
						#/usr/local/lib/haxe/std/sys/Http.hx:265: characters 6-7
						$k = 4;
					} else if ($c1 === 13) {
						#/usr/local/lib/haxe/std/sys/Http.hx:267: characters 6-7
						$k = 3;
					} else {
						#/usr/local/lib/haxe/std/sys/Http.hx:269: characters 6-7
						$k = 4;
					}
					break;
				case 3:
					#/usr/local/lib/haxe/std/sys/Http.hx:271: characters 5-22
					$c2 = ord($s->b->s[2]);
					#/usr/local/lib/haxe/std/sys/Http.hx:272: lines 272-285
					if ($c2 === 10) {
						#/usr/local/lib/haxe/std/sys/Http.hx:273: lines 273-278
						if (ord($s->b->s[1]) !== 13) {
							#/usr/local/lib/haxe/std/sys/Http.hx:274: characters 7-8
							$k = 4;
						} else if (ord($s->b->s[0]) !== 10) {
							#/usr/local/lib/haxe/std/sys/Http.hx:276: characters 7-8
							$k = 2;
						} else {
							#/usr/local/lib/haxe/std/sys/Http.hx:278: characters 7-12
							break 2;
						}
					} else if ($c2 === 13) {
						#/usr/local/lib/haxe/std/sys/Http.hx:280: lines 280-283
						if ((ord($s->b->s[1]) !== 10) || (ord($s->b->s[0]) !== 13)) {
							#/usr/local/lib/haxe/std/sys/Http.hx:281: characters 7-8
							$k = 1;
						} else {
							#/usr/local/lib/haxe/std/sys/Http.hx:283: characters 7-8
							$k = 3;
						}
					} else {
						#/usr/local/lib/haxe/std/sys/Http.hx:285: characters 6-7
						$k = 4;
					}
					break;
				case 4:
					#/usr/local/lib/haxe/std/sys/Http.hx:287: characters 5-22
					$c3 = ord($s->b->s[3]);
					#/usr/local/lib/haxe/std/sys/Http.hx:288: lines 288-300
					if ($c3 === 10) {
						#/usr/local/lib/haxe/std/sys/Http.hx:289: lines 289-294
						if (ord($s->b->s[2]) !== 13) {
							#/usr/local/lib/haxe/std/sys/Http.hx:290: characters 7-15
							continue 2;
						} else if ((ord($s->b->s[1]) !== 10) || (ord($s->b->s[0]) !== 13)) {
							#/usr/local/lib/haxe/std/sys/Http.hx:292: characters 7-8
							$k = 2;
						} else {
							#/usr/local/lib/haxe/std/sys/Http.hx:294: characters 7-12
							break 2;
						}
					} else if ($c3 === 13) {
						#/usr/local/lib/haxe/std/sys/Http.hx:296: lines 296-299
						if ((ord($s->b->s[2]) !== 10) || (ord($s->b->s[1]) !== 13)) {
							#/usr/local/lib/haxe/std/sys/Http.hx:297: characters 7-8
							$k = 3;
						} else {
							#/usr/local/lib/haxe/std/sys/Http.hx:299: characters 7-8
							$k = 1;
						}
					}
					break;
			}
		};
		#/usr/local/lib/haxe/std/sys/Http.hx:306: characters 17-54
		$_this = $b->getBytes()->toString();
		#/usr/local/lib/haxe/std/sys/Http.hx:306: characters 3-55
		$headers = \Array_hx::wrap(explode("\x0D\x0A", $_this));
		#/usr/local/lib/haxe/std/sys/Http.hx:308: characters 18-33
		if ($headers->length > 0) {
			#/usr/local/lib/haxe/std/sys/Http.hx:308: characters 18-33
			$headers->length--;
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:308: characters 3-34
		$response = array_shift($headers->arr);
		#/usr/local/lib/haxe/std/sys/Http.hx:309: characters 3-32
		$rp = \Array_hx::wrap(explode(" ", $response));
		#/usr/local/lib/haxe/std/sys/Http.hx:310: characters 3-36
		$status = \Std::parseInt(($rp->arr[1] ?? null));
		#/usr/local/lib/haxe/std/sys/Http.hx:311: lines 311-312
		if (($status === 0) || ($status === null)) {
			#/usr/local/lib/haxe/std/sys/Http.hx:312: characters 4-9
			throw new HxException("Response status error");
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:315: characters 3-16
		if ($headers->length > 0) {
			#/usr/local/lib/haxe/std/sys/Http.hx:315: characters 3-16
			$headers->length--;
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:315: characters 3-16
		array_pop($headers->arr);

		#/usr/local/lib/haxe/std/sys/Http.hx:316: characters 3-16
		if ($headers->length > 0) {
			#/usr/local/lib/haxe/std/sys/Http.hx:316: characters 3-16
			$headers->length--;
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:316: characters 3-16
		array_pop($headers->arr);

		#/usr/local/lib/haxe/std/sys/Http.hx:317: characters 3-18
		$this->responseHeaders = new StringMap();
		#/usr/local/lib/haxe/std/sys/Http.hx:318: characters 3-19
		$size = null;
		#/usr/local/lib/haxe/std/sys/Http.hx:319: characters 3-23
		$chunked = false;
		#/usr/local/lib/haxe/std/sys/Http.hx:320: lines 320-333
		$_g = 0;
		#/usr/local/lib/haxe/std/sys/Http.hx:320: lines 320-333
		while ($_g < $headers->length) {
			#/usr/local/lib/haxe/std/sys/Http.hx:320: characters 7-12
			$hline = ($headers->arr[$_g] ?? null);
			#/usr/local/lib/haxe/std/sys/Http.hx:320: lines 320-333
			$_g = $_g + 1;
			#/usr/local/lib/haxe/std/sys/Http.hx:321: characters 4-30
			$a = \Array_hx::wrap(explode(": ", $hline));
			#/usr/local/lib/haxe/std/sys/Http.hx:322: characters 16-25
			if ($a->length > 0) {
				#/usr/local/lib/haxe/std/sys/Http.hx:322: characters 16-25
				$a->length--;
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:322: characters 4-26
			$hname = array_shift($a->arr);
			#/usr/local/lib/haxe/std/sys/Http.hx:323: characters 4-56
			$hval = ($a->length === 1 ? ($a->arr[0] ?? null) : $a->join(": "));
			#/usr/local/lib/haxe/std/sys/Http.hx:324: characters 11-53
			$hval = ltrim(rtrim($hval));
			#/usr/local/lib/haxe/std/sys/Http.hx:325: characters 4-36
			$this->responseHeaders->data[$hname] = $hval;
			#/usr/local/lib/haxe/std/sys/Http.hx:326: characters 11-30
			$_g1 = strtolower($hname);
			#/usr/local/lib/haxe/std/sys/Http.hx:326: characters 11-30
			switch ($_g1) {
				case "content-length":
					#/usr/local/lib/haxe/std/sys/Http.hx:329: characters 6-10
					$size = \Std::parseInt($hval);
					break;
				case "transfer-encoding":
					#/usr/local/lib/haxe/std/sys/Http.hx:331: characters 6-13
					$chunked = strtolower($hval) === "chunked";
					break;
			}

		}

		#/usr/local/lib/haxe/std/sys/Http.hx:335: characters 3-19
		$this->onStatus($status);
		#/usr/local/lib/haxe/std/sys/Http.hx:337: characters 3-46
		$chunk_re = new \EReg("^([0-9A-Fa-f]+)[ ]*\x0D\x0A", "m");
		#/usr/local/lib/haxe/std/sys/Http.hx:338: characters 3-13
		$this->chunk_size = null;
		#/usr/local/lib/haxe/std/sys/Http.hx:339: characters 3-12
		$this->chunk_buf = null;
		#/usr/local/lib/haxe/std/sys/Http.hx:341: characters 3-22
		$bufsize = 1024;
		#/usr/local/lib/haxe/std/sys/Http.hx:342: characters 3-42
		$buf = Bytes::alloc($bufsize);
		#/usr/local/lib/haxe/std/sys/Http.hx:343: lines 343-374
		if ($chunked) {
			#/usr/local/lib/haxe/std/sys/Http.hx:344: lines 344-352
			try {
				#/usr/local/lib/haxe/std/sys/Http.hx:345: lines 345-349
				while (true) {
					#/usr/local/lib/haxe/std/sys/Http.hx:346: characters 6-52
					$len = $sock->input->readBytes($buf, 0, $bufsize);
					#/usr/local/lib/haxe/std/sys/Http.hx:347: lines 347-348
					if (!$this->readChunk($chunk_re, $api, $buf, $len)) {
						#/usr/local/lib/haxe/std/sys/Http.hx:348: characters 7-12
						break;
					}
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof Eof) {
					$e = $__hx__real_e;
					#/usr/local/lib/haxe/std/sys/Http.hx:351: characters 5-10
					throw new HxException("Transfer aborted");
				} else  throw $__hx__caught_e;
			}
		} else if ($size === null) {
			#/usr/local/lib/haxe/std/sys/Http.hx:354: lines 354-355
			if (!$this->noShutdown) {
				#/usr/local/lib/haxe/std/sys/Http.hx:355: characters 5-30
				$sock->shutdown(false, true);
			}
			#/usr/local/lib/haxe/std/sys/Http.hx:356: lines 356-362
			try {
				#/usr/local/lib/haxe/std/sys/Http.hx:357: lines 357-360
				while (true) {
					#/usr/local/lib/haxe/std/sys/Http.hx:358: characters 6-52
					$len1 = $sock->input->readBytes($buf, 0, $bufsize);
					#/usr/local/lib/haxe/std/sys/Http.hx:359: characters 6-31
					$api->writeBytes($buf, 0, $len1);
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof Eof) {
					$e1 = $__hx__real_e;
									} else  throw $__hx__caught_e;
			}
		} else {
			#/usr/local/lib/haxe/std/sys/Http.hx:364: characters 4-21
			$api->prepare($size);
			#/usr/local/lib/haxe/std/sys/Http.hx:365: lines 365-373
			try {
				#/usr/local/lib/haxe/std/sys/Http.hx:366: lines 366-370
				while ($size > 0) {
					#/usr/local/lib/haxe/std/sys/Http.hx:367: characters 6-81
					$len2 = $sock->input->readBytes($buf, 0, ($size > $bufsize ? $bufsize : $size));
					#/usr/local/lib/haxe/std/sys/Http.hx:368: characters 6-31
					$api->writeBytes($buf, 0, $len2);
					#/usr/local/lib/haxe/std/sys/Http.hx:369: characters 6-17
					$size = $size - $len2;
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof Eof) {
					$e2 = $__hx__real_e;
					#/usr/local/lib/haxe/std/sys/Http.hx:372: characters 5-10
					throw new HxException("Transfer aborted");
				} else  throw $__hx__caught_e;
			}
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:375: lines 375-376
		if ($chunked && (($this->chunk_size !== null) || ($this->chunk_buf !== null))) {
			#/usr/local/lib/haxe/std/sys/Http.hx:376: characters 4-9
			throw new HxException("Invalid chunk");
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:377: lines 377-378
		if (($status < 200) || ($status >= 400)) {
			#/usr/local/lib/haxe/std/sys/Http.hx:378: characters 4-9
			throw new HxException("Http Error #" . ($status??'null'));
		}
		#/usr/local/lib/haxe/std/sys/Http.hx:379: characters 3-14
		$api->close();
	}


	/**
	 * @param bool $post
	 * 
	 * @return void
	 */
	public function request ($post = null) {
		#/usr/local/lib/haxe/std/sys/Http.hx:45: lines 45-67
		$_gthis = $this;
		#/usr/local/lib/haxe/std/sys/Http.hx:46: characters 3-42
		$output = new BytesOutput();
		#/usr/local/lib/haxe/std/sys/Http.hx:47: characters 3-21
		$old = $this->onError;
		#/usr/local/lib/haxe/std/sys/Http.hx:48: characters 3-19
		$err = false;
		#/usr/local/lib/haxe/std/sys/Http.hx:49: lines 49-59
		$this->onError = function ($e)  use (&$err, &$old, &$_gthis, &$output) {
			#/usr/local/lib/haxe/std/sys/Http.hx:53: characters 4-47
			$_gthis->responseData = $output->getBytes()->toString();
			#/usr/local/lib/haxe/std/sys/Http.hx:55: characters 4-14
			$err = true;
			#/usr/local/lib/haxe/std/sys/Http.hx:57: characters 4-17
			$_gthis->onError = $old;
			#/usr/local/lib/haxe/std/sys/Http.hx:58: characters 4-14
			$_gthis->onError($e);
		};
		#/usr/local/lib/haxe/std/sys/Http.hx:60: characters 3-29
		$this->customRequest($post, $output);
		#/usr/local/lib/haxe/std/sys/Http.hx:61: lines 61-65
		if (!$err) {
			#/usr/local/lib/haxe/std/sys/Http.hx:65: characters 4-55
			$this->onData($this->responseData = $output->getBytes()->toString());
		}
	}
}


Boot::registerClass(Http::class, 'sys.Http');

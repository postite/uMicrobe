<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx
 */

namespace ufront\app;

use \ufront\core\SurpriseTools;
use \php\_Boot\HxClosure;
use \tink\core\FutureTrigger;
use \ufront\log\MessageType;
use \tink\core\Outcome;
use \ufront\web\context\HttpContext;
use \php\_Boot\HxException;
use \php\Boot;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\MPair;
use \haxe\Log;
use \ufront\web\url\filter\UFUrlFilter;
use \tink\core\_Future\Future_Impl_;
use \tink\core\_Callback\Callback_Impl_;
use \minject\Injector;
use \tink\core\Noise;
use \haxe\CallStack;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;
use \ufront\web\context\RequestCompletion;
use \ufront\web\HttpError;

/**
 * A HttpApplication responds to each request by generating a `HttpContext` and passing it through each stage of the request.
 * It is the base class for `UfrontApplication` and `ClientJsApplication`, and could be used for other implementations also.
 * #### Request life-cycle:
 * The `HttpApplication` is responsible for managing the lifecycle of each request.
 * The lifecycle is:
 * - Set up the HttpApplication.
 * - Initialise each of the modules (`UFRequestMiddleware`, `UFRequestHandler`, `UFResponseMiddleware`, `UFLogHandler` and `UFErrorHandler`).
 * - Create a `HttpContext` for each request, and then:
 * - Pass the `HttpContext` through the `UFRequestMiddleware`.
 * - Once the request middleware is complete, pass the `HttpContext` through each `UFRequestHandler`.
 * - Once the request handler is complete, pass the `HttpContext` through each `UFResponseMiddleware`.
 * - Once the response middleware is complete, pass the `HttpContext` through each `UFLogHandler`.
 * - Once the log handlers have completed, flush the `HttpResponse` from `HttpContext.response`, this sends the result to the browser.
 * - Any stage can result in an error, in which case the the `Error` and the `HttpContext` are passed through each `UFErrorHandler` and `UFLogHandler`.
 * - Any module can modify the `completion` flags of `HttpContext`, allowing it to skip other modules during the lifecycle of the request. See `HttpContext.completion`.
 * Each module returns a `Surprise`, allowing it to run asynchronously, and the request chain will wait for each module to complete before moving.
 * See the documentation for `this.execute` for more details.
 * #### Persistence:
 * Depending on the environment, a `HttpApplication` may be created once per request, or the application may be persistent and have many requests.
 * Client JS, NodeJS and Neko (when using `mod_tora` or `mod_neko` and the `Web.cacheModule` feature) are able to keep the same application alive and respond to multiple requests.
 * PHP, and Neko (when not using `Web.cacheModule`) create a new application for each request.
 */
class HttpApplication {
	/**
	 * @var object
	 * A position representing the current module.  Useful for diagnosing if something in our async chain never completed.
	 */
	public $currentModule;
	/**
	 * @var \Array_hx
	 * Error handlers to use if unhandled exceptions or Failures occur.
	 * See `UFErrorHandler` for details and examples.
	 */
	public $errorHandlers;
	/**
	 * @var Injector
	 * A dependency injector for the current application.
	 * Any dependencies injected here will be available to all parts of the application, including the `UFMiddleware`, `UFRequestHandler`, `UFLogHandler` and `UFErrorHandler` modules.
	 * It will also be used as the parent injector for each request, which will be used for `Controller` and `UFApi` objects.
	 * It is smart to include things available to all requests at this level: for example, app configuration, a `UFCache` implementations, a `UFMailer` implementation etc.
	 * You should avoid injecting things which might be particular to a given request: for example, a `UFHttpSession` should belong to just one request, not the whole application.
	 * If you wish to inject something into a specific request, you can use middleware and access the `HttpContext.injector`.
	 * The `this.inject()` method can be used as a helper to inject dependencies.
	 * The `injector` is injected into itself so that modules, APIs and controllers can have access to the injector also.
	 */
	public $injector;
	/**
	 * @var \Array_hx
	 * Log handlers to use for traces, logs, warnings and errors.
	 * See `UFLogHandler` for details and examples.
	 */
	public $logHandlers;
	/**
	 * @var \Array_hx
	 * Messages (traces, logs, warnings and errors) that are not associated with a specific request.
	 * These are generally recorded from calls to `trace()` or `haxe.Log.trace()`, which have no knowledge of the current request.
	 */
	public $messages;
	/**
	 * @var FutureObject
	 * A future trigger, for internal use, that lets us tell if all our modules (middleware and handlers) are ready for use.
	 */
	public $modulesReady;
	/**
	 * @var \Closure
	 * The original trace method before `HttpApplication` takes over `haxe.Log.trace`.
	 * This is useful if you wish to access the original method, for example if it is required to log messages in a unit testing framework.
	 * See also `OriginalTraceLogger`.
	 */
	public $originalTrace;
	/**
	 * @var string
	 * The relative path to the content directory.
	 */
	public $pathToContentDir;
	/**
	 * @var \Array_hx
	 * Handlers that can process this request and write a response.
	 * Examples:
	 * - `ufront.web.MVCHandler`
	 * - `ufront.remoting.RemotingHandler`
	 * - A handler which passes static assets to the client (in case your web server does not do this automatically)
	 * - A CSS Preprocesser handler (compile *.css requests from *.sass or *.less files using an appropriate CSS preprocessor)
	 * See `UFRequestHandler` for details and examples.
	 */
	public $requestHandlers;
	/**
	 * @var \Array_hx
	 * Middleware that can read and respond to the current HttpRequest, before the `UFRequestHandler` handlers execute.
	 * See `UFRequestMiddleware` for details and examples.
	 */
	public $requestMiddleware;
	/**
	 * @var \Array_hx
	 * Middleware that can read and respond to the current HttpRequest, after the `UFRequestHandler` handlers execute.
	 * See `UFResponseMiddleware` for details and examples.
	 */
	public $responseMiddleware;
	/**
	 * @var \Array_hx
	 * UrlFilters for the current application.
	 * These will be used for `HttpContext.getRequestUri()` and `HttpContext.generateUri()`.
	 * Modifying this list will only have an effect on future requests - modifications after a request has started will not affect that request.
	 * See `this.addUrlFilter()` and `this.clearUrlFilters()` below, and `UFUrlFilter` for more details.
	 */
	public $urlFilters;


	/**
	 * Start a new HttpApplication and initialise the internal state.
	 * 
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:142: characters 32-36
		$this->pathToContentDir = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:149: characters 3-25
		$this->requestMiddleware = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:150: characters 3-23
		$this->requestHandlers = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:151: characters 3-26
		$this->responseMiddleware = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:152: characters 3-19
		$this->logHandlers = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:153: characters 3-21
		$this->errorHandlers = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:154: characters 3-18
		$this->urlFilters = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:155: characters 3-16
		$this->messages = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:156: characters 3-28
		$this->injector = new Injector();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:157: characters 3-11
		$this->injector->mapType("minject.Injector", null)->toValue($this->injector);
	}


	/**
	 * Add one or more `UFErrorHandler` modules to this HttpApplication. This method is chainable.
	 * 
	 * @param UFErrorHandler $handler
	 * @param object $handlers
	 * @param bool $first
	 * 
	 * @return HttpApplication
	 */
	public function addErrorHandler ($handler = null, $handlers = null, $first = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:241: characters 3-62
		if ($first === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:241: characters 3-62
			$first = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:241: characters 3-62
		return $this->addModule($this->errorHandlers, $handler, $handlers, $first);
	}


	/**
	 * Add one or more `UFLogHandler` modules to this HttpApplication. This method is chainable.
	 * 
	 * @param UFLogHandler $logger
	 * @param object $loggers
	 * @param bool $first
	 * 
	 * @return HttpApplication
	 */
	public function addLogHandler ($logger = null, $loggers = null, $first = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:262: characters 3-58
		if ($first === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:262: characters 3-58
			$first = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:262: characters 3-58
		return $this->addModule($this->logHandlers, $logger, $loggers, $first);
	}


	/**
	 * Add one or more `UFMiddleware` modules to this HttpApplication. This method is chainable.
	 * 
	 * @param UFMiddleware $middlewareItem
	 * @param object $middleware
	 * @param bool $firstInLastOut
	 * 
	 * @return HttpApplication
	 */
	public function addMiddleware ($middlewareItem = null, $middleware = null, $firstInLastOut = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:252: lines 252-256
		if ($firstInLastOut === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:252: lines 252-256
			$firstInLastOut = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:253: characters 3-69
		$this->addModule($this->requestMiddleware, $middlewareItem, $middleware, $firstInLastOut);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:254: characters 3-70
		$this->addModule($this->responseMiddleware, $middlewareItem, $middleware, !$firstInLastOut);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:255: characters 3-14
		return $this;
	}


	/**
	 * @param \Array_hx $modulesArr
	 * @param mixed $newModule
	 * @param object $newModules
	 * @param bool $first
	 * 
	 * @return HttpApplication
	 */
	public function addModule ($modulesArr, $newModule = null, $newModules = null, $first) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:265: lines 265-269
		if ($newModule !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:266: characters 4-36
			$this->injector->injectInto($newModule);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:267: lines 267-268
			if ($first) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:267: characters 15-46
				$modulesArr->length = array_unshift($modulesArr->arr, $newModule);
			} else {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:268: characters 9-37
				$modulesArr->arr[$modulesArr->length] = $newModule;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:268: characters 9-37
				++$modulesArr->length;
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:270: lines 270-274
		if ($newModules !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:270: characters 43-53
			$newModule1 = $newModules->iterator();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:270: characters 43-53
			while ($newModule1->hasNext()) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:270: lines 270-274
				$newModule2 = $newModule1->next();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:271: characters 4-36
				$this->injector->injectInto($newModule2);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:272: lines 272-273
				if ($first) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:272: characters 15-46
					$modulesArr->length = array_unshift($modulesArr->arr, $newModule2);
				} else {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:273: characters 9-37
					$modulesArr->arr[$modulesArr->length] = $newModule2;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:273: characters 9-37
					++$modulesArr->length;
				}
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:275: characters 3-14
		return $this;
	}


	/**
	 * Add one or more `UFRequestHandler` modules to this HttpApplication. This method is chainable.
	 * 
	 * @param UFRequestHandler $handler
	 * @param object $handlers
	 * @param bool $first
	 * 
	 * @return HttpApplication
	 */
	public function addRequestHandler ($handler = null, $handlers = null, $first = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:235: characters 3-64
		if ($first === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:235: characters 3-64
			$first = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:235: characters 3-64
		return $this->addModule($this->requestHandlers, $handler, $handlers, $first);
	}


	/**
	 * Add one or more `UFRequestMiddleware` modules to this HttpApplication. This method is chainable.
	 * 
	 * @param UFRequestMiddleware $middlewareItem
	 * @param object $middleware
	 * @param bool $first
	 * 
	 * @return HttpApplication
	 */
	public function addRequestMiddleware ($middlewareItem = null, $middleware = null, $first = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:229: characters 3-75
		if ($first === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:229: characters 3-75
			$first = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:229: characters 3-75
		return $this->addModule($this->requestMiddleware, $middlewareItem, $middleware, $first);
	}


	/**
	 * Add one or more `UFRequestMiddleware` modules to this HttpApplication. This method is chainable.
	 * 
	 * @param UFResponseMiddleware $middlewareItem
	 * @param object $middleware
	 * @param bool $last
	 * 
	 * @return HttpApplication
	 */
	public function addResponseMiddleware ($middlewareItem = null, $middleware = null, $last = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:247: characters 3-76
		if ($last === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:247: characters 3-76
			$last = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:247: characters 3-76
		return $this->addModule($this->responseMiddleware, $middlewareItem, $middleware, !$last);
	}


	/**
	 * Add a URL filter to be used in `HttpContext.getRequestUri` and `HttpContext.generateUri`.
	 * This will take effect from the next request to execute, it will not affect a currently executing request.
	 * 
	 * @param UFUrlFilter $filter
	 * 
	 * @return void
	 */
	public function addUrlFilter ($filter) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:619: characters 3-44
		HttpError::throwIfNull($filter, "filter", new HxAnon([
			"fileName" => "ufront/app/HttpApplication.hx",
			"lineNumber" => 619,
			"className" => "ufront.app.HttpApplication",
			"methodName" => "addUrlFilter",
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:620: characters 3-28
		$_this = $this->urlFilters;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:620: characters 3-28
		$_this->arr[$_this->length] = $filter;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:620: characters 3-28
		++$_this->length;

	}


	/**
	 * @return FutureObject
	 */
	public function clearMessages () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:506: lines 506-508
		$_g1 = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:506: lines 506-508
		$_g = $this->messages->length;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:506: lines 506-508
		while ($_g1 < $_g) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:506: lines 506-508
			$_g1 = $_g1 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:506: characters 9-10
			$i = $_g1 - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:507: characters 4-18
			$_this = $this->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:507: characters 4-18
			if ($_this->length > 0) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:507: characters 4-18
				$_this->length--;
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:507: characters 4-18
			array_pop($_this->arr);

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:509: characters 3-33
		return SurpriseTools::success();
	}


	/**
	 * Remove existing URL filters.
	 * This will take effect from the next request to execute, it will not affect a currently executing request.
	 * 
	 * @return void
	 */
	public function clearUrlFilters () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:628: characters 3-18
		$this->urlFilters = new \Array_hx();
	}


	/**
	 * Perform `dispose()` on any modules that require it (those marked with the `UFInitRequired` interface).
	 * 
	 * @return FutureObject
	 */
	public function dispose () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:198: lines 198-213
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:199: characters 3-20
		$futures = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:200: lines 200-201
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:200: lines 200-201
		$_g1 = $this->getModulesThatRequireInit();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:200: lines 200-201
		while ($_g < $_g1->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:200: characters 9-15
			$module = ($_g1->arr[$_g] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:200: lines 200-201
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:201: characters 4-40
			$x = $module->dispose($this);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:201: characters 4-40
			$futures->arr[$futures->length] = $x;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:201: characters 4-40
			++$futures->length;

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:202: lines 202-212
		$ret = Future_Impl_::ofMany($futures)->map(function ($outcomes)  use (&$_gthis) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:203: characters 4-23
			$_gthis->modulesReady = null;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:204: lines 204-209
			$_g2 = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:204: lines 204-209
			while ($_g2 < $outcomes->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:204: characters 9-10
				$o = ($outcomes->arr[$_g2] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:204: lines 204-209
				$_g2 = $_g2 + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:205: lines 205-208
				switch ($o->index) {
					case 0:
												break;
					case 1:
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:206: characters 23-31
						return $o;
						break;
				}
			}

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:210: characters 4-39
			Log::$trace = $_gthis->originalTrace;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:211: characters 4-25
			return Outcome::Success(Noise::Noise());
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:202: lines 202-212
		return $ret->gather();
	}


	/**
	 * Execute the current request, passing the HttpContext through each module until the request is complete.
	 **Execution Chain:**
	 * - Setting the URL filters on the HttpContext.
	 * - Running `this.init()` to make sure all modules are initialized and ready to receive requests.
	 * - Executing each `UFRequestMiddleware` module, in order.
	 * - Executing each `UFRequestHandler` module, in order, until one of them is able to handle and process our request.
	 * - Executing each `UFResponseMiddleware` module, in order.
	 * - Executing each `UFLogHandler` module, in order, to log messages. We pass the current `HttpContext` and `this.appMessages` to each handler.
	 * - Flushing the response to the browser and concluding the request.
	 * Each module returns a `Surprise`, which is a `Future<Outcome>`.
	 * This waits until the module is complete, and returns either a `Success` (in which case we continue with the execute chain) or a `Failure`, in which case we handle the error.
	 * If errors occur (an unhandled exception is thrown or an `Outcome.Failure` is returned by one of the modules), we will then abandon the execution chain and work through the error handling chain.
	 **Error Handling Chain:**
	 * - Executing each `UFErrorHandler` module, in order, passing the relevant `Error` and `HttpContext` objects.
	 * - Executing each `UFResponseMiddleware` module, in order, if they haven't already been run.
	 * - Executing all  `UFLogHandler` module, in order, if they haven't already been run.
	 * - Flushing the response to the browser and concluding the request.
	 * - If any exceptions are thrown or failures encountered during the error handling chain, an exception will be thrown, so please be careful that middleware, error handlers and log handlers fail gracefully.
	 **Marking a stage as "complete":**
	 * Before executing any module in either the `execute` chain or the `handleError` chain, we check `HttpContext.completion` to see if the current request stage has been marked as completed.
	 * If the current stage has been marked as complete, the remaining modules in that stage will be skipped and the execution chain will continue from the next stage.
	 **Breaking the asynchronous chain:**
	 * If any modules return a `Surprise` that fails to trigger, the asynchronous call chain will be broken and the request will fail to complete.
	 * The synchronous platforms (Neko and PHP), when compiled with `-debug`, will alert you to which module in the chain failed to trigger correctly.
	 * At this stage there is no time-out functionality, so please be careful that all modules always return and trigger a valid Future.
	 * 
	 * @param HttpContext $httpContext
	 * 
	 * @return FutureObject
	 */
	public function execute ($httpContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:316: lines 316-377
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:317: characters 3-42
		$httpContext->setUrlFilters($this->urlFilters);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:319: lines 319-324
		$_this = $this->requestMiddleware;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:319: lines 319-324
		$result = [];
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:319: lines 319-324
		$_g1 = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:319: lines 319-324
		$_g = $_this->length;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:319: lines 319-324
		while ($_g1 < $_g) {
			unset($f);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:319: lines 319-324
			$_g1 = $_g1 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:319: lines 319-324
			$i = $_g1 - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:320: lines 320-323
			$m = $_this->arr[$i];
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:321: characters 5-21
			$f = new HxClosure($m, 'requestIn');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:321: characters 5-21
			$this1 = function ($ctx)  use (&$f) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:321: characters 5-21
				return $f($ctx);
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:320: lines 320-323
			$this2 = new MPair($this1, new HxAnon([
				"methodName" => "requestIn",
				"lineNumber" => -1,
				"fileName" => "",
				"customParams" => new \Array_hx(),
				"className" => \Type::getClassName(\Type::getClass($m)),
			]));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:319: lines 319-324
			$result[] = $this2;

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:319: lines 319-324
		$reqMidModules = \Array_hx::wrap($result);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:325: lines 325-330
		$_this1 = $this->requestHandlers;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:325: lines 325-330
		$result1 = [];
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:325: lines 325-330
		$_g11 = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:325: lines 325-330
		$_g2 = $_this1->length;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:325: lines 325-330
		while ($_g11 < $_g2) {
			unset($f1);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:325: lines 325-330
			$_g11 = $_g11 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:325: lines 325-330
			$i1 = $_g11 - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:326: lines 326-329
			$m1 = $_this1->arr[$i1];
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:327: characters 5-25
			$f1 = new HxClosure($m1, 'handleRequest');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:327: characters 5-25
			$this3 = function ($ctx1)  use (&$f1) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:327: characters 5-25
				return $f1($ctx1);
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:326: lines 326-329
			$this4 = new MPair($this3, new HxAnon([
				"methodName" => "handleRequest",
				"lineNumber" => -1,
				"fileName" => "",
				"customParams" => new \Array_hx(),
				"className" => \Type::getClassName(\Type::getClass($m1)),
			]));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:325: lines 325-330
			$result1[] = $this4;

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:325: lines 325-330
		$reqHandModules = \Array_hx::wrap($result1);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:331: lines 331-336
		$_this2 = $this->responseMiddleware;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:331: lines 331-336
		$result2 = [];
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:331: lines 331-336
		$_g12 = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:331: lines 331-336
		$_g3 = $_this2->length;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:331: lines 331-336
		while ($_g12 < $_g3) {
			unset($f2);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:331: lines 331-336
			$_g12 = $_g12 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:331: lines 331-336
			$i2 = $_g12 - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:332: lines 332-335
			$m2 = $_this2->arr[$i2];
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:333: characters 5-23
			$f2 = new HxClosure($m2, 'responseOut');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:333: characters 5-23
			$this5 = function ($ctx2)  use (&$f2) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:333: characters 5-23
				return $f2($ctx2);
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:332: lines 332-335
			$this6 = new MPair($this5, new HxAnon([
				"methodName" => "requestOut",
				"lineNumber" => -1,
				"fileName" => "",
				"customParams" => new \Array_hx(),
				"className" => \Type::getClassName(\Type::getClass($m2)),
			]));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:331: lines 331-336
			$result2[] = $this6;

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:331: lines 331-336
		$resMidModules = \Array_hx::wrap($result2);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:337: lines 337-342
		$_this3 = $this->logHandlers;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:337: lines 337-342
		$result3 = [];
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:337: lines 337-342
		$_g13 = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:337: lines 337-342
		$_g4 = $_this3->length;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:337: lines 337-342
		while ($_g13 < $_g4) {
			unset($appMessages, $f3);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:337: lines 337-342
			$_g13 = $_g13 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:337: lines 337-342
			$i3 = $_g13 - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:338: lines 338-341
			$m3 = $_this3->arr[$i3];
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:339: characters 5-15
			$f3 = new HxClosure($m3, 'log');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:339: characters 5-15
			$appMessages = $_gthis->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:338: lines 338-341
			$a = function ($ctx3)  use (&$f3, &$appMessages) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:339: characters 5-15
				return $f3($ctx3, $appMessages);
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:338: lines 338-341
			$this7 = new MPair($a, new HxAnon([
				"methodName" => "log",
				"lineNumber" => -1,
				"fileName" => "",
				"customParams" => \Array_hx::wrap([
					"httpContext",
					"appMessages",
				]),
				"className" => \Type::getClassName(\Type::getClass($m3)),
			]));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:337: lines 337-342
			$result3[] = $this7;

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:337: lines 337-342
		$logHandModules = \Array_hx::wrap($result3);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:349: characters 3-85
		$msg = "Begin executing request " . ($httpContext->getRequestUri()??'null');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:350: lines 350-357
		$allDone = Future_Impl_::_tryFailingFlatMap($this->init(), function ($n)  use (&$resMidModules, &$httpContext, &$reqMidModules, &$logHandModules, &$_gthis, &$reqHandModules) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:352: lines 352-357
			return Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($reqMidModules, $httpContext, RequestCompletion::CRequestMiddlewareComplete()), function ($n1)  use (&$resMidModules, &$httpContext, &$logHandModules, &$_gthis, &$reqHandModules) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:353: lines 353-357
				return Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($reqHandModules, $httpContext, RequestCompletion::CRequestHandlersComplete()), function ($n2)  use (&$resMidModules, &$httpContext, &$logHandModules, &$_gthis) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:354: lines 354-357
					return Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($resMidModules, $httpContext, RequestCompletion::CResponseMiddlewareComplete()), function ($n3)  use (&$httpContext, &$logHandModules, &$_gthis) {
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:355: lines 355-357
						return Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($logHandModules, $httpContext, RequestCompletion::CLogHandlersComplete()), function ($n4)  use (&$httpContext, &$_gthis) {
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:356: lines 356-357
							return Future_Impl_::_tryMap($_gthis->clearMessages(), function ($n5)  use (&$httpContext, &$_gthis) {
								#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:357: characters 23-50
								return $_gthis->flush($httpContext);
							});
						});
					});
				});
			});
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:361: lines 361-363
		$allDone->handle(Callback_Impl_::fromNiladic(function ()  use (&$httpContext) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:362: characters 4-84
			$msg1 = "End executing request " . ($httpContext->getRequestUri()??'null');
		}));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:368: lines 368-373
		if ((($httpContext->completion & (1 << Boot::dynamicField(RequestCompletion::CFlushComplete(), 'index'))) !== 0) === false) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:369: lines 369-371
			$msg2 = "Async callbacks never completed for URI " . ($httpContext->getRequestUri()??'null') . ":  " . (("The last active module was " . ($this->currentModule->className??'null') . "." . ($this->currentModule->methodName??'null'))??'null');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:372: characters 5-10
			throw new HxException($msg2);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:376: characters 3-17
		return $allDone;
	}


	/**
	 * Execute a collection of modules (middleware or handlers) in order, until either a certain flag is marked as complete for that request, or all the modules have completed sucessfully.
	 * Usage:
	 * ```haxe
	 * var reqHandlerModules = requestHandlers.map(function (r) return new Pair(r.handleRequest, HttpError.fakePosition(r,"handleRequest",['httpContext'])));
	 * requestHandlersDone:Future<Noise> = executeModules( reqHandlerModules, httpContext, CRequestHandler );
	 * ```
	 * Returns a future that will be a Success if the chain completed successfully, or a Failure containing the error otherwise.
	 * 
	 * @param \Array_hx $modules
	 * @param HttpContext $ctx
	 * @param RequestCompletion $flag
	 * 
	 * @return FutureObject
	 */
	public function executeModules ($modules, $ctx, $flag) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:400: lines 400-437
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:401: characters 3-67
		$done = new FutureTrigger();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:402: characters 3-60
		$msg = "  Begin executing modules for " . (\Std::string($flag)??'null');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:403: lines 403-434
		$runNext = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:403: lines 403-434
		$runNext = function ()  use (&$runNext, &$modules, &$e, &$_gthis, &$ctx, &$done, &$flag) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:404: characters 12-27
			if ($modules->length > 0) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:404: characters 12-27
				$modules->length--;
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:404: characters 4-28
			$m = array_shift($modules->arr);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:405: lines 405-433
			if (($flag !== null) && (($ctx->completion & (1 << Boot::dynamicField($flag, 'index'))) !== 0)) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:406: characters 5-92
				$msg1 = "  Finished execcuting modules for " . (\Std::string($flag)??'null') . " (completion flag was set)";
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:407: characters 5-35
				$done->trigger(Outcome::Success(Noise::Noise()));
			} else if ($m === null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:410: characters 5-90
				$msg2 = "  Finished execcuting modules for " . (\Std::string($flag)??'null') . " (all modules completed)";
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:411: lines 411-412
				if ($flag !== null) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:412: characters 6-9
					$ctx1 = $ctx;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:412: characters 6-32
					$ctx1->completion = $ctx1->completion | (1 << Boot::dynamicField($flag, 'index'));
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:413: characters 5-35
				$done->trigger(Outcome::Success(Noise::Noise()));
			} else {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:416: characters 5-24
				$moduleCb = $m->a;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:417: characters 5-24
				$_gthis->currentModule = $m->b;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:419: lines 419-424
				$moduleResult = null;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:420: lines 420-424
				try {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:419: lines 419-424
					$moduleResult = $moduleCb($ctx);
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$e = $__hx__real_e;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:422: characters 7-151
					$msg3 = "Caught error " . (\Std::string($e)??'null') . " while executing module " . ($_gthis->currentModule->className??'null') . "." . ($_gthis->currentModule->methodName??'null') . " in HttpApplication.executeModules()";
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:422: characters 7-151
					$_this = $ctx->messages;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:422: characters 7-151
					$_this->arr[$_this->length] = new HxAnon([
						"msg" => $msg3,
						"pos" => new HxAnon([
							"fileName" => "ufront/app/HttpApplication.hx",
							"lineNumber" => 422,
							"className" => "ufront.app.HttpApplication",
							"methodName" => "executeModules",
						]),
						"type" => MessageType::MLog(),
					]);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:422: characters 7-151
					++$_this->length;


					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:419: lines 419-424
					$moduleResult = new SyncFuture(new LazyConst(Outcome::Failure(HttpError::wrap($e, null, $_gthis->currentModule))));
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:425: lines 425-432
				$moduleResult->handle(function ($result)  use (&$runNext, &$_gthis, &$ctx, &$done) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:426: lines 426-431
					switch ($result->index) {
						case 0:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:427: characters 24-33
							$runNext();
							break;
						case 1:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:428: characters 20-21
							$e1 = $result->params[0];
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:430: characters 8-33
							$_gthis->handleError($e1, $ctx, $done);
							break;
					}
				});
			}
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:403: lines 403-434
		$runNext1 = $runNext;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:435: characters 3-12
		$runNext1();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:436: characters 3-25
		return $done;
	}


	/**
	 * Create a `HttpContext` for the current request and execute it.
	 * Available on PHP, Neko and Client JS.
	 * 
	 * @return FutureObject
	 */
	public function executeRequest () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:527: lines 527-529
		$context = ($this->pathToContentDir !== null ? HttpContext::createContext(null, null, $this->injector, null, null, $this->urlFilters, $this->pathToContentDir) : HttpContext::createContext(null, null, $this->injector, null, null, $this->urlFilters));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:530: characters 3-33
		return $this->execute($context);
	}


	/**
	 * @param HttpContext $ctx
	 * 
	 * @return Noise
	 */
	public function flush ($ctx) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:513: lines 513-516
		if (($ctx->completion & (1 << Boot::dynamicField(RequestCompletion::CFlushComplete(), 'index'))) === 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:514: characters 4-24
			$ctx->response->flush();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:515: characters 4-7
			$ctx1 = $ctx;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:515: characters 4-38
			$ctx1->completion = $ctx1->completion | (1 << Boot::dynamicField(RequestCompletion::CFlushComplete(), 'index'));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:517: characters 3-15
		return Noise::Noise();
	}


	/**
	 * @return \Array_hx
	 */
	public function getModulesThatRequireInit () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:216: characters 3-129
		$moduleSets = \Array_hx::wrap([
			$this->requestMiddleware,
			$this->requestHandlers,
			$this->responseMiddleware,
			$this->logHandlers,
			$this->errorHandlers,
		]);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:217: characters 3-42
		$modules = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:218: lines 218-221
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:218: lines 218-221
		while ($_g < $moduleSets->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:218: characters 9-12
			$set = ($moduleSets->arr[$_g] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:218: lines 218-221
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:219: lines 219-221
			$_g1 = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:219: lines 219-221
			while ($_g1 < $set->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:219: characters 10-16
				$module = ($set->arr[$_g1] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:219: lines 219-221
				$_g1 = $_g1 + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:220: lines 220-221
				if (($module instanceof UFInitRequired)) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:221: characters 6-33
					$modules->arr[$modules->length] = $module;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:221: characters 6-33
					++$modules->length;
				}
			}

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:222: characters 3-17
		return $modules;
	}


	/**
	 * Run through each of the error handlers, then the log handlers (if they haven't run already)
	 * Then mark the middleware and requestHandlers as complete, so the `execute` function can log, flush and finish the request.
	 * 
	 * @param TypedError $err
	 * @param HttpContext $ctx
	 * @param FutureTrigger $doneTrigger
	 * 
	 * @return void
	 */
	public function handleError ($err, $ctx, $doneTrigger) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:444: lines 444-503
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:445: lines 445-502
		if (($ctx->completion & (1 << Boot::dynamicField(RequestCompletion::CErrorHandlersTriggered(), 'index'))) === 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:446: characters 4-51
			$msg = "  Begin handling error " . (\Std::string($err)??'null');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:447: characters 4-7
			$ctx1 = $ctx;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:447: characters 4-49
			$ctx1->completion = $ctx1->completion | (1 << Boot::dynamicField(RequestCompletion::CErrorHandlersTriggered(), 'index'));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:449: lines 449-454
			$_this = $this->errorHandlers;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:449: lines 449-454
			$result = [];
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:449: lines 449-454
			$_g1 = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:449: lines 449-454
			$_g = $_this->length;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:449: lines 449-454
			while ($_g1 < $_g) {
				unset($err1, $f);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:449: lines 449-454
				$_g1 = $_g1 + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:449: lines 449-454
				$i = $_g1 - 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:450: lines 450-453
				$m = $_this->arr[$i];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:452: characters 6-66
				$args = \Array_hx::wrap([$err->toString()]);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:450: lines 450-453
				$b = new HxAnon([
					"methodName" => "handleError",
					"lineNumber" => -1,
					"fileName" => "",
					"customParams" => $args,
					"className" => \Type::getClassName(\Type::getClass($m)),
				]);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:451: characters 6-24
				$f = new HxClosure($m, 'handleError');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:451: characters 6-24
				$err1 = $err;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:450: lines 450-453
				$this1 = new MPair(function ($ctx2)  use (&$f, &$err1) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:451: characters 6-24
					return $f($err1, $ctx2);
				}, $b);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:449: lines 449-454
				$result[] = $this1;

			}

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:449: lines 449-454
			$errHandlerModules = \Array_hx::wrap($result);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:455: lines 455-460
			$_this1 = $this->responseMiddleware;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:455: lines 455-460
			$result1 = [];
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:455: lines 455-460
			$_g11 = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:455: lines 455-460
			$_g2 = $_this1->length;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:455: lines 455-460
			while ($_g11 < $_g2) {
				unset($f1);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:455: lines 455-460
				$_g11 = $_g11 + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:455: lines 455-460
				$i1 = $_g11 - 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:456: lines 456-459
				$m1 = $_this1->arr[$i1];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:457: characters 6-24
				$f1 = new HxClosure($m1, 'responseOut');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:457: characters 6-24
				$this2 = function ($ctx3)  use (&$f1) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:457: characters 6-24
					return $f1($ctx3);
				};
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:456: lines 456-459
				$this3 = new MPair($this2, new HxAnon([
					"methodName" => "requestOut",
					"lineNumber" => -1,
					"fileName" => "",
					"customParams" => new \Array_hx(),
					"className" => \Type::getClassName(\Type::getClass($m1)),
				]));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:455: lines 455-460
				$result1[] = $this3;

			}

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:455: lines 455-460
			$resMidModules = \Array_hx::wrap($result1);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:461: lines 461-466
			$_this2 = $this->logHandlers;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:461: lines 461-466
			$result2 = [];
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:461: lines 461-466
			$_g12 = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:461: lines 461-466
			$_g3 = $_this2->length;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:461: lines 461-466
			while ($_g12 < $_g3) {
				unset($appMessages, $f2);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:461: lines 461-466
				$_g12 = $_g12 + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:461: lines 461-466
				$i2 = $_g12 - 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:462: lines 462-465
				$m2 = $_this2->arr[$i2];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:463: characters 6-16
				$f2 = new HxClosure($m2, 'log');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:463: characters 6-16
				$appMessages = $_gthis->messages;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:462: lines 462-465
				$a = function ($ctx4)  use (&$f2, &$appMessages) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:463: characters 6-16
					return $f2($ctx4, $appMessages);
				};
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:462: lines 462-465
				$this4 = new MPair($a, new HxAnon([
					"methodName" => "log",
					"lineNumber" => -1,
					"fileName" => "",
					"customParams" => \Array_hx::wrap([
						"httpContext",
						"appMessages",
					]),
					"className" => \Type::getClassName(\Type::getClass($m2)),
				]));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:461: lines 461-466
				$result2[] = $this4;

			}

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:461: lines 461-466
			$logHandModules = \Array_hx::wrap($result2);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:468: lines 468-478
			$allDone = Future_Impl_::_tryFailingFlatMap(Future_Impl_::_tryFailingFlatMap($this->executeModules($errHandlerModules, $ctx, RequestCompletion::CErrorHandlersComplete()), function ($n)  use (&$ctx) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:472: characters 6-9
				$ctx5 = $ctx;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:472: characters 6-52
				$ctx5->completion = $ctx5->completion | (1 << Boot::dynamicField(RequestCompletion::CRequestHandlersComplete(), 'index'));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:473: characters 6-36
				return SurpriseTools::success();
			}), function ($n1)  use (&$resMidModules, &$logHandModules, &$_gthis, &$ctx) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:475: lines 475-478
				return Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($resMidModules, $ctx, RequestCompletion::CResponseMiddlewareComplete()), function ($n2)  use (&$logHandModules, &$_gthis, &$ctx) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:476: lines 476-478
					return Future_Impl_::_tryFailingFlatMap($_gthis->executeModules($logHandModules, $ctx, RequestCompletion::CLogHandlersComplete()), function ($n3)  use (&$_gthis, &$ctx) {
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:477: lines 477-478
						return Future_Impl_::_tryMap($_gthis->clearMessages(), function ($n4)  use (&$_gthis, &$ctx) {
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:478: characters 24-43
							return $_gthis->flush($ctx);
						});
					});
				});
			});
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:480: lines 480-483
			$allDone->handle(Callback_Impl_::fromNiladic(function ()  use (&$doneTrigger, &$err) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:481: characters 5-50
				$msg1 = "  End handling error " . (\Std::string($err)??'null');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:482: characters 5-38
				$doneTrigger->trigger(Outcome::Failure($err));
			}));
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:493: characters 4-151
			$msg2 = "You had an error after your error handler had already run.  Last active module: " . ($this->currentModule->className??'null') . "." . ($this->currentModule->methodName??'null');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:496: characters 5-21
			echo((\Std::string($msg2)??'null') . "\x0A");
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:497: characters 5-43
			echo((\Std::string("Error Data: " . (\Std::string($err->data)??'null'))??'null') . "\x0A");
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:498: characters 5-20
			$err->throwSelf();
		}
	}


	/**
	 * Initialise the modules used in this application.
	 * This will:
	 * - Redirect `haxe.Log.trace()` to save messages to `this.messages`.
	 * - Check all modules which require initialisation (`UFInitRequired`) and run those initialisations.
	 * - Return a `Surprise`, which triggers once the modules are complete, and is either a `Success` or a `Failure` if any modules failed to initialise.
	 * If `init()` is called more than once, it will return the same `Surprise` as the first `init()` call, meaning that modules are only initiated once per application.
	 * When responding to a request, `init()` is called as the first step of our chain in each `execute()` call.
	 * 
	 * @return FutureObject
	 */
	public function init () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:172: lines 172-193
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:173: characters 3-38
		$this->originalTrace = Log::$trace;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:174: lines 174-176
		Log::$trace = function ($msg, $pos = null)  use (&$_gthis) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:175: characters 4-55
			$_this = $_gthis->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:175: characters 4-55
			$_this->arr[$_this->length] = new HxAnon([
				"msg" => $msg,
				"pos" => $pos,
				"type" => MessageType::MTrace(),
			]);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:175: characters 4-55
			++$_this->length;
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:177: lines 177-191
		if ($this->modulesReady === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:178: characters 4-21
			$futures = new \Array_hx();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:179: lines 179-181
			$_g = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:179: lines 179-181
			$_g1 = $this->getModulesThatRequireInit();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:179: lines 179-181
			while ($_g < $_g1->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:179: characters 10-16
				$module = ($_g1->arr[$_g] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:179: lines 179-181
				$_g = $_g + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:180: characters 5-38
				$x = $module->init($this);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:180: characters 5-38
				$futures->arr[$futures->length] = $x;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:180: characters 5-38
				++$futures->length;

			}

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:182: lines 182-190
			$ret = Future_Impl_::ofMany($futures)->map(function ($outcomes) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:183: lines 183-188
				$_g2 = 0;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:183: lines 183-188
				while ($_g2 < $outcomes->length) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:183: characters 10-11
					$o = ($outcomes->arr[$_g2] ?? null);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:183: lines 183-188
					$_g2 = $_g2 + 1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:184: lines 184-187
					switch ($o->index) {
						case 0:
														break;
						case 1:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:185: characters 20-23
							$err = $o->params[0];
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:185: characters 26-45
							return Outcome::Failure($err);
							break;
					}
				}

				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:189: characters 5-26
				return Outcome::Success(Noise::Noise());
			});
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:182: lines 182-190
			$this->modulesReady = $ret->gather();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:192: characters 3-22
		return $this->modulesReady;
	}


	/**
	 * @param HttpContext $ctx
	 * @param string $msg
	 * 
	 * @return void
	 */
	public function logModule ($ctx, $msg) {
	}


	/**
	 * Set the relative path to the content directory.
	 * This will take effect from the next request to execute, it will not affect a currently executing request.
	 * 
	 * @param string $relativePath
	 * 
	 * @return void
	 */
	public function setContentDirectory ($relativePath) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/HttpApplication.hx:636: characters 3-34
		$this->pathToContentDir = $relativePath;
	}


	/**
	 * Use `neko.Web.cacheModule` to speed up requests if using neko and not using `-debug`.
	 * Using `cacheModule` will cause your app to execute normally on the first load, but then:
	 * - Keep the module loaded in memory on the server for subsequent page loads
	 * - Keep static variables initialised, so their values are kept between requests
	 * - Skip straight to our `executeRequest` function for each new request
	 * A few things to note:
	 * - This will have no effect on platforms other than Neko.
	 * - This will have no effect if you compile with `-debug`.
	 * - If you have multiple simultaneous requests, mod_neko may load up several instances of the module, and keep all of them cached, and pick one for each request.
	 * - Using `nekotools server` fails to clear the cache after you re-compile. You can either restart the server, or compile with `-debug` to avoid this problem.
	 * 
	 * @return void
	 */
	public function useModNekoCache () {
	}
}


Boot::registerClass(HttpApplication::class, 'ufront.app.HttpApplication');

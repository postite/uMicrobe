<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx
 */

namespace ufront\app;

use \ufront\web\MVCHandler;
use \ufront\log\MessageType;
use \ufront\log\RemotingLogger;
use \ufront\web\url\filter\PathInfoUrlFilter;
use \ufront\web\context\HttpContext;
use \php\Boot;
use \php\_Boot\HxException;
use \ufront\view\UFViewEngine;
use \tink\core\_Future\FutureObject;
use \ufront\api\UFAsyncApi;
use \ufront\log\FileLogger;
use \ufront\api\UFApiContext;
use \php\_Boot\HxString;
use \ufront\log\ServerConsoleLogger;
use \ufront\remoting\RemotingHandler;
use \ufront\web\url\filter\DirectoryUrlFilter;
use \haxe\ds\List_hx;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \ufront\log\BrowserConsoleLogger;
use \ufront\web\HttpError;

/**
 * A standard Ufront Application for executing requests on the server.
 * This extends `HttpApplication` for a "batteries included" way to set up your server-side Ufront app.
 * Out of the box it provides:
 * - The `MVCHandler` for macro powered routing and a model / view / controller style of responding to requests.
 * - The `RemotingHandler` for automatic Haxe powered remoting APIs.
 * - Tracing to a browser console during a web request or a remoting call, based on your `UfrontConfiguration`.
 * - Default URL Filtering rules, based on your `UfrontConfiguration`.
 * Ufront uses `minject.Injector` for dependency injection, and `UfrontApplication` adds several things to the injector, depending on your configuration:
 * - All of the controllers specified in your configuration (By default: every `Controller` imported into your app).
 * - All of the APIs specified in your configuration (by default: every `UFApi` imported into your app).
 * - The `UFAsyncApi` versions of any `UFApi` classes injected above.
 * - A singleton of the `UFViewEngine` specified in your `UfronConfiguration`.
 * - The implementation of `UFHttpSession` you chose in your `UfrontConfiguration`, to be instantiated on each request.
 * - The implementation of `UFAuthHandler` you chose in your `UfrontConfiguration`, to be instantiated on each request.
 * - A String named `viewPath` for the path to your view folder, specified in your `UfrontConfiguration`.
 * - A String name `scriptDirectory`, containing the path to the directory the current app is located in.
 * - A String name `contentDirectory`, containing the path to the content directory specified in your configuration.
 * Futher injections may take place in various middleware / handlers also.
 */
class UfrontApplication extends HttpApplication {
	/**
	 * @var List_hx
	 */
	public $appTemplatingEngines;
	/**
	 * @var object
	 * The configuration that was used when setting up the application.
	 * This is set during the constructor.  Changing values of this object is not likely to have any effect.
	 */
	public $configuration;
	/**
	 * @var bool
	 */
	public $firstRun;
	/**
	 * @var MVCHandler
	 * The MVC handler used for this application.
	 * This is made accessible for unit testing and logging purposes, you are unlikely to need to access it directly for anything else.
	 */
	public $mvcHandler;
	/**
	 * @var RemotingHandler
	 * The remoting handler used for this application.
	 * It is automatically set up if a `UFApiContext` class is supplied.
	 * This is made accessible for unit testing and logging purposes, you are unlikely to need to access it directly for anything else.
	 */
	public $remotingHandler;
	/**
	 * @var UFViewEngine
	 * The view engine being used with this application.
	 * It is configured using the `viewEngine` property on your `UfrontConfiguration`.
	 */
	public $viewEngine;


	/**
	 * Initialize a new UfrontApplication with the given configurations.
	 * @param ?optionsIn Options for UfrontApplication.  See `DefaultUfrontConfiguration` for details.  Any missing values will imply defaults should be used.
	 * 
	 * @param object $optionsIn
	 * 
	 * @return void
	 */
	public function __construct ($optionsIn = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:217: characters 29-39
		$this->appTemplatingEngines = new List_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:191: characters 17-21
		$this->firstRun = true;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:85: characters 3-10
		parent::__construct();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:87: characters 3-51
		$this->configuration = DefaultUfrontConfiguration::get();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:88: lines 88-91
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:88: lines 88-91
		$_g1 = \Reflect::fields($optionsIn);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:88: lines 88-91
		while ($_g < $_g1->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:88: characters 9-14
			$field = ($_g1->arr[$_g] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:88: lines 88-91
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:89: characters 4-50
			$value = \Reflect::field($optionsIn, $field);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:90: characters 4-51
			\Reflect::setField($this->configuration, $field, $value);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:94: characters 3-63
		$this->mvcHandler = new MVCHandler($this->configuration->indexController);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:95: characters 3-42
		$this->remotingHandler = new RemotingHandler();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:96: lines 96-98
		if ($this->configuration->remotingApi !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:97: characters 4-63
			$_this = $this->remotingHandler;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:97: characters 4-63
			$apiContext = $this->configuration->remotingApi;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:97: characters 4-63
			$_this->apiContexts->push($apiContext);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:97: characters 4-63
			$api1 = UFApiContext::getApisInContext($apiContext)->iterator();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:97: characters 4-63
			while ($api1->hasNext()) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:97: characters 4-63
				$api11 = $api1->next();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:97: characters 4-63
				$_this->apis->push($api11);
			}

		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:101: characters 23-48
		$controller = $this->configuration->controllers->iterator();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:101: characters 23-48
		while ($controller->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:101: lines 101-103
			$controller1 = $controller->next();
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/InjectorMapping.hx:46: characters 16-38
			$this->injector->mapRuntimeTypeOf($controller1)->_toClass($controller1);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:106: characters 3-58
		$this->addModule($this->requestMiddleware, null, $this->configuration->requestMiddleware, false);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:107: characters 3-52
		$this->addModule($this->requestHandlers, null, \Array_hx::wrap([
			$this->remotingHandler,
			$this->mvcHandler,
		]), false);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:108: characters 3-60
		$this->addModule($this->responseMiddleware, null, $this->configuration->responseMiddleware, true);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:109: characters 3-49
		$this->addModule($this->errorHandlers, null, $this->configuration->errorHandlers, false);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:112: lines 112-114
		if (!$this->configuration->disableServerTrace) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:113: characters 4-46
			$logger = new ServerConsoleLogger();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:113: characters 4-46
			$this->addModule($this->logHandlers, $logger, null, false);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:115: lines 115-118
		if (!$this->configuration->disableBrowserTrace) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:116: characters 4-47
			$logger1 = new BrowserConsoleLogger();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:116: characters 4-47
			$this->addModule($this->logHandlers, $logger1, null, false);

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:117: characters 4-41
			$logger2 = new RemotingLogger();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:117: characters 4-41
			$this->addModule($this->logHandlers, $logger2, null, false);

		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:119: lines 119-121
		if (null !== $this->configuration->logFile) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:120: characters 4-58
			$logger3 = new FileLogger($this->configuration->logFile);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:120: characters 4-58
			$this->addModule($this->logHandlers, $logger3, null, false);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:124: characters 3-37
		$path = $this->configuration->basePath;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:125: characters 3-63
		if (\StringTools::endsWith($path, "/")) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:125: characters 27-63
			$path = HxString::substr($path, 0, strlen($path) - 1);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:126: characters 3-50
		if (\StringTools::startsWith($path, "/")) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:126: characters 29-50
			$path = HxString::substr($path, 1);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:127: lines 127-128
		if (strlen($path) > 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:128: characters 4-54
			parent::addUrlFilter(new DirectoryUrlFilter($path));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:131: lines 131-132
		if ($this->configuration->urlRewrite !== true) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:132: characters 4-49
			parent::addUrlFilter(new PathInfoUrlFilter());
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:135: lines 135-138
		if ($this->configuration->sessionImplementation !== null) {
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/InjectorMapping.hx:46: characters 16-38
			$this->injector->mapType("ufront.web.session.UFHttpSession", null, null)->_toClass($this->configuration->sessionImplementation);
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/InjectorMapping.hx:46: characters 16-38
			$this->injector->mapRuntimeTypeOf($this->configuration->sessionImplementation)->_toClass($this->configuration->sessionImplementation);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:139: lines 139-142
		if ($this->configuration->authImplementation !== null) {
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/InjectorMapping.hx:46: characters 16-38
			$this->injector->mapType("ufront.auth.UFAuthHandler", null, null)->_toClass($this->configuration->authImplementation);
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/InjectorMapping.hx:46: characters 16-38
			$this->injector->mapRuntimeTypeOf($this->configuration->authImplementation)->_toClass($this->configuration->authImplementation);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:145: lines 145-148
		if ($this->configuration->viewEngine !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:146: characters 4-72
			$this->injector->mapType("String", "viewPath", null)->toValue($this->configuration->viewPath);
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/InjectorMapping.hx:59: characters 16-42
			$this->injector->mapType("ufront.view.UFViewEngine", null, null)->_toSingleton($this->configuration->viewEngine);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:150: lines 150-151
		if ($this->configuration->contentDirectory !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:151: characters 4-57
			$this->setContentDirectory($this->configuration->contentDirectory);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:153: lines 153-154
		if ($this->configuration->defaultLayout !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:154: characters 4-82
			$this->injector->mapType("String", "defaultLayout", null)->toValue($this->configuration->defaultLayout);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:163: lines 163-164
		$_g2 = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:163: lines 163-164
		$_g11 = $this->configuration->templatingEngines;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:163: lines 163-164
		while ($_g2 < $_g11->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:163: characters 9-11
			$te = ($_g11->arr[$_g2] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:163: lines 163-164
			$_g2 = $_g2 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:164: characters 4-29
			$this->addTemplatingEngine($te);
		}

	}


	/**
	 * Add support for a templating engine to your view engine.
	 * 
	 * @param object $engine
	 * 
	 * @return UfrontApplication
	 */
	public function addTemplatingEngine ($engine) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:220: characters 3-37
		$this->appTemplatingEngines->add($engine);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:221: lines 221-222
		if ($this->viewEngine !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:222: characters 4-44
			$_this = $this->viewEngine->engines;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:222: characters 4-44
			$_this->arr[$_this->length] = $engine;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:222: characters 4-44
			++$_this->length;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:223: characters 3-14
		return $this;
	}


	/**
	 * Execute the current request.
	 * The first time this runs, `this.initOnFirstExecute()` will be called, which runs some more initialization that requires the HttpContext to be ready before running.
	 * 
	 * @param HttpContext $httpContext
	 * 
	 * @return FutureObject
	 */
	public function execute ($httpContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:173: characters 3-54
		HttpError::throwIfNull($httpContext, "httpContext", new HxAnon([
			"fileName" => "ufront/app/UfrontApplication.hx",
			"lineNumber" => 173,
			"className" => "ufront.app.UfrontApplication",
			"methodName" => "execute",
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:175: lines 175-176
		if ($this->firstRun) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:176: characters 4-37
			$this->initOnFirstExecute($httpContext);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:180: characters 16-34
		$api = $this->configuration->apis->iterator();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:180: characters 16-34
		while ($api->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:180: lines 180-185
			$api1 = $api->next();
			#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/InjectorMapping.hx:59: characters 16-42
			$httpContext->injector->mapRuntimeTypeOf($api1)->_toSingleton($api1);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:182: characters 4-49
			$asyncApi = UFAsyncApi::getAsyncApi($api1);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:183: lines 183-184
			if ($asyncApi !== null) {
				#/usr/local/lib/haxe/lib/minject/git/src/lib/minject/InjectorMapping.hx:59: characters 16-42
				$httpContext->injector->mapRuntimeTypeOf($asyncApi)->_toSingleton($asyncApi);
			}
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:188: characters 3-38
		return parent::execute($httpContext);
	}


	/**
	 * @param HttpContext $httpContext
	 * 
	 * @return void
	 */
	public function initOnFirstExecute ($httpContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:193: characters 3-11
		$this->firstRun = false;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:194: characters 3-91
		$this->injector->mapType("String", "scriptDirectory", null)->toValue($httpContext->request->get_scriptDirectory());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:195: characters 3-85
		$this->injector->mapType("String", "contentDirectory", null)->toValue($httpContext->get_contentDirectory());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:198: lines 198-208
		if ($this->configuration->viewEngine !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:199: lines 199-207
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:200: characters 5-20
				$this->viewEngine = $this->injector->getValueForType("ufront.view.UFViewEngine", null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:201: characters 17-37
				$_g_head = $this->appTemplatingEngines->h;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:201: lines 201-203
				while ($_g_head !== null) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:201: lines 201-203
					$val = $_g_head->item;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:201: lines 201-203
					$_g_head = $_g_head->next;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:201: lines 201-203
					$te = $val;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:202: characters 6-42
					$_this = $this->viewEngine->engines;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:202: characters 6-42
					$_this->arr[$_this->length] = $te;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:202: characters 6-42
					++$_this->length;

				}

			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:206: characters 5-106
				$msg = "Failed to load view engine " . (\Type::getClassName($this->configuration->viewEngine)??'null') . ": " . (\Std::string($e)??'null');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:206: characters 5-106
				$_this1 = $httpContext->messages;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:206: characters 5-106
				$_this1->arr[$_this1->length] = new HxAnon([
					"msg" => $msg,
					"pos" => new HxAnon([
						"fileName" => "ufront/app/UfrontApplication.hx",
						"lineNumber" => 206,
						"className" => "ufront.app.UfrontApplication",
						"methodName" => "initOnFirstExecute",
					]),
					"type" => MessageType::MWarning(),
				]);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:206: characters 5-106
				++$_this1->length;
			}
		}
	}


	/**
	 * Shortcut for `remotingHandler.loadApiContext()`. See `RemotingHandler.loadApiContext()` for details.
	 * 
	 * @param Class $apiContext
	 * 
	 * @return UfrontApplication
	 */
	public function loadApiContext ($apiContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:213: characters 3-47
		$_this = $this->remotingHandler;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:213: characters 3-47
		$_this->apiContexts->push($apiContext);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:213: characters 3-47
		$api1 = UFApiContext::getApisInContext($apiContext)->iterator();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:213: characters 3-47
		while ($api1->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:213: characters 3-47
			$api11 = $api1->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:213: characters 3-47
			$_this->apis->push($api11);
		}


		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontApplication.hx:214: characters 3-14
		return $this;
	}
}


Boot::registerClass(UfrontApplication::class, 'ufront.app.UfrontApplication');

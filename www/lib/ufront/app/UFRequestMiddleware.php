<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UFMiddleware.hx
 */

namespace ufront\app;

use \ufront\web\context\HttpContext;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxAnon;

/**
 * Middleware that runs before the request has been processed.
 * #### Examples:
 * - Performing HTTP Redirects
 * - Initiating a `HttpSession` based on a cookie.
 * - Checking if an existing cached response is available and can be used.
 * - Begin a timer to measure the performance of the request.
 * #### Details:
 * This middleware has full access to the HttpContext of the current request, so can modify the request details or write to the response.
 * To prevent the request from executing the request handler, you can modify the values of `ctx.completion` to skip remaining request middleware, the request handler, any response middleware, logging, or flushing the response to the browser. See `HttpContext.completion`.
 */
interface UFRequestMiddleware {
	/**
	 * Perform an action on the current request.
	 * @param ctx The current `HttpContext`, allowing you to read `HttpRequest` details, or write to the `HttpResponse`.
	 * @return A `Surprise` indicating the middleware has completed and the request may continue. If a `Failure` is returned the `UFErrorHandler` modules will be run.
	 * 
	 * @param HttpContext $ctx
	 * 
	 * @return FutureObject
	 */
	public function requestIn ($ctx) ;
}


Boot::registerClass(UFRequestMiddleware::class, 'ufront.app.UFRequestMiddleware');
Boot::registerMeta(UFRequestMiddleware::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));

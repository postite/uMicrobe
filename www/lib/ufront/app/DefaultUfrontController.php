<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx
 */

namespace ufront\app;

use \ufront\core\SurpriseTools;
use \ufront\log\MessageType;
use \haxe\rtti\Meta;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \haxe\Log;
use \ufront\web\Controller;
use \haxe\CallStack;
use \php\_Boot\HxAnon;

/**
 * A simple controller to use if no other is specified.
 * It shows a simple page that describes the configuration needed to set `UfrontConfiguration.indexController`.
 */
class DefaultUfrontController extends Controller {


	/**
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:276: lines 276-282
		parent::__construct();
	}


	/**
	 * @return FutureObject
	 */
	public function execute () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:276: lines 276-282
		$uriParts = $this->context->actionContext->get_uriParts();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:276: lines 276-282
		$params = $this->context->request->get_params();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:276: lines 276-282
		$method = $this->context->request->get_httpMethod();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:276: lines 276-282
		$this->context->actionContext->controller = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:276: lines 276-282
		$this->context->actionContext->action = "execute";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:276: lines 276-282
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:278: lines 278-281
			$this->context->actionContext->action = "showMessage";
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:278: lines 278-281
			$this->context->actionContext->args = new \Array_hx();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:278: lines 278-281
			$this->context->actionContext->get_uriParts()->splice(0, 0);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:278: lines 278-281
			$this1 = (Boot::dynamicField(Boot::dynamicField(Meta::getFields(Boot::getClass(DefaultUfrontController::class)), 'showMessage'), 'wrapResult')->arr[0] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:278: lines 278-281
			$wrappingRequired = $this1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:278: lines 278-281
			$result = $this->wrapResult($this->showMessage(), $wrappingRequired);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:278: lines 278-281
			$this->setContextActionResultWhenFinished($result);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:278: lines 278-281
			return $result;
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:276: lines 276-282
			return SurpriseTools::asSurpriseError($e, "Uncaught error while executing " . (\Std::string($this->context->actionContext->controller)??'null') . "." . ($this->context->actionContext->action??'null') . "()", new HxAnon([
				"fileName" => "ufront/app/UfrontConfiguration.hx",
				"lineNumber" => 276,
				"className" => "ufront.app.DefaultUfrontController",
				"methodName" => "execute",
			]));
		}
	}


	/**
	 * @return string
	 */
	public function showMessage () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:279: characters 3-46
		$pos = new HxAnon([
			"fileName" => "ufront/app/UfrontConfiguration.hx",
			"lineNumber" => 279,
			"className" => "ufront.app.DefaultUfrontController",
			"methodName" => "showMessage",
		]);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:279: characters 3-46
		if ($this->context !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:279: characters 3-46
			$_this = $this->context->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:279: characters 3-46
			$_this->arr[$_this->length] = new HxAnon([
				"msg" => "Your Ufront App is almost ready.",
				"pos" => $pos,
				"type" => MessageType::MTrace(),
			]);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:279: characters 3-46
			++$_this->length;
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:279: characters 3-46
			(Log::$trace)("Your Ufront App is almost ready.", $pos);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/app/UfrontConfiguration.hx:280: characters 3-63
		return "<!DOCTYPE html>\x0A<html>\x0A<head>\x0A\x09<title>New Ufront App</title>\x0A\x09<link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\" rel=\"stylesheet\" />\x0A</head>\x0A<body style=\"padding-top: 30px;\">\x0A\x09<div class=\"container\">\x0A\x09\x09<div class=\"jumbotron\">\x0A\x09\x09\x09<h1>Almost done!</h1>\x0A\x09\x09\x09<p>Your new Ufront App is almost ready to go. You will need to add some routes and let ufront know about them:</p>\x0A\x09\x09\x09<pre><code>\x0A\x09app = new UfrontApplication({\x0A\x09\x09indexController: MySiteController,\x0A\x09});\x0A\x09app.executeRequest();\x0A\x09\x09\x09</code></pre>\x0A\x09\x09\x09<p>See the Getting Started tutorial for more information.</p>\x0A\x09\x09</div>\x0A\x09</div>\x0A</body>\x0A</html>\x0A";
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(DefaultUfrontController::class, 'ufront.app.DefaultUfrontController');
Boot::registerMeta(DefaultUfrontController::class, new HxAnon(["fields" => new HxAnon(["showMessage" => new HxAnon(["wrapResult" => \Array_hx::wrap([7])])])]));
DefaultUfrontController::__hx__init();

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/UFCache.hx
 */

namespace ufront\cache;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * A selection of errors that can occur in a `UFCache` or `UFCacheSync` implementation.
 */
class CacheError extends HxEnum {
	/**
	 * An attempt to read from the cache failed.
	 * 
	 * @param string $err
	 * 
	 * @return CacheError
	 */
	static public function ECacheNotReadable ($err) {
		return new CacheError('ECacheNotReadable', 2, [$err]);
	}


	/**
	 * An attempt to write to the cache failed.
	 * 
	 * @param string $err
	 * 
	 * @return CacheError
	 */
	static public function ECacheNotWriteable ($err) {
		return new CacheError('ECacheNotWriteable', 3, [$err]);
	}


	/**
	 * The requested item did not exist in the cache.
	 * 
	 * @return CacheError
	 */
	static public function ENotInCache () {
		static $inst = null;
		if (!$inst) $inst = new CacheError('ENotInCache', 0, []);
		return $inst;
	}


	/**
	 * An attempt to connect to the cache failed.
	 * 
	 * @param string $err
	 * 
	 * @return CacheError
	 */
	static public function EUnableToConnect ($err) {
		return new CacheError('EUnableToConnect', 1, [$err]);
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			2 => 'ECacheNotReadable',
			3 => 'ECacheNotWriteable',
			0 => 'ENotInCache',
			1 => 'EUnableToConnect',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'ECacheNotReadable' => 1,
			'ECacheNotWriteable' => 1,
			'ENotInCache' => 0,
			'EUnableToConnect' => 1,
		];
	}
}


Boot::registerClass(CacheError::class, 'ufront.cache.CacheError');

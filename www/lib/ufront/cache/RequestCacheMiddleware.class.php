<?php

// Generated by Haxe 3.4.7
class ufront_cache_RequestCacheMiddleware implements ufront_app_UFMiddleware{
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.cache.RequestCacheMiddleware::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}}
	public $cacheConnection;
	public $cache;
	public function requestIn($ctx) {
		$GLOBALS['%s']->push("ufront.cache.RequestCacheMiddleware::requestIn");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ufront_core_SurpriseTools::success();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function responseOut($ctx) {
		$GLOBALS['%s']->push("ufront.cache.RequestCacheMiddleware::responseOut");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->cache === null) {
			$this->cache = $this->cacheConnection->getNamespace("ufront.middleware.RequestCache");
		}
		$tmp = null;
		$tmp1 = null;
		$tmp2 = null;
		if(strtolower($ctx->request->get_httpMethod()) === "get") {
			$tmp2 = $ctx->actionContext !== null;
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			$tmp1 = _hx_field($ctx->actionContext, "controller") !== null;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $ctx->actionContext->action !== null;
		} else {
			$tmp = false;
		}
		if($tmp) {
			$tmp3 = ufront_cache_RequestCacheMiddleware::$contentTypesToCache;
			if($tmp3->indexOf($ctx->response->get_contentType(), null) > -1) {
				$controller = $ctx->actionContext->controller;
				$cls = Type::getClass($controller);
				$controllerMeta = haxe_rtti_Meta::getType($cls);
				$fieldMeta = haxe_rtti_Meta::getFields($cls);
				$fieldMeta1 = Reflect::field($fieldMeta, $ctx->actionContext->action);
				$tmp4 = null;
				if(!ufront_cache_RequestCacheMiddleware::hasCacheMeta($controllerMeta)) {
					$tmp4 = ufront_cache_RequestCacheMiddleware::hasCacheMeta($fieldMeta1);
				} else {
					$tmp4 = true;
				}
				if($tmp4) {
					$uri = $ctx->request->get_uri();
					$tmp5 = $this->cache;
					$f = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($ctx->response));
					$this1 = $f;
					{
						$tmp6 = tink_core__Future_Future_Impl_::_map($tmp5->set($uri, $this1), array(new _hx_lambda(array(&$ctx, &$uri), "ufront_cache_RequestCacheMiddleware_0"), 'execute'));
						$GLOBALS['%s']->pop();
						return $tmp6;
					}
				}
			}
		}
		{
			$tmp3 = ufront_core_SurpriseTools::success();
			$GLOBALS['%s']->pop();
			return $tmp3;
		}
		$GLOBALS['%s']->pop();
	}
	public function invalidate() {
		$GLOBALS['%s']->push("ufront.cache.RequestCacheMiddleware::invalidate");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->cache->clear();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	static $hnamespace = "ufront.middleware.RequestCache";
	static $metaName = "cacheRequest";
	static $contentTypesToCache;
	static function hasCacheMeta($meta) {
		$GLOBALS['%s']->push("ufront.cache.RequestCacheMiddleware::hasCacheMeta");
		$__hx__spos = $GLOBALS['%s']->length;
		$field = ufront_cache_RequestCacheMiddleware::$metaName;
		{
			$tmp = _hx_has_field($meta, $field);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'ufront.cache.RequestCacheMiddleware'; }
}
ufront_cache_RequestCacheMiddleware::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("rtti" => (new _hx_array(array((new _hx_array(array("cacheConnection", "ufront.cache.UFCacheConnection", ""))))))))));
ufront_cache_RequestCacheMiddleware::$contentTypesToCache = (new _hx_array(array("text/plain", "text/html", "text/xml", "text/css", "text/csv", "application/json", "application/javascript", "application/atom+xml", "application/rdf+xml", "application/rss+xml", "application/soap+xml", "application/xhtml+xml", "application/xml", "application/xml-dtd")));
function ufront_cache_RequestCacheMiddleware_0(&$ctx, &$uri, $result) {
	{
		$GLOBALS['%s']->push("ufront.cache.RequestCacheMiddleware::responseOut@117");
		$__hx__spos = $GLOBALS['%s']->length;
		if($result->index === 1) {
			$e = _hx_deref($result)->params[0];
			{
				$msg = "Failed to save cache for " . _hx_string_or_null($uri) . ": ";
				$msg1 = _hx_string_or_null($msg) . Std::string($e);
				$ctx->messages->push(_hx_anonymous(array("msg" => $msg1, "pos" => _hx_anonymous(array("fileName" => "RequestCacheMiddleware.hx", "lineNumber" => 121, "className" => "ufront.cache.RequestCacheMiddleware", "methodName" => "responseOut")), "type" => ufront_log_MessageType::$MError)));
			}
		}
		{
			$tmp = tink_core_Outcome::Success(tink_core_Noise::$Noise);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

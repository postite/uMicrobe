<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/UFCache.hx
 */

namespace ufront\cache;

use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxAnon;

/**
 * `UFCacheSync` is an interface describing a basic synchronous caching system that can be used in Ufront projects.
 * Similar to `UFCache`, this allows you to write code against an interface, and support multiple caching solutions.
 * The primary difference is that `UFCacheSync` methods run synchronously, and return an `Outcome` rather than a `Future`.
 * If you are confident that your target platform performs mostly synchronous operations (eg. Neko or PHP), then using `UFCacheSync` allows you to avoid having to handle asynchronous code.
 */
interface UFCacheSync {
	/**
	 * Clear all items in this cache / namespace synchronously.
	 * 
	 * @return Outcome
	 */
	public function clearSync () ;


	/**
	 * Attempt to get an item from a cache.
	 * If it is not found, use a function to generate the value and save that value to the cache for next time.
	 * This operation is synchronous.
	 * 
	 * @param string $id
	 * @param \Closure $fn
	 * 
	 * @return Outcome
	 */
	public function getOrSetSync ($id, $fn = null) ;


	/**
	 * Fetch a cached item with a given ID synchronously.
	 * 
	 * @param string $id
	 * 
	 * @return Outcome
	 */
	public function getSync ($id) ;


	/**
	 * Remove a cached item with a given ID synchronously.
	 * 
	 * @param string $id
	 * 
	 * @return Outcome
	 */
	public function removeSync ($id) ;


	/**
	 * Set an item in the cache with a given ID and value synchronously.
	 * 
	 * @param string $id
	 * @param mixed $value
	 * 
	 * @return Outcome
	 */
	public function setSync ($id, $value) ;
}


Boot::registerClass(UFCacheSync::class, 'ufront.cache.UFCacheSync');
Boot::registerMeta(UFCacheSync::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));

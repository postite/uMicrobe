<?php

// Generated by Haxe 3.4.7
class ufront_cache_MemoryCache implements ufront_cache_UFCacheSync, ufront_cache_UFCache{
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->map = new haxe_ds_StringMap();
		$GLOBALS['%s']->pop();
	}}
	public $map;
	public function getSync($id) {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::getSync");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->map->exists($id)) {
			$tmp = tink_core_Outcome::Success($this->map->get($id));
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$tmp = tink_core_Outcome::Failure(ufront_cache_CacheError::$ENotInCache);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setSync($id, $value) {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::setSync");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->map->set($id, $value);
		{
			$tmp = tink_core_Outcome::Success($value);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getOrSetSync($id, $fn = null) {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::getOrSetSync");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->map->exists($id)) {
			$tmp = tink_core_Outcome::Success($this->map->get($id));
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$this1 = $this->map;
			$v = call_user_func($fn);
			$this1->set($id, $v);
			{
				$tmp = tink_core_Outcome::Success($v);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function removeSync($id) {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::removeSync");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->map->remove($id);
		{
			$tmp = tink_core_Outcome::Success(tink_core_Noise::$Noise);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function clearSync() {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::clearSync");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->map = new haxe_ds_StringMap();
		{
			$tmp = tink_core_Outcome::Success(tink_core_Noise::$Noise);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get($id) {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::get");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($this->getSync($id)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function set($id, $value) {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::set");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$ret = $value->map(array(new _hx_lambda(array(&$_gthis, &$id), "ufront_cache_MemoryCache_0"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getOrSet($id, $fn = null) {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::getOrSet");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		if($this->map->exists($id)) {
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success($this->map->get($id))));
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$this1 = call_user_func($fn);
			$ret = $this1->map(array(new _hx_lambda(array(&$_gthis, &$id), "ufront_cache_MemoryCache_1"), 'execute'));
			{
				$tmp = $ret->gather();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function clear() {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::clear");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($this->clearSync()));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function remove($id) {
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::remove");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($this->removeSync($id)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'ufront.cache.MemoryCache'; }
}
function ufront_cache_MemoryCache_0(&$_gthis, &$id, $v) {
	{
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::set@88");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis->map->set($id, $v);
		{
			$tmp = tink_core_Outcome::Success($v);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_cache_MemoryCache_1(&$_gthis, &$id, $v) {
	{
		$GLOBALS['%s']->push("ufront.cache.MemoryCache::getOrSet@96");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis->map->set($id, $v);
		{
			$tmp = tink_core_Outcome::Success($v);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

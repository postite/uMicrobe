<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/UFCache.hx
 */

namespace ufront\cache;

use \php\Boot;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxAnon;

/**
 * A `UFCache` is an interface that describes a basic asynchronous caching system that can be used in Ufront projects.
 * Writing against the `UFCache` interface rather than a specific implementation allows you to support multiple caching solutions.
 * This means you can change your cache technology at a later date without needing to rewrite your code.
 * It also allows libraries to write code that will work regardless of cache technology - see for example `CacheSession`.
 * `UFCache` has methods that are designed to work asynchronously and return a `Surprise`.
 * If you prefer to work with synchronous methods, you can use a `UFCacheSync` instead.
 */
interface UFCache {
	/**
	 * Clear all items in this cache / namespace.
	 * 
	 * @return FutureObject
	 */
	public function clear () ;


	/**
	 * Fetch a cached item with a given ID.
	 * 
	 * @param string $id
	 * 
	 * @return FutureObject
	 */
	public function get ($id) ;


	/**
	 * Attempt to get an item from a cache.
	 * If it is not found, use a function to generate the value and save that value to the cache for next time.
	 * The function may return a regular value or a future.
	 * 
	 * @param string $id
	 * @param \Closure $fn
	 * 
	 * @return FutureObject
	 */
	public function getOrSet ($id, $fn = null) ;


	/**
	 * Remove a cached item with a given ID.
	 * 
	 * @param string $id
	 * 
	 * @return FutureObject
	 */
	public function remove ($id) ;


	/**
	 * Set an item in the cache with a given ID and value. The value provided can be a regular value or a future.
	 * 
	 * @param string $id
	 * @param FutureObject $value
	 * 
	 * @return FutureObject
	 */
	public function set ($id, $value) ;
}


Boot::registerClass(UFCache::class, 'ufront.cache.UFCache');
Boot::registerMeta(UFCache::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));

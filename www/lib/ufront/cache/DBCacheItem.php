<?php
/**
 * Generated by Haxe 3.4.7
 * Haxe source file: /usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx
 */

namespace ufront\cache;

use \ufront\db\_ValidationErrors\ValidationErrors_Impl_;
use \php\Boot;
use \sys\db\Manager;
use \ufront\db\Object_hx;
use \php\_Boot\HxAnon;

/**
 * `DBCacheItem` is a model that saves cached items to a database table.
 * Different namespaces are differentiated via the `namespace` column.
 */
class DBCacheItem extends Object_hx {
	/**
	 * @var Manager
	 */
	static public $manager;


	/**
	 * @var string
	 */
	public $cacheID;
	/**
	 * @var object
	 */
	public $cache_data;
	/**
	 * @var mixed
	 */
	public $data;
	/**
	 * @var mixed
	 */
	public $data_data;
	/**
	 * @var string
	 */
	public $namespace;


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:132: lines 132-136
		parent::__construct();
	}


	/**
	 * @return void
	 */
	public function _validationsFromMacros () {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/DBMacros.hx:785: characters 5-35
		parent::_validationsFromMacros();
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/DBMacros.hx:151: characters 31-125
		if ($this->namespace === null) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/DBMacros.hx:151: characters 55-125
			ValidationErrors_Impl_::set($this->validationErrors, "namespace", "namespace" . " is a required field.");
		}
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/DBMacros.hx:151: characters 31-125
		if ($this->cacheID === null) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/DBMacros.hx:151: characters 55-125
			ValidationErrors_Impl_::set($this->validationErrors, "cacheID", "cacheID" . " is a required field.");
		}
	}


	/**
	 * @return mixed
	 */
	public function get_data () {
		#/usr/local/lib/haxe/lib/record-macros/git/src/sys/db/RecordMacros.hx:1278: characters 19-153
		if ($this->cache_data === null) {
			#/usr/local/lib/haxe/lib/record-macros/git/src/sys/db/RecordMacros.hx:1278: characters 43-112
			$this->cache_data = new HxAnon([
				"v" => DBCacheItem::$manager->doUnserialize("data_data", $this->data_data),
			]);
			#/usr/local/lib/haxe/lib/record-macros/git/src/sys/db/RecordMacros.hx:1278: characters 114-150
			\Reflect::setField($this, "data_data", new HxAnon());
		}
		#/usr/local/lib/haxe/lib/record-macros/git/src/sys/db/RecordMacros.hx:1278: characters 155-171
		return $this->cache_data->v;
	}


	/**
	 * @param mixed $_v
	 * 
	 * @return mixed
	 */
	public function set_data ($_v) {
		#/usr/local/lib/haxe/lib/record-macros/git/src/sys/db/RecordMacros.hx:1284: characters 19-105
		if ($this->cache_data === null) {
			#/usr/local/lib/haxe/lib/record-macros/git/src/sys/db/RecordMacros.hx:1284: characters 43-63
			$this->cache_data = new HxAnon([
				"v" => $_v,
			]);
			#/usr/local/lib/haxe/lib/record-macros/git/src/sys/db/RecordMacros.hx:1284: characters 65-82
			$this->data_data = new HxAnon();
		} else {
			#/usr/local/lib/haxe/lib/record-macros/git/src/sys/db/RecordMacros.hx:1284: characters 91-105
			$this->cache_data->v = $_v;
		}
		#/usr/local/lib/haxe/lib/record-macros/git/src/sys/db/RecordMacros.hx:1284: characters 107-116
		return $_v;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$manager = new Manager(Boot::getClass(DBCacheItem::class));
	}
}


Boot::registerClass(DBCacheItem::class, 'ufront.cache.DBCacheItem');
Boot::registerMeta(DBCacheItem::class, new HxAnon([
	"obj" => new HxAnon([
		"rtti" => \Array_hx::wrap(["oy4:namey11:DBCacheItemy7:indexesaoy4:keysay9:namespacehy6:uniquefgoR3aR4y7:cacheIDhR5tghy9:relationsahy7:hfieldsby2:idoR0R9y6:isNullfy1:tjy17:sys.db.RecordType:0:0gy8:modifiedoR0R13R10fR11jR12:11:0gR4oR0R4R10fR11jR12:9:1i255gR6oR0R6R10fR11jR12:9:1i255gy4:dataoR0R14R10tR11jR12:30:0gy7:createdoR0R15R10fR11r11ghy3:keyaR9hy6:fieldsar8r18r10r12r14r16hg"]),
		"ufRelationships" => null,
		"hxSerializationFields" => \Array_hx::wrap([
			"namespace",
			"cacheID",
			"data",
			"id",
			"created",
			"modified",
		]),
	]),
]));
Boot::registerGetters('ufront\\cache\\DBCacheItem', [
	'data' => true
]);
Boot::registerSetters('ufront\\cache\\DBCacheItem', [
	'data' => true
]);
DBCacheItem::__hx__init();

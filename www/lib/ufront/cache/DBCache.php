<?php
/**
 * Generated by Haxe 3.4.7
 * Haxe source file: /usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx
 */

namespace ufront\cache;

use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \sys\db\Manager;
use \tink\core\Noise;
use \haxe\CallStack;
use \tink\core\_Lazy\LazyConst;

/**
 * `DBCache` is a `UFCache` and `UFCacheSync` implementation that saves cached items to a `DBCacheItem` database table.
 * Each namespace will be differentiated by the `namespace` column on the `DBCacheItem` table.
 * Only works on `sys` platforms, if compiled with `ufront-orm`.
 */
class DBCache implements UFCacheSync, UFCache {
	/**
	 * @var string
	 * The namespace of the current cache.
	 * The cached items will still be stored in the `DBCacheItem` table, but this will set the `namespace` column.
	 */
	public $namespace;


	/**
	 * @param string $namespace
	 * 
	 * @return void
	 */
	public function __construct ($namespace) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:41: characters 2-28
		$this->namespace = $namespace;
	}


	/**
	 * Implementation of `UFCache.clear()`.
	 * 
	 * @return FutureObject
	 */
	public function clear () {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:122: characters 9-35
		return new SyncFuture(new LazyConst($this->clearSync()));
	}


	/**
	 * Implementation of `UFCacheSync.clearSync()`.
	 * 
	 * @return Outcome
	 */
	public function clearSync () {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:89: lines 89-93
		try {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:90: characters 3-54
			DBCacheItem::$manager->unsafeDelete("DELETE FROM DBCacheItem WHERE namespace = " . (Manager::quoteAny($this->namespace)??'null'));
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:91: characters 3-24
			return Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:93: characters 22-123
			return Outcome::Failure(CacheError::ECacheNotWriteable("Unable to clear \"" . ($this->namespace??'null') . "\" items from DBCacheItem table: " . (\Std::string($e)??'null')));
		}
	}


	/**
	 * Implementation of `UFCache.get()`.
	 * 
	 * @param string $id
	 * 
	 * @return FutureObject
	 */
	public function get ($id) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:98: characters 9-35
		return new SyncFuture(new LazyConst($this->getSync($id)));
	}


	/**
	 * Implementation of `UFCache.getOrSet()`.
	 * 
	 * @param string $id
	 * @param \Closure $fn
	 * 
	 * @return FutureObject
	 */
	public function getOrSet ($id, $fn = null) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:108: characters 2-32
		$getResult = $this->getSync($id);
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:109: lines 109-112
		if (Boot::dynamicField($getResult, 'index') === 1) {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:109: characters 16-25
			if (Boot::dynamicField($getResult->params[0], 'index') === 0) {
				#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:110: characters 30-45
				return $this->set($id, $fn());
			} else {
				#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:111: characters 11-35
				return new SyncFuture(new LazyConst($getResult));
			}
		} else {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:111: characters 11-35
			return new SyncFuture(new LazyConst($getResult));
		}
	}


	/**
	 * Implementation of `UFCacheSync.getOrSetSync()`.
	 * 
	 * @param string $id
	 * @param \Closure $fn
	 * 
	 * @return Outcome
	 */
	public function getOrSetSync ($id, $fn = null) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:71: characters 2-32
		$getResult = $this->getSync($id);
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:72: lines 72-75
		if (Boot::dynamicField($getResult, 'index') === 1) {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:72: characters 16-25
			if (Boot::dynamicField($getResult->params[0], 'index') === 0) {
				#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:73: characters 30-49
				return $this->setSync($id, $fn());
			} else {
				#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:74: characters 11-20
				return $getResult;
			}
		} else {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:74: characters 11-20
			return $getResult;
		}
	}


	/**
	 * Implementation of `UFCacheSync.getSync()`.
	 * 
	 * @param string $id
	 * 
	 * @return Outcome
	 */
	public function getSync ($id) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:45: lines 45-51
		try {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:46: characters 3-82
			$item = DBCacheItem::$manager->unsafeObjects("SELECT * FROM DBCacheItem WHERE " . (Manager::quoteAny($this->namespace)??'null') . ((" = namespace AND cacheID = " . (Manager::quoteAny($id)??'null'))??'null'), true)->first();
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:48: lines 48-49
			if ($item !== null) {
				#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:48: characters 22-42
				return Outcome::Success($item->get_data());
			} else {
				#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:49: characters 9-31
				return Outcome::Failure(CacheError::ENotInCache());
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:51: characters 22-102
			return Outcome::Failure(CacheError::ECacheNotReadable("Unable to read from DBCacheItem table: " . (\Std::string($e)??'null')));
		}
	}


	/**
	 * Implementation of `UFCache.remove()`.
	 * 
	 * @param string $id
	 * 
	 * @return FutureObject
	 */
	public function remove ($id) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:117: characters 9-38
		return new SyncFuture(new LazyConst($this->removeSync($id)));
	}


	/**
	 * Implementation of `UFCacheSync.removeSync()`.
	 * 
	 * @param string $id
	 * 
	 * @return Outcome
	 */
	public function removeSync ($id) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:80: lines 80-84
		try {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:81: characters 3-70
			DBCacheItem::$manager->unsafeDelete("DELETE FROM DBCacheItem WHERE namespace = " . (Manager::quoteAny($this->namespace)??'null') . ((" AND cacheID = " . (Manager::quoteAny($id)??'null'))??'null'));
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:82: characters 3-24
			return Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:84: characters 22-142
			return Outcome::Failure(CacheError::ECacheNotWriteable("Unable to delete item \"" . ($id??'null') . "\" in namespace \"" . ($this->namespace??'null') . "\" from DBCacheItem table: " . (\Std::string($e)??'null')));
		}
	}


	/**
	 * Implementation of `UFCache.set()`.
	 * 
	 * @param string $id
	 * @param FutureObject $value
	 * 
	 * @return FutureObject
	 */
	public function set ($id, $value) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:102: lines 102-104
		$_gthis = $this;
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:103: characters 9-56
		$ret = $value->map(function ($v)  use (&$id, &$_gthis) {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:103: characters 34-54
			return $_gthis->setSync($id, $v);
		});
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:103: characters 9-56
		return $ret->gather();
	}


	/**
	 * Implementation of `UFCacheSync.setSync()`.
	 * 
	 * @param string $id
	 * @param mixed $value
	 * 
	 * @return Outcome
	 */
	public function setSync ($id, $value) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:56: lines 56-66
		try {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:57: characters 3-82
			$item = DBCacheItem::$manager->unsafeObjects("SELECT * FROM DBCacheItem WHERE " . (Manager::quoteAny($this->namespace)??'null') . ((" = namespace AND cacheID = " . (Manager::quoteAny($id)??'null'))??'null'), true)->first();
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:58: lines 58-59
			if ($item === null) {
				#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:59: characters 4-28
				$item = new DBCacheItem();
			}
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:60: characters 3-29
			$item->namespace = $this->namespace;
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:61: characters 3-20
			$item->cacheID = $id;
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:62: characters 3-20
			$item->set_data($value);
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:63: characters 3-14
			$item->save();
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:64: characters 3-26
			return Outcome::Success($value);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:66: characters 22-102
			return Outcome::Failure(CacheError::ECacheNotWriteable("Unable to write to DBCacheItem table: " . (\Std::string($e)??'null')));
		}
	}
}


Boot::registerClass(DBCache::class, 'ufront.cache.DBCache');

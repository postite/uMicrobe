<?php

// Generated by Haxe 3.4.7
class ufront_cache_DBCache implements ufront_cache_UFCacheSync, ufront_cache_UFCache{
	public function __construct($namespace) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.cache.DBCache::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->{"namespace"} = $namespace;
		$GLOBALS['%s']->pop();
	}}
	public $namespace;
	public function getSync($id) {
		$GLOBALS['%s']->push("ufront.cache.DBCache::getSync");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			$item = ufront_cache_DBCacheItem::$manager;
			$item1 = "SELECT * FROM DBCacheItem WHERE " . _hx_string_or_null(sys_db_Manager::quoteAny($this->{"namespace"}));
			$item2 = $item->unsafeObjects(_hx_string_or_null($item1) . _hx_string_or_null((" = namespace AND cacheID = " . _hx_string_or_null(sys_db_Manager::quoteAny($id)))), true)->first();
			if($item2 !== null) {
				$tmp = tink_core_Outcome::Success($item2->get_data());
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$tmp = tink_core_Outcome::Failure(ufront_cache_CacheError::$ENotInCache);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				{
					$tmp = tink_core_Outcome::Failure(ufront_cache_CacheError::ECacheNotReadable("Unable to read from DBCacheItem table: " . Std::string($e)));
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function setSync($id, $value) {
		$GLOBALS['%s']->push("ufront.cache.DBCache::setSync");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			$item = ufront_cache_DBCacheItem::$manager;
			$item1 = "SELECT * FROM DBCacheItem WHERE " . _hx_string_or_null(sys_db_Manager::quoteAny($this->{"namespace"}));
			$item2 = $item->unsafeObjects(_hx_string_or_null($item1) . _hx_string_or_null((" = namespace AND cacheID = " . _hx_string_or_null(sys_db_Manager::quoteAny($id)))), true)->first();
			if($item2 === null) {
				$item2 = new ufront_cache_DBCacheItem();
			}
			$item2->{"namespace"} = $this->{"namespace"};
			$item2->cacheID = $id;
			$item2->set_data($value);
			$item2->save();
			{
				$tmp = tink_core_Outcome::Success($value);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				{
					$tmp = tink_core_Outcome::Failure(ufront_cache_CacheError::ECacheNotWriteable("Unable to write to DBCacheItem table: " . Std::string($e)));
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function getOrSetSync($id, $fn = null) {
		$GLOBALS['%s']->push("ufront.cache.DBCache::getOrSetSync");
		$__hx__spos = $GLOBALS['%s']->length;
		$getResult = $this->getSync($id);
		if($getResult->index === 1) {
			if(_hx_deref($getResult)->params[0]->index === 0) {
				$tmp = $this->setSync($id, call_user_func($fn));
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$GLOBALS['%s']->pop();
				return $getResult;
			}
		} else {
			$GLOBALS['%s']->pop();
			return $getResult;
		}
		$GLOBALS['%s']->pop();
	}
	public function removeSync($id) {
		$GLOBALS['%s']->push("ufront.cache.DBCache::removeSync");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			$tmp = ufront_cache_DBCacheItem::$manager;
			$tmp1 = "DELETE FROM DBCacheItem WHERE namespace = " . _hx_string_or_null(sys_db_Manager::quoteAny($this->{"namespace"}));
			$tmp->unsafeDelete(_hx_string_or_null($tmp1) . _hx_string_or_null((" AND cacheID = " . _hx_string_or_null(sys_db_Manager::quoteAny($id)))));
			{
				$tmp2 = tink_core_Outcome::Success(tink_core_Noise::$Noise);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp2 = "Unable to delete item \"" . _hx_string_or_null($id) . "\" in namespace \"" . _hx_string_or_null($this->{"namespace"}) . "\" from DBCacheItem table: ";
				{
					$tmp = tink_core_Outcome::Failure(ufront_cache_CacheError::ECacheNotWriteable(_hx_string_or_null($tmp2) . Std::string($e)));
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function clearSync() {
		$GLOBALS['%s']->push("ufront.cache.DBCache::clearSync");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			$tmp = ufront_cache_DBCacheItem::$manager;
			$tmp->unsafeDelete("DELETE FROM DBCacheItem WHERE namespace = " . _hx_string_or_null(sys_db_Manager::quoteAny($this->{"namespace"})));
			{
				$tmp2 = tink_core_Outcome::Success(tink_core_Noise::$Noise);
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp1 = "Unable to clear \"" . _hx_string_or_null($this->{"namespace"}) . "\" items from DBCacheItem table: ";
				{
					$tmp = tink_core_Outcome::Failure(ufront_cache_CacheError::ECacheNotWriteable(_hx_string_or_null($tmp1) . Std::string($e)));
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function get($id) {
		$GLOBALS['%s']->push("ufront.cache.DBCache::get");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($this->getSync($id)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function set($id, $value) {
		$GLOBALS['%s']->push("ufront.cache.DBCache::set");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$ret = $value->map(array(new _hx_lambda(array(&$_gthis, &$id), "ufront_cache_DBCache_0"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getOrSet($id, $fn = null) {
		$GLOBALS['%s']->push("ufront.cache.DBCache::getOrSet");
		$__hx__spos = $GLOBALS['%s']->length;
		$getResult = $this->getSync($id);
		if($getResult->index === 1) {
			if(_hx_deref($getResult)->params[0]->index === 0) {
				$tmp = $this->set($id, call_user_func($fn));
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($getResult));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($getResult));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function remove($id) {
		$GLOBALS['%s']->push("ufront.cache.DBCache::remove");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($this->removeSync($id)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function clear() {
		$GLOBALS['%s']->push("ufront.cache.DBCache::clear");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($this->clearSync()));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'ufront.cache.DBCache'; }
}
function ufront_cache_DBCache_0(&$_gthis, &$id, $v) {
	{
		$GLOBALS['%s']->push("ufront.cache.DBCache::set@103");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $_gthis->setSync($id, $v);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx
 */

namespace ufront\cache;

use \tink\core\Outcome;
use \haxe\ds\StringMap;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\Noise;
use \tink\core\_Lazy\LazyConst;

/**
 * A `UFCache` and `UFCacheSync` implementation that works by using a `Map<String,Dynamic>` that can persist through requests.
 * Caveats:
 * - Some platforms do not keep static variables initialised between requests. For example PHP will never keep cached items between requests.
 * - Neko must be using `neko.Web.cacheModule()` to keep the cache alive between requests.
 * - This does not currently use the memory sharing tools in `mod_tora`. As such a different cache may be kept for each thread handling requests.
 * - This may lead to high memory usage if the data is not cleared occasionally. Use with care.
 */
class MemoryCache implements UFCacheSync, UFCache {
	/**
	 * @var StringMap
	 */
	public $map;


	/**
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:48: characters 3-18
		$this->map = new StringMap();
	}


	/**
	 * Implementation of `UFCache.remove()`.
	 * 
	 * @return FutureObject
	 */
	public function clear () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:100: characters 10-36
		return new SyncFuture(new LazyConst($this->clearSync()));
	}


	/**
	 * Implementation of `UFCacheSync.clearSync()`.
	 * 
	 * @return Outcome
	 */
	public function clearSync () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:78: characters 3-18
		$this->map = new StringMap();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:79: characters 3-24
		return Outcome::Success(Noise::Noise());
	}


	/**
	 * Implementation of `UFCache.get()`.
	 * 
	 * @param string $id
	 * 
	 * @return FutureObject
	 */
	public function get ($id) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:84: characters 10-36
		return new SyncFuture(new LazyConst($this->getSync($id)));
	}


	/**
	 * Implementation of `UFCache.getOrSet()`.
	 * 
	 * @param string $id
	 * @param \Closure $fn
	 * 
	 * @return FutureObject
	 */
	public function getOrSet ($id, $fn = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:91: lines 91-96
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:93: lines 93-96
		if (array_key_exists($id, $this->map->data)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:94: characters 5-36
			return new SyncFuture(new LazyConst(Outcome::Success(($this->map->data[$id] ?? null))));
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:96: characters 5-56
			$ret = $fn()->map(function ($v)  use (&$id, &$_gthis) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:96: characters 44-53
				$_gthis->map->data[$id] = $v;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:96: characters 29-54
				return Outcome::Success($v);
			});
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:96: characters 5-56
			return $ret->gather();
		}
	}


	/**
	 * Implementation of `UFCacheSync.getOrSetSync()`.
	 * 
	 * @param string $id
	 * @param \Closure $fn
	 * 
	 * @return Outcome
	 */
	public function getOrSetSync ($id, $fn = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:65: lines 65-68
		if (array_key_exists($id, $this->map->data)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:66: characters 5-23
			return Outcome::Success(($this->map->data[$id] ?? null));
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:68: characters 14-28
			$this1 = $this->map;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:68: characters 14-28
			$v = $fn();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:68: characters 14-28
			$this1->data[$id] = $v;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:68: characters 5-30
			return Outcome::Success($v);
		}
	}


	/**
	 * Implementation of `UFCacheSync.getSync()`.
	 * 
	 * @param string $id
	 * 
	 * @return Outcome
	 */
	public function getSync ($id) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:53: lines 53-56
		if (array_key_exists($id, $this->map->data)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:54: characters 5-23
			return Outcome::Success(($this->map->data[$id] ?? null));
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:56: characters 5-27
			return Outcome::Failure(CacheError::ENotInCache());
		}
	}


	/**
	 * Implementation of `UFCache.clear()`.
	 * 
	 * @param string $id
	 * 
	 * @return FutureObject
	 */
	public function remove ($id) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:104: characters 10-39
		return new SyncFuture(new LazyConst($this->removeSync($id)));
	}


	/**
	 * Implementation of `UFCacheSync.removeSync()`.
	 * 
	 * @param string $id
	 * 
	 * @return Outcome
	 */
	public function removeSync ($id) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:72: characters 3-19
		$this->map->remove($id);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:73: characters 3-24
		return Outcome::Success(Noise::Noise());
	}


	/**
	 * Implementation of `UFCache.set()`.
	 * 
	 * @param string $id
	 * @param FutureObject $value
	 * 
	 * @return FutureObject
	 */
	public function set ($id, $value) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:87: lines 87-88
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:88: characters 10-62
		$ret = $value->map(function ($v)  use (&$id, &$_gthis) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:88: characters 50-59
			$_gthis->map->data[$id] = $v;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:88: characters 35-60
			return Outcome::Success($v);
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:88: characters 10-62
		return $ret->gather();
	}


	/**
	 * Implementation of `UFCacheSync.setSync()`.
	 * 
	 * @param string $id
	 * @param mixed $value
	 * 
	 * @return Outcome
	 */
	public function setSync ($id, $value) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:60: characters 19-34
		$this->map->data[$id] = $value;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/cache/MemoryCache.hx:60: characters 3-36
		return Outcome::Success($value);
	}
}


Boot::registerClass(MemoryCache::class, 'ufront.cache.MemoryCache');

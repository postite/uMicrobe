<?php
/**
 * Generated by Haxe 3.4.7
 * Haxe source file: /usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx
 */

namespace ufront\cache;

use \php\Boot;
use \sys\db\Manager;
use \ufront\api\UFApi;
use \sys\db\TableCreate;
use \php\_Boot\HxAnon;

/**
 * A simple API to setup and clear `DBCacheItem`s from the database.
 */
class DBCacheApi extends UFApi {


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:141: lines 141-173
		parent::__construct();
	}


	/**
	 * Delete all items from the cache.
	 * 
	 * @return void
	 */
	public function clearAll () {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:153: characters 2-36
		DBCacheItem::$manager->unsafeDelete("DELETE FROM DBCacheItem WHERE TRUE");
	}


	/**
	 * Delete a particular item from the cache.
	 * 
	 * @param string $namespace
	 * @param string $cacheID
	 * 
	 * @return void
	 */
	public function clearItem ($namespace, $cacheID) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:163: characters 2-74
		DBCacheItem::$manager->unsafeDelete("DELETE FROM DBCacheItem WHERE namespace = " . (Manager::quoteAny($namespace)??'null') . ((" AND cacheID = " . (Manager::quoteAny($cacheID)??'null'))??'null'));
	}


	/**
	 * Delete items from the cache where the `cacheID` is "like" the string `cacheIDLike`.
	 * You can use a "%" character as a wildcard.
	 * 
	 * @param string $namespace
	 * @param string $cacheIDLike
	 * 
	 * @return void
	 */
	public function clearItemLike ($namespace, $cacheIDLike) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:171: characters 2-83
		DBCacheItem::$manager->unsafeDelete("DELETE FROM DBCacheItem WHERE namespace = " . (Manager::quoteAny($namespace)??'null') . ((" AND cacheID LIKE " . (Manager::quoteAny($cacheIDLike)??'null'))??'null'));
	}


	/**
	 * Delete all items from a certain namespace.
	 * 
	 * @param string $namespace
	 * 
	 * @return void
	 */
	public function clearNamespace ($namespace) {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:158: characters 2-53
		DBCacheItem::$manager->unsafeDelete("DELETE FROM DBCacheItem WHERE namespace = " . (Manager::quoteAny($namespace)??'null'));
	}


	/**
	 * Set up cache table. Returns `true` if the table was newly created, or false if it already existed.
	 * 
	 * @return bool
	 */
	public function setup () {
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:144: lines 144-147
		if (TableCreate::exists(DBCacheItem::$manager) === false) {
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:145: characters 3-44
			TableCreate::create(DBCacheItem::$manager);
			#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:146: characters 3-14
			return true;
		}
		#/usr/local/lib/haxe/lib/ufront-mvc/git/src/ufront/cache/DBCache.hx:148: characters 2-14
		return false;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(DBCacheApi::class, 'ufront.cache.DBCacheApi');
Boot::registerMeta(DBCacheApi::class, new HxAnon([
	"fields" => new HxAnon([
		"setup" => new HxAnon([
			"returnType" => \Array_hx::wrap([0]),
		]),
		"clearAll" => new HxAnon([
			"returnType" => \Array_hx::wrap([4]),
		]),
		"clearNamespace" => new HxAnon([
			"returnType" => \Array_hx::wrap([4]),
		]),
		"clearItem" => new HxAnon([
			"returnType" => \Array_hx::wrap([4]),
		]),
		"clearItemLike" => new HxAnon([
			"returnType" => \Array_hx::wrap([4]),
		]),
	]),
]));
DBCacheApi::__hx__init();

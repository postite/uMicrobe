<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx
 */

namespace ufront\view;

use \haxe\io\Path;
use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \sys\io\File;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \haxe\ds\Option;
use \tink\core\_Lazy\LazyConst;

/**
 * A UFViewEngine that loads views from the filesystem on the web server.
 * This currently only has a synchronous implementation on "sys" platforms.
 * An implementation for NodeJS would be easy to add - pull requests welcome!
 */
class FileViewEngine extends UFViewEngine {


	/**
	 * @var bool
	 * Is `path` absolute (true) or relative to `scriptDir` (false)? This is determined by checking if the injected `viewPath` has a leading "/".
	 */
	public $isPathAbsolute;
	/**
	 * @var string
	 * The path to your views (absolute, or relative to the script directory). This value should be provided by dependency injection (A String named "viewPath").
	 */
	public $path;
	/**
	 * @var string
	 * The script directory for your app. This value should be provided by dependency injection (A String named "scriptDirectory").
	 */
	public $scriptDir;
	/**
	 * @var string
	 * The absolute path to your views.
	 * This is essentially `${scriptDir}${path}/` (or `${path}/` if path is absolute).
	 */
	public $viewDirectory;


	/**
	 * Create a new FileViewEngine.
	 * @param cachingEnabled Should we cache templates between requests? If not supplied, the value of `UFViewEngine.cacheEnabledByDefault` will be used by default.
	 * 
	 * @param bool $cachingEnabled
	 * 
	 * @return void
	 */
	public function __construct ($cachingEnabled = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:28: characters 3-26
		parent::__construct($cachingEnabled);
	}


	/**
	 * Check if a file exists, and read a file from the file system.
	 * @param viewRelativePath The relative path to the view. Please note this path is not checked for "../" or similar path hacks, so be wary of using user inputted data here.
	 * @return A future containing details on if the template existed at the given path or not, or a failure if there was an unexpected error.
	 * 
	 * @param string $viewRelativePath
	 * 
	 * @return FutureObject
	 */
	public function getTemplateString ($viewRelativePath) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:55: characters 3-49
		$fullPath = ($this->get_viewDirectory()??'null') . ($viewRelativePath??'null');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:57: lines 57-61
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:58: lines 58-59
			if (file_exists($fullPath)) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:58: characters 47-102
				return new SyncFuture(new LazyConst(Outcome::Success(Option::Some(File::getContent($fullPath)))));
			} else {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:59: characters 17-45
				return new SyncFuture(new LazyConst(Outcome::Success(Option::None())));
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:61: characters 24-95
			return $e->asSurpriseError("Failed to load template " . ($viewRelativePath??'null'));
		}
	}


	/**
	 * @return bool
	 */
	public function get_isPathAbsolute () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:39: characters 37-79
		return \StringTools::startsWith($this->path, "/");
	}


	/**
	 * @return string
	 */
	public function get_viewDirectory () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:46: characters 38-133
		if ($this->get_isPathAbsolute()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:46: characters 55-78
			return Path::addTrailingSlash($this->path);
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/FileViewEngine.hx:46: characters 81-133
			return (Path::addTrailingSlash($this->scriptDir)??'null') . (Path::addTrailingSlash($this->path)??'null');
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(FileViewEngine::class, 'ufront.view.FileViewEngine');
Boot::registerMeta(FileViewEngine::class, new HxAnon(["obj" => new HxAnon(["rtti" => \Array_hx::wrap([
	\Array_hx::wrap([
		"scriptDir",
		"String",
		"scriptDirectory",
	]),
	\Array_hx::wrap([
		"path",
		"String",
		"viewPath",
	]),
])])]));
Boot::registerGetters('ufront\\view\\FileViewEngine', [
	'viewDirectory' => true,
	'isPathAbsolute' => true
]);
FileViewEngine::__hx__init();

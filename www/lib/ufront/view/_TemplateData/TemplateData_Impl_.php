<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx
 */

namespace ufront\view\_TemplateData;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\CallStack;
use \php\_Boot\HxAnon;

final class TemplateData_Impl_ {
	/**
	 * Create a template data object.
	 * @param obj The object to use.  If null a new TemplateData object with no values will be used.
	 * 
	 * @param object $obj
	 * 
	 * @return object
	 */
	static public function _new ($obj = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:47: character 16
		$this1 = ($obj !== null ? $obj : new HxAnon());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:47: character 16
		return $this1;
	}


	/**
	 * Array access setter.
	 * 
	 * @param object $this
	 * @param string $key
	 * @param mixed $val
	 * 
	 * @return mixed
	 */
	static public function array_set ($this1, $key, $val) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:109: characters 3-37
		\Reflect::setField($this1, $key, $val);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:110: characters 3-13
		return $val;
	}


	/**
	 * See if a specific field exists in the template data.
	 * 
	 * @param object $this
	 * @param string $key
	 * 
	 * @return bool
	 */
	static public function exists ($this1, $key) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:90: characters 3-39
		return \Reflect::hasField($this1, $key);
	}


	/**
	 * Automatically cast from a `Iterable<TemplateData>` into a combined `TemplateData.
	 * Values will be added in order, and later values with the same name as an earlier value will override the earlier value.
	 * If the iterable is empty, the resulting TemplateData will contain no properties.
	 * If an individual item is a StringMap, it will be added with `setMap`, otherwise it will be added with `setObject`.
	 * @param dataSets The collection of TemplateData objects to iterate over.
	 * @return The same TemplateData so that method chaining is enabled.
	 * 
	 * @param object $dataSets
	 * 
	 * @return object
	 */
	static public function fromMany ($dataSets) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:196: characters 31-53
		$obj = new HxAnon();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:196: characters 31-53
		$this1 = ($obj !== null ? $obj : new HxAnon());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:196: characters 3-54
		$combined = $this1;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:197: characters 14-22
		$d = $dataSets->iterator();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:197: characters 14-22
		while ($d->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:197: lines 197-208
			$d1 = $d->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:198: lines 198-207
			if ($d1 !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:199: lines 199-206
				if (($d1 instanceof StringMap)) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:200: characters 6-42
					$map = $d1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:201: characters 6-49
					TemplateData_Impl_::setMap($combined, $map);
				} else {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:204: characters 6-26
					$obj1 = $d1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:205: characters 6-31
					TemplateData_Impl_::setObject($combined, $obj1);
				}
			}
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:209: characters 3-18
		return $combined;
	}


	/**
	 * from casts
	 * 
	 * @param StringMap $d
	 * 
	 * @return object
	 */
	static public function fromMap ($d) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:171: characters 24-46
		$obj = new HxAnon();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:171: characters 24-46
		$this1 = ($obj !== null ? $obj : new HxAnon());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:171: characters 3-47
		$m = $this1;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:172: characters 3-16
		TemplateData_Impl_::setMap($m, $d);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:173: characters 3-11
		return $m;
	}


	/**
	 * Automatically cast from an object to a TemplateData.
	 * This results in a new object, the equivalent of calling `new TemplateData().setObject( d )`.
	 * This cast comes last in the code so it should be used only if none of the other casts were utilised.
	 * 
	 * @param object $d
	 * 
	 * @return object
	 */
	static public function fromObject ($d) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:220: characters 10-32
		$obj = new HxAnon();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:220: characters 10-32
		$this1 = ($obj !== null ? $obj : new HxAnon());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:220: characters 3-47
		return TemplateData_Impl_::setObject($this1, $d);
	}


	/**
	 * Automatically cast from a `StringMap<Dynamic>` into a TemplateData.
	 * 
	 * @param StringMap $d
	 * 
	 * @return object
	 */
	static public function fromStringMap ($d) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:180: characters 3-22
		return TemplateData_Impl_::fromMap($d);
	}


	/**
	 * Get a value from the template data.
	 * This is also used for array access: `templateData['name']` is the same as `templateData.get('name')`.
	 * @param key The name of the value to retrieve.
	 * @return The value, or null if it was not available.
	 * 
	 * @param object $this
	 * @param string $key
	 * 
	 * @return mixed
	 */
	static public function get ($this1, $key) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:84: characters 71-104
		return \Reflect::field($this1, $key);
	}


	/**
	 * Set a value on the template data.
	 * Please note array setters are also available, but they use the private `array_set` method which returns the value, rather than the TemplateData object.
	 * @param key The name of the key to set.
	 * @param val The value to set.
	 * @return The same TemplateData so that method chaining is enabled.
	 * 
	 * @param object $this
	 * @param string $key
	 * @param mixed $val
	 * 
	 * @return object
	 */
	static public function set ($this1, $key, $val) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:103: characters 3-37
		\Reflect::setField($this1, $key, $val);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:104: characters 10-34
		$this2 = ($this1 !== null ? $this1 : new HxAnon());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:104: characters 10-34
		return $this2;
	}


	/**
	 * Set many values from a `Map<String,Dynamic>`
	 * `templateData.set(key,map[key])` will be called for each pair in the map.
	 * @param map The map data to set.
	 * @return The same TemplateData so that method chaining is enabled.
	 * 
	 * @param object $this
	 * @param StringMap $map
	 * 
	 * @return object
	 */
	static public function setMap ($this1, $map) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:122: characters 14-24
		$k = new NativeArrayIterator(array_map("strval", array_keys($map->data)));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:122: characters 14-24
		while ($k->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:122: lines 122-124
			$k1 = $k->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:123: characters 4-20
			TemplateData_Impl_::set($this1, $k1, ($map->data[$k1] ?? null));
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:125: characters 10-34
		$this2 = ($this1 !== null ? $this1 : new HxAnon());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:125: characters 10-34
		return $this2;
	}


	/**
	 * Set many values from an object.
	 * `templateData.set(fieldName,fieldValue)` will be called for each field or property on the object.
	 * The behaviour differ depending on if this is an anonymous object or a class instance:
	 * - Anonymous objects will find all fields using `Reflect.fields()` and fetch the values using `Reflect.field()`.
	 * - Class instance objects will find all fields using `Type.getInstanceFields()` and fetch the values using `Reflect.getProperty()`.
	 * - Other values will be ignored.
	 * Please note on PHP, objects that are class instances may fail to load fields that are functions.
	 * @param d The data object to set.
	 * @return The same TemplateData so that method chaining is enabled.
	 * 
	 * @param object $this
	 * @param object $d
	 * 
	 * @return object
	 */
	static public function setObject ($this1, $d) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:145: characters 10-24
		$_g = \Type::typeof($d);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:145: characters 10-24
		switch ($_g->index) {
			case 4:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:147: characters 5-64
				$_g1 = 0;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:147: characters 5-64
				$_g11 = \Reflect::fields($d);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:147: characters 5-64
				while ($_g1 < $_g11->length) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:147: characters 11-12
					$k = ($_g11->arr[$_g1] ?? null);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:147: characters 5-64
					$_g1 = $_g1 + 1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:147: characters 36-64
					TemplateData_Impl_::set($this1, $k, \Reflect::field($d, $k));
				}
				break;
			case 6:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:148: characters 16-19
				$cls = $_g->params[0];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:152: lines 152-156
				$_g2 = 0;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:152: lines 152-156
				$_g12 = \Type::getInstanceFields($cls);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:152: lines 152-156
				while ($_g2 < $_g12->length) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:152: characters 12-13
					$k1 = ($_g12->arr[$_g2] ?? null);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:152: lines 152-156
					$_g2 = $_g2 + 1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:153: lines 153-155
					try {
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:153: characters 11-45
						TemplateData_Impl_::set($this1, $k1, \Reflect::getProperty($d, $k1));
					} catch (\Throwable $__hx__caught_e) {
						CallStack::saveExceptionTrace($__hx__caught_e);
						$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
						$e = $__hx__real_e;
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:154: lines 154-155
						try {
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:154: characters 31-59
							TemplateData_Impl_::set($this1, $k1, \Reflect::field($d, $k1));
						} catch (\Throwable $__hx__caught_e) {
							CallStack::saveExceptionTrace($__hx__caught_e);
							$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
							$e1 = $__hx__real_e;
													}
					}
				}

				break;
			default:
								break;
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:162: characters 10-34
		$this2 = ($this1 !== null ? $this1 : new HxAnon());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:162: characters 10-34
		return $this2;
	}


	/**
	 * Convert into a `Map<String,Dynamic>`.
	 * This is also available as an implicit `@:to` cast.
	 * 
	 * @param object $this
	 * 
	 * @return StringMap
	 */
	static public function toMap ($this1) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:63: characters 3-39
		$ret = new StringMap();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:64: characters 3-70
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:64: characters 3-70
		$_g1 = \Reflect::fields($this1);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:64: characters 3-70
		while ($_g < $_g1->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:64: characters 9-10
			$k = ($_g1->arr[$_g] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:64: characters 3-70
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:64: characters 37-70
			$v = \Reflect::field($this1, $k);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:64: characters 37-70
			$ret->data[$k] = $v;

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:65: characters 3-13
		return $ret;
	}


	/**
	 * Convert into a `Dynamic<Dynamic>` anonymous object.
	 * Please note this is not an implicit `@:to` cast, because the resulting type would match too many false positives.
	 * To use this cast call `templateData.toObject()` explicitly.
	 * 
	 * @param object $this
	 * 
	 * @return mixed
	 */
	static public function toObject ($this1) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:56: characters 3-14
		return $this1;
	}


	/**
	 * Convert into a `StringMap<Dynamic>`.
	 * This is also available as an implicit `@:to` cast.
	 * 
	 * @param object $this
	 * 
	 * @return StringMap
	 */
	static public function toStringMap ($this1) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplateData.hx:73: characters 3-17
		return TemplateData_Impl_::toMap($this1);
	}
}


Boot::registerClass(TemplateData_Impl_::class, 'ufront.view._TemplateData.TemplateData_Impl_');

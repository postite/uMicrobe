<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx
 */

namespace ufront\view;

use \ufront\view\_UFTemplate\UFTemplate_Impl_;
use \php\Boot;
use \php\_Boot\HxException;
use \ufront\view\_TemplateHelper\TemplateHelper_Impl_;
use \erazor\HtmlTemplate;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Template as HaxeTemplate;
use \erazor\TString;
use \ufront\view\_TemplateData\TemplateData_Impl_;
use \erazor\Template;
use \php\_Boot\HxAnon;

/**
 * This class provides some shortcut definitions to common templating engines in the Haxe eco-system.
 * These shortcuts are added for your convenience.
 * They don't include the actual template libraries, rather, they return a typedef that let's our UFViewEngine know how to use the templating library so you can add it easily.
 * The static variables for each library are surrounded in conditionals, so they will only be included if you have that library included in your current build.
 * Templating engines currently provided:
 * - `erazorHtml` - A powerful templating language that lets you switch between templates and haxe-code effortlessly.  Based on `mvc-razor`.  Available if `erazor` haxelib is being used.
 * - `erazor` - Similar to `erazorHtml`, but without HTML escaping enabled by default.
 * - `hxtemplo` - Simn's port of the `templo` templating language.  Available if `hxtemplo` haxelib is being used.
 * - `mustache` - Mustache "Logic-less" templates.  Available if `mustache` haxelib is being used.
 * - `hxdtl` - Django Templating Library for Haxe.  Available if `hxdtl` haxelib is being used.
 * - `haxe` - provided in the Standard Library, no extra haxelibs needed.
 * If you would like to add support for another library, please send a pull request!
 */
class TemplatingEngines {
	/**
	 * @var \Array_hx
	 * An array of all known templating engines that have been included for compilation.
	 * The default order is `[erazorHtml,erazor,hxtemplo,mustache,hxdtl,haxe]`.
	 */
	static public $all;
	/**
	 * @var object
	 * Similar to `TemplatingEngines.erazorHtml`, but with no HTML escaping.
	 * Please only use this if you are sure it is safe to trust the data being passed to your templates.
	 * If you have are exporting user data as HTML, using `erazor` rather than `erazorHtml` will open you to the risk of XSS injection attacks.
	 * This is available when the `erazor` haxelib is used.
	 */
	static public $erazor;
	/**
	 * @var object
	 * A templating engine for `Erazor` templates, a Haxe port of the `mvc-razor` templating language.
	 * Let's you mix Haxe code in with your templates.
	 * Unlike `TemplatingEngines.erazor`, this engine will automatically escape all data.
	 * You can use the `@raw()` helper to render data that should not be HTML escaped.
	 * Helpers and Partials are not escaped - please be careful to make sure your partials escape by default.
	 * If you wish to use a version that does no HTML escaping by default, use `TemplatingEngines.erazor`.
	 * Note: this only does runtime erazor templates, currently the macro-powered type checking is not available.
	 * This is available when the `erazor` haxelib is used.
	 */
	static public $erazorHtml;
	/**
	 * @var object
	 * A templating engine for `haxe.Template` templates, using "html" and "tpl" extensions.
	 * This is available through the standard library and is always included in compilation.
	 */
	static public $haxe;


	/**
	 * @return object
	 */
	static public function get_erazor () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:138: lines 138-145
		return new HxAnon([
			"factory" => function ($tplString) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:140: characters 5-46
				$t = new Template($tplString);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:141: characters 5-76
				return UFTemplate_Impl_::fromSimpleCallback(function ($data)  use (&$t) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:141: characters 41-76
					return $t->execute($data);
				});
			},
			"type" => "erazor.Template",
			"extensions" => \Array_hx::wrap([
				"html",
				"erazor",
			]),
		]);
	}


	/**
	 * @return object
	 */
	static public function get_erazorHtml () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:163: lines 163-180
		return new HxAnon([
			"factory" => function ($tplString) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:165: characters 5-50
				$t = new HtmlTemplate($tplString);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:166: lines 166-176
				return function ($data, $helpers = null)  use (&$t) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:167: characters 25-43
					$this1 = new HxAnon();
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:167: characters 6-44
					$combinedData = $this1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:168: lines 168-173
					if ($helpers !== null) {
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:169: characters 27-41
						$helperName = new NativeArrayIterator(array_map("strval", array_keys($helpers->data)));
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:169: characters 27-41
						while ($helperName->hasNext()) {
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:169: lines 169-172
							$helperName1 = $helperName->next();
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:170: characters 8-84
							$wrappedHelper = TemplatingEngines::wrapHelperFnWithErazorSafeString(($helpers->data[$helperName1] ?? null));
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:171: characters 8-53
							TemplateData_Impl_::set($combinedData, $helperName1, $wrappedHelper);
						}
					}
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:174: characters 6-36
					TemplateData_Impl_::setObject($combinedData, $data);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:175: characters 6-38
					return $t->execute($combinedData);
				};
			},
			"type" => "erazor.HtmlTemplate",
			"extensions" => \Array_hx::wrap([
				"html",
				"erazor",
			]),
		]);
	}


	/**
	 * @return object
	 */
	static public function get_haxe () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:48: lines 48-62
		return new HxAnon([
			"factory" => function ($tplString) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:50: characters 4-43
				$t = new HaxeTemplate($tplString);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:51: lines 51-58
				return function ($data, $helpers = null)  use (&$t) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:52: characters 5-45
					$macrosObject = new HxAnon();
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:53: lines 53-56
					if ($helpers !== null) {
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:53: characters 46-60
						$helperName = new NativeArrayIterator(array_map("strval", array_keys($helpers->data)));
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:53: characters 46-60
						while ($helperName->hasNext()) {
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:53: lines 53-56
							$helperName1 = $helperName->next();
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:54: characters 6-75
							$paddedHelper = TemplatingEngines::padHelperFnForHaxeTplMacro(($helpers->data[$helperName1] ?? null));
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:55: characters 6-64
							\Reflect::setField($macrosObject, $helperName1, $paddedHelper);
						}
					}
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:57: characters 5-54
					return $t->execute($data, $macrosObject);
				};
			},
			"type" => "haxe.Template",
			"extensions" => \Array_hx::wrap([
				"html",
				"tpl",
			]),
		]);
	}


	/**
	 * @param object $h
	 * 
	 * @return mixed
	 */
	static public function padHelperFnForHaxeTplMacro ($h) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:65: characters 17-26
		$_g = $h->numArgs;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:65: characters 17-26
		switch ($_g) {
			case 0:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:66: characters 12-42
				return function ($_)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:66: characters 24-42
					return TemplateHelper_Impl_::getFn($h)();
				};
				break;
			case 1:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:67: characters 12-45
				return function ($_1, $a)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:67: characters 26-45
					return TemplateHelper_Impl_::getFn($h)($a);
				};
				break;
			case 2:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:68: characters 12-49
				return function ($_2, $a1, $b)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:68: characters 28-49
					return TemplateHelper_Impl_::getFn($h)($a1, $b);
				};
				break;
			case 3:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:69: characters 12-53
				return function ($_3, $a2, $b1, $c)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:69: characters 30-53
					return TemplateHelper_Impl_::getFn($h)($a2, $b1, $c);
				};
				break;
			case 4:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:70: characters 12-57
				return function ($_4, $a3, $b2, $c1, $d)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:70: characters 32-57
					return TemplateHelper_Impl_::getFn($h)($a3, $b2, $c1, $d);
				};
				break;
			case 5:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:71: characters 12-61
				return function ($_5, $a4, $b3, $c2, $d1, $e)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:71: characters 34-61
					return TemplateHelper_Impl_::getFn($h)($a4, $b3, $c2, $d1, $e);
				};
				break;
			case 6:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:72: characters 12-65
				return function ($_6, $a5, $b4, $c3, $d2, $e1, $f)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:72: characters 36-65
					return TemplateHelper_Impl_::getFn($h)($a5, $b4, $c3, $d2, $e1, $f);
				};
				break;
			case 7:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:73: characters 12-69
				return function ($_7, $a6, $b5, $c4, $d3, $e2, $f1, $g)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:73: characters 38-69
					return TemplateHelper_Impl_::getFn($h)($a6, $b5, $c4, $d3, $e2, $f1, $g);
				};
				break;
			default:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:74: characters 12-17
				throw new HxException("TemplateHelper supports a maximum of 7 arguments");
				break;
		}
	}


	/**
	 * @param object $h
	 * 
	 * @return mixed
	 */
	static public function wrapHelperFnWithErazorSafeString ($h) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:183: characters 18-27
		$_g = $h->numArgs;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:183: characters 18-27
		switch ($_g) {
			case 0:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:184: characters 13-74
				return function ()  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:184: characters 24-74
					return new TString(TemplateHelper_Impl_::getFn($h)());
				};
				break;
			case 1:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:185: characters 13-76
				return function ($a)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:185: characters 25-76
					return new TString(TemplateHelper_Impl_::getFn($h)($a));
				};
				break;
			case 2:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:186: characters 13-80
				return function ($a1, $b)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:186: characters 27-80
					return new TString(TemplateHelper_Impl_::getFn($h)($a1, $b));
				};
				break;
			case 3:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:187: characters 13-84
				return function ($a2, $b1, $c)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:187: characters 29-84
					return new TString(TemplateHelper_Impl_::getFn($h)($a2, $b1, $c));
				};
				break;
			case 4:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:188: characters 13-88
				return function ($a3, $b2, $c1, $d)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:188: characters 31-88
					return new TString(TemplateHelper_Impl_::getFn($h)($a3, $b2, $c1, $d));
				};
				break;
			case 5:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:189: characters 13-92
				return function ($a4, $b3, $c2, $d1, $e)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:189: characters 33-92
					return new TString(TemplateHelper_Impl_::getFn($h)($a4, $b3, $c2, $d1, $e));
				};
				break;
			case 6:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:190: characters 13-96
				return function ($a5, $b4, $c3, $d2, $e1, $f)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:190: characters 35-96
					return new TString(TemplateHelper_Impl_::getFn($h)($a5, $b4, $c3, $d2, $e1, $f));
				};
				break;
			case 7:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:191: characters 13-100
				return function ($a6, $b5, $c4, $d3, $e2, $f1, $g)  use (&$h) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:191: characters 37-100
					return new TString(TemplateHelper_Impl_::getFn($h)($a6, $b5, $c4, $d3, $e2, $f1, $g));
				};
				break;
			default:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/TemplatingEngines.hx:192: characters 13-18
				throw new HxException("TemplateHelper supports a maximum of 7 arguments");
				break;
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


$tmp = TemplatingEngines::get_erazorHtml();
$tmp1 = TemplatingEngines::get_erazor();
self::$all = \Array_hx::wrap([
	$tmp,
	$tmp1,
	TemplatingEngines::get_haxe(),
]);
	}
}


Boot::registerClass(TemplatingEngines::class, 'ufront.view.TemplatingEngines');
Boot::registerGetters('ufront\\view\\TemplatingEngines', [
	'erazorHtml' => true,
	'erazor' => true,
	'haxe' => true
]);
TemplatingEngines::__hx__init();

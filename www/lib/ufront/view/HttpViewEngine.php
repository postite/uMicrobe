<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx
 */

namespace ufront\view;

use \haxe\io\Path;
use \tink\core\FutureTrigger;
use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\TypedError;
use \sys\Http;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \php\_Boot\HxString;
use \haxe\CallStack;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;
use \haxe\ds\Option;

/**
 * A `UFViewEngine` that loads views over HTTP.
 * This is especially useful when running applications client-side, as it allows you to share a view directory with the server and access it via HTTP rather than the filesystem.
 */
class HttpViewEngine extends UFViewEngine {


	/**
	 * @var string
	 * The path to your views as an absolute HTTP URI.
	 * eg `http://ufront.net/views/`
	 * This value should be provided by dependency injection (a String named `viewPath`).
	 */
	public $viewPath;


	/**
	 * Create a new HttpViewEngine.
	 * @param cachingEnabled Should we cache templates between requests? If not supplied, the value of `UFViewEngine.cacheEnabledByDefault` will be used by default.
	 * 
	 * @param bool $cachingEnabled
	 * 
	 * @return void
	 */
	public function __construct ($cachingEnabled = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:21: characters 3-26
		parent::__construct($cachingEnabled);
	}


	/**
	 * Attempt to load the view via a HTTP call.
	 * The `relativeViewPath` is relative to the URL specified in `viewPath`.
	 * A leading "/" will be ignored.
	 * - If a status code of `200` is returned, then the content of the HTTP response is used as the template.
	 * - If a status code of 404 is returned, then a `Success(None)` is triggered - meaning no error was encountered, but the template did not exist.
	 * - If a different status code is returned, it is considered an error and a `Failure(err)` is returned.
	 * 
	 * @param string $relativeViewPath
	 * 
	 * @return FutureObject
	 */
	public function getTemplateString ($relativeViewPath) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:43: lines 43-44
		if (\StringTools::startsWith($relativeViewPath, "/")) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:44: characters 4-51
			$relativeViewPath = HxString::substr($relativeViewPath, 1);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:45: characters 3-63
		$fullPath = (Path::addTrailingSlash($this->viewPath)??'null') . ($relativeViewPath??'null');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:46: lines 46-59
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:47: characters 4-30
			$ft = new FutureTrigger();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:48: characters 4-35
			$req = new Http($fullPath);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:49: characters 4-24
			$status = -1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:50: characters 4-45
			$req->onStatus = function ($st)  use (&$status) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:50: characters 34-45
				$status = $st;
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:51: characters 4-67
			$req->onData = function ($data)  use (&$ft) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:51: characters 34-67
				$ft->trigger(Outcome::Success(Option::Some($data)));
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:52: lines 52-55
			$req->onError = function ($err)  use (&$ft, &$fullPath, &$status) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:53: lines 53-54
				if ($status === 404) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:53: characters 24-51
					$ft->trigger(Outcome::Success(Option::None()));
				} else {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:54: characters 22-94
					$tmp = Outcome::Failure(TypedError::withData($status, "Failed to load template " . ($fullPath??'null'), $err, new HxAnon([
						"fileName" => "ufront/view/HttpViewEngine.hx",
						"lineNumber" => 54,
						"className" => "ufront.view.HttpViewEngine",
						"methodName" => "getTemplateString",
					])));
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:54: characters 10-96
					$ft->trigger($tmp);
				}
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:56: characters 4-17
			$req->request();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:57: characters 4-24
			return $ft;
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/view/HttpViewEngine.hx:59: characters 30-108
			return new SyncFuture(new LazyConst(Outcome::Failure(TypedError::withData(null, "Failed to load template " . ($fullPath??'null'), $e, new HxAnon([
				"fileName" => "ufront/view/HttpViewEngine.hx",
				"lineNumber" => 59,
				"className" => "ufront.view.HttpViewEngine",
				"methodName" => "getTemplateString",
			])))));
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(HttpViewEngine::class, 'ufront.view.HttpViewEngine');
Boot::registerMeta(HttpViewEngine::class, new HxAnon(["obj" => new HxAnon(["rtti" => \Array_hx::wrap([\Array_hx::wrap([
	"viewPath",
	"String",
	"viewPath",
])])])]));
HttpViewEngine::__hx__init();

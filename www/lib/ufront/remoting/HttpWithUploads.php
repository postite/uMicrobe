<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx
 */

namespace ufront\remoting;

use \tink\core\Outcome;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\TypedError;
use \sys\Http;
use \tink\core\_Future\FutureObject;
use \php\_NativeArray\NativeArrayIterator;
use \tink\core\_Future\Future_Impl_;
use \haxe\io\BytesInput;
use \tink\core\Noise;
use \ufront\core\_MultiValueMap\MultiValueMap_Impl_;
use \php\_Boot\HxAnon;

/**
 * A simple wrapper of `Http` and `XMLHttpRequest`, because plain `Http` doesn't allow uploads on JS currently.
 * NOTE: This class is intended for private use only. API may change or be removed in future.
 * TODO: make this private, but still accessible to `HttpConnection` and `HttpAsyncConnection`.
 * TODO: make this an abstract rather than a class.
 */
class HttpWithUploads {
	/**
	 * @var bool
	 */
	public $async;
	/**
	 * @var Http
	 */
	public $h;


	/**
	 * @param string $url
	 * @param bool $async
	 * @param float $timeout
	 * 
	 * @return void
	 */
	public function __construct ($url, $async, $timeout = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:39: characters 4-28
		$this->h = new Http($url);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:40: lines 40-48
		if ($async === false) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:45: lines 45-46
			if ($timeout !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:46: characters 7-29
				$this->h->cnxTimeout = $timeout;
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:50: characters 3-21
		$this->async = $async;
	}


	/**
	 * @param StringMap $uploads
	 * 
	 * @return FutureObject
	 */
	public function attachUploads ($uploads) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:69: lines 69-105
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:80: characters 4-29
		$allUploadsReady = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:81: characters 4-27
		$failedUploads = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:82: characters 22-36
		$postName = new NativeArrayIterator(array_map("strval", array_keys($uploads->data)));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:82: characters 22-36
		while ($postName->hasNext()) {
			unset($postName1);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:82: lines 82-98
			$postName1 = $postName->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:82: lines 82-98
			$_g = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:82: lines 82-98
			$_g1 = MultiValueMap_Impl_::getAll($uploads, $postName1);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:82: lines 82-98
			while ($_g < $_g1->length) {
				unset($finished, $upload);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:82: characters 45-51
				$upload = ($_g1->arr[$_g] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:82: lines 82-98
				$_g = $_g + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:83: characters 5-26
				$finished = false;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:84: lines 84-93
				$ret = $upload->getBytes()->map(function ($outcome)  use (&$finished, &$upload, &$_gthis, &$postName1, &$failedUploads) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:85: lines 85-92
					switch ($outcome->index) {
						case 0:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:86: characters 20-25
							$bytes = $outcome->params[0];
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:87: characters 8-57
							$bytesInput = new BytesInput($bytes);
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:88: characters 8-104
							$_gthis->h->fileTransfer($postName1, $upload->originalFileName, $bytesInput, $upload->size, $upload->contentType);
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:89: characters 8-23
							$finished = true;

							break;
						case 1:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:90: characters 20-23
							$err = $outcome->params[0];
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:91: characters 8-33
							$failedUploads->arr[$failedUploads->length] = $err;
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:91: characters 8-33
							++$failedUploads->length;

							break;
					}
				});
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:84: lines 84-93
				$surprise = $ret->gather();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:94: lines 94-96
				if (($this->async === false) && !$finished) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:95: characters 6-11
					throw new HxException("upload.getBytes() resolved asynchronously, and was not ready in time for the synchronous HttpConnection remoting call");
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:97: characters 5-37
				$allUploadsReady->arr[$allUploadsReady->length] = $surprise;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:97: characters 5-37
				++$allUploadsReady->length;

			}
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:99: lines 99-103
		$ret1 = Future_Impl_::ofMany($allUploadsReady)->map(function ($_)  use (&$failedUploads) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:101: lines 101-102
			if ($failedUploads->length === 0) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:101: characters 37-53
				return Outcome::Success(Noise::Noise());
			} else {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:102: characters 31-74
				$ret2 = "Failed to read attachments: " . (\Std::string($failedUploads)??'null');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:102: characters 11-79
				return Outcome::Failure(new TypedError(null, $ret2, new HxAnon([
					"fileName" => "ufront/remoting/HttpWithUploads.hx",
					"lineNumber" => 102,
					"className" => "ufront.remoting.HttpWithUploads",
					"methodName" => "attachUploads",
				])));
			}
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:99: lines 99-103
		return $ret1->gather();
	}


	/**
	 * @param \Closure $onStatus
	 * @param \Closure $onData
	 * @param \Closure $onError
	 * 
	 * @return void
	 */
	public function handle ($onStatus, $onData, $onError) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:151: characters 4-25
		$this->h->onStatus = $onStatus;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:152: characters 4-21
		$this->h->onData = $onData;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:153: characters 4-23
		$this->h->onError = $onError;
	}


	/**
	 * @return string
	 */
	public function responseData () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:139: characters 4-25
		return $this->h->responseData;
	}


	/**
	 * @return void
	 */
	public function send () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:131: characters 4-21
		$this->h->request(true);
	}


	/**
	 * @param string $k
	 * @param string $v
	 * 
	 * @return void
	 */
	public function setHeader ($k, $v) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:57: characters 4-23
		$this->h->setHeader($k, $v);
	}


	/**
	 * @param string $k
	 * @param string $v
	 * 
	 * @return void
	 */
	public function setParam ($k, $v) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpWithUploads.hx:65: characters 4-26
		$this->h->setParameter($k, $v);
	}
}


Boot::registerClass(HttpWithUploads::class, 'ufront.remoting.HttpWithUploads');

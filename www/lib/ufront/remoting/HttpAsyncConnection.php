<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx
 */

namespace ufront\remoting;

use \php\_Boot\HxClosure;
use \php\Boot;
use \haxe\remoting\HttpAsyncConnection as RemotingHttpAsyncConnection;
use \haxe\remoting\AsyncConnection;
use \php\_Boot\HxAnon;

/**
 * A remoting connection that works over asynchronous HTTP connections, with some ufront specific extensions.
 * This extends `haxe.remoting.HttpAsyncConnection` and behaves similarly in most ways.
 * An extra HTTP header is added, "X-Ufront-Remoting=1", so that our Ufront `RemotingHandler` knows it can also send traces, logs, warnings, errors and stack traces with the response.
 */
class HttpAsyncConnection extends RemotingHttpAsyncConnection {
	/**
	 * @param string $url
	 * @param \Closure $errorHandler
	 * 
	 * @return HttpAsyncConnection
	 */
	static public function urlConnect ($url, $errorHandler = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:73: lines 73-74
		if ($errorHandler === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:74: characters 4-51
			$errorHandler = new HxClosure(RemotingUtil::class, 'defaultErrorHandler');
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:75: characters 3-69
		return new HttpAsyncConnection(new HxAnon([
			"url" => $url,
			"error" => $errorHandler,
		]), new \Array_hx());
	}


	/**
	 * @param object $data
	 * @param \Array_hx $path
	 * 
	 * @return void
	 */
	public function __construct ($data, $path) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:16: lines 16-77
		parent::__construct($data, $path);
	}


	/**
	 * @param \Array_hx $params
	 * @param \Closure $onResult
	 * 
	 * @return void
	 */
	public function call ($params, $onResult = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:24: lines 24-70
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:26: characters 3-51
		$h = new HttpWithUploads($this->__data->url, true);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:27: characters 3-40
		$h->setHeader("X-Haxe-Remoting", "1");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:28: characters 3-42
		$h->setHeader("X-Ufront-Remoting", "1");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:31: characters 3-54
		$s = new RemotingSerializer(RemotingDirection::RDClientToServer());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:32: characters 3-24
		$s->serialize($this->__path);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:33: characters 3-24
		$s->serialize($params);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:34: characters 22-34
		$tmp = $s->toString();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:34: characters 3-36
		$h->setParam("__x", $tmp);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:37: characters 3-76
		$remotingCallString = ($this->__path->join(".")??'null') . "(" . ($params->join(",")??'null') . ")";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:38: characters 3-24
		$responseCode = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:39: characters 3-56
		$onStatus = function ($status)  use (&$responseCode) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:39: characters 35-56
			$responseCode = $status;
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:40: characters 3-114
		$onData = function ($data)  use (&$onResult, &$_gthis, &$remotingCallString) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:40: characters 34-114
			RemotingUtil::processResponse($data, $onResult, $_gthis->__data->error, $remotingCallString);
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:41: lines 41-58
		$onError = function ($errorData)  use (&$onResult, &$responseCode, &$_gthis, &$remotingCallString, &$h) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:42: lines 42-57
			if (500 === $responseCode) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:46: characters 5-97
				RemotingUtil::processResponse($h->responseData(), $onResult, $_gthis->__data->error, $remotingCallString);
			} else if (404 === $responseCode) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:49: characters 5-37
				$errorHandler = $_gthis->__data->error;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:50: characters 52-68
				$onError1 = $h->responseData();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:50: characters 5-71
				$errorHandler(RemotingError::RApiNotFound($remotingCallString, $onError1));
			} else {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:55: characters 5-37
				$errorHandler1 = $_gthis->__data->error;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:56: characters 64-80
				$onError2 = $h->responseData();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:56: characters 5-83
				$errorHandler1(RemotingError::RHttpError($remotingCallString, $responseCode, $onError2));
			}
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:59: characters 3-40
		$h->handle($onStatus, $onData, $onError);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:62: characters 3-51
		$uploadsReady = $h->attachUploads($s->uploads);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:63: lines 63-69
		$uploadsReady->handle(function ($outcome)  use (&$onStatus, &$onError, &$h) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:63: lines 63-69
			switch ($outcome->index) {
				case 0:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:65: characters 5-13
					$h->send();
					break;
				case 1:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:66: characters 17-20
					$err = $outcome->params[0];
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:67: characters 5-18
					$onStatus(0);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:68: characters 15-47
					$tmp1 = "Failed to read attachments: " . (\Std::string($err)??'null');
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:68: characters 5-50
					$onError($tmp1);

					break;
			}
		});
	}


	/**
	 * @param string $name
	 * 
	 * @return AsyncConnection
	 */
	public function resolve ($name) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:18: characters 3-57
		$dataCopy = new HxAnon([
			"url" => $this->__data->url,
			"error" => $this->__data->error,
		]);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:19: characters 3-62
		$c = new HttpAsyncConnection($dataCopy, $this->__path->copy());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:20: characters 3-24
		$_this = $c->__path;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:20: characters 3-24
		$_this->arr[$_this->length] = $name;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:20: characters 3-24
		++$_this->length;

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/HttpAsyncConnection.hx:21: characters 3-11
		return $c;
	}
}


Boot::registerClass(HttpAsyncConnection::class, 'ufront.remoting.HttpAsyncConnection');

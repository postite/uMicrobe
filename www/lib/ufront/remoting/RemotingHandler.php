<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx
 */

namespace ufront\remoting;

use \tink\core\FutureTrigger;
use \ufront\log\MessageType;
use \tink\core\Outcome;
use \ufront\web\context\HttpContext;
use \ufront\web\context\ActionContext;
use \php\Boot;
use \haxe\rtti\Meta;
use \php\_Boot\HxException;
use \ufront\app\UFRequestHandler;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \ufront\api\UFApiContext;
use \haxe\remoting\Context;
use \minject\Injector;
use \ufront\api\ApiReturnType;
use \tink\core\Noise;
use \ufront\core\_MultiValueMap\MultiValueMap_Impl_;
use \haxe\ds\List_hx;
use \haxe\CallStack;
use \ufront\web\upload\BaseUpload;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;
use \ufront\web\context\RequestCompletion;

/**
 * Execute a Haxe or Ufront remoting API request.
 * This request handler looks for the "X-Haxe-Remoting" and "X-Ufront-Remoting" HTTP headers to check if this is a remoting call - the path/URL used does not matter.
 * If it is a Haxe remoting call, it will process it accordingly and return a remoting result (basically serialized Haxe values).
 * A Ufront remoting call will contain extra logging and debugging information for the client to display.
 * If used with a `UfrontApplication`, and the `UfrontConfiguration.remotingApi` option was set, that API will be loaded automatically.
 * Further APIs can be loaded through `this.loadApi()`, `this.loadApis()` and `this.loadApiContext()`.
 * @author Jason O'Neil
 */
class RemotingHandler implements UFRequestHandler {
	/**
	 * @var List_hx
	 */
	public $apiContexts;
	/**
	 * @var List_hx
	 */
	public $apis;
	/**
	 * @var Context
	 */
	public $context;


	/**
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:36: characters 3-32
		$this->apiContexts = new List_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:37: characters 3-25
		$this->apis = new List_hx();
	}


	/**
	 * @param \Array_hx $path
	 * @param \Array_hx $args
	 * @param Context $remotingContext
	 * @param ActionContext $actionContext
	 * 
	 * @return FutureObject
	 */
	public function executeApiCall ($path, $args, $remotingContext, $actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:171: lines 171-173
		if (array_key_exists(($path->arr[0] ?? null), $remotingContext->objects->data) === false) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:172: characters 4-9
			throw new HxException("Invalid path " . ($path->join(".")??'null'));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:176: characters 3-31
		$actionContext->handler = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:177: characters 3-45
		$actionContext->action = ($path->arr[$path->length - 1] ?? null);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:178: characters 3-72
		$actionContext->controller = ($remotingContext->objects->data[($path->arr[0] ?? null)] ?? null)->obj;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:179: characters 3-28
		$actionContext->args = $args;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:182: characters 3-22
		$returnType = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:183: lines 183-194
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:184: characters 4-79
			$fieldsMeta = Meta::getFields(\Type::getClass($actionContext->controller));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:185: characters 4-71
			$actionMeta = \Reflect::field($fieldsMeta, $actionContext->action);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:186: characters 4-41
			$returnType = ($actionMeta->returnType->arr[0] ?? null);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:190: characters 5-78
			$_this = $actionContext->httpContext;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:190: characters 5-78
			$msg = "Failed to get metadata for API: " . (\Std::string($e)??'null');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:190: characters 5-78
			$_this1 = $_this->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:190: characters 5-78
			$_this1->arr[$_this1->length] = new HxAnon([
				"msg" => $msg,
				"pos" => new HxAnon([
					"fileName" => "ufront/remoting/RemotingHandler.hx",
					"lineNumber" => 190,
					"className" => "ufront.remoting.RemotingHandler",
					"methodName" => "executeApiCall",
				]),
				"type" => MessageType::MError(),
			]);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:190: characters 5-78
			++$_this1->length;


			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:191: characters 5-112
			$_this2 = $actionContext->httpContext->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:191: characters 5-112
			$_this2->arr[$_this2->length] = new HxAnon([
				"msg" => "Assuming API call to " . ($actionContext->action??'null') . " returns a regular value",
				"pos" => new HxAnon([
					"fileName" => "ufront/remoting/RemotingHandler.hx",
					"lineNumber" => 191,
					"className" => "ufront.remoting.RemotingHandler",
					"methodName" => "executeApiCall",
				]),
				"type" => MessageType::MError(),
			]);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:191: characters 5-112
			++$_this2->length;

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:193: characters 4-18
			$returnType = 0;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:195: characters 40-69
		$this1 = $returnType;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:195: characters 3-70
		$flags = $this1;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:200: characters 3-59
		$result = $remotingContext->call($path, $args);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:202: lines 202-204
		if (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTFuture(), 'index'))) !== 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:202: characters 30-36
			return $result;
		} else if (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTVoid(), 'index'))) !== 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:203: characters 33-52
			return new SyncFuture(new LazyConst(null));
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:204: characters 9-30
			return new SyncFuture(new LazyConst($result));
		}
	}


	/**
	 * Check for the Haxe/Ufront Remoting HTTP headers and handle the request appropriately.
	 * 
	 * @param HttpContext $httpContext
	 * 
	 * @return FutureObject
	 */
	public function handleRequest ($httpContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:76: characters 3-38
		$doneTrigger = new FutureTrigger();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:77: characters 8-67
		$this1 = $httpContext->request->get_clientHeaders();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:77: lines 77-146
		if (array_key_exists(strtolower("X-Haxe-Remoting"), $this1->data)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:80: characters 4-33
			$r = $httpContext->response;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:81: characters 4-40
			$remotingResponse = null;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:84: characters 4-13
			$r->setOk();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:87: characters 4-34
			$path = null;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:88: characters 4-35
			$args = null;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:90: lines 90-133
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:91: characters 5-46
				$this->initializeContext($httpContext->injector);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:94: characters 5-45
				$params = $httpContext->request->get_params();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:95: lines 95-96
				if (!array_key_exists("__x", $params->data)) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:96: characters 6-11
					throw new HxException("Remoting call did not have parameter `__x` which describes which API call to make.  Aborting");
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:99: characters 5-38
				$remotingCall = MultiValueMap_Impl_::get($params, "__x");
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:100: characters 5-81
				$u = new RemotingUnserializer($remotingCall, $httpContext->request->get_files());
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:101: lines 101-113
				try {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:102: characters 6-28
					$path = $u->unserialize();
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:103: characters 6-28
					$args = $u->unserialize();
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:106: lines 106-111
					$_g1 = 0;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:106: lines 106-111
					$_g = $args->length;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:106: lines 106-111
					while ($_g1 < $_g) {
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:106: lines 106-111
						$_g1 = $_g1 + 1;
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:106: characters 12-13
						$i = $_g1 - 1;
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:107: characters 24-59
						$value = ($args->arr[$i] ?? null);
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:107: characters 7-60
						$baseUpload = (($value instanceof BaseUpload) ? $value : null);
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:108: lines 108-110
						if (($baseUpload !== null) && ($baseUpload->attachedUpload !== null)) {
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:109: characters 8-43
							$args[$i] = $baseUpload->attachedUpload;
						}
					}

				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$e = $__hx__real_e;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:113: characters 25-30
					throw new HxException("Unable to deserialize remoting call: " . (\Std::string($e)??'null') . ". Remoting call string: " . ($remotingCall??'null'));
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:114: characters 5-92
				$apiCallFinished = $this->executeApiCall($path, $args, $this->context, $httpContext->actionContext);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:115: lines 115-119
				$ret = $apiCallFinished->map(function ($data) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:116: characters 6-57
					$s = new RemotingSerializer(RemotingDirection::RDServerToClient());
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:117: characters 6-25
					$s->serialize($data);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:118: characters 6-33
					return "hxr" . ($s->toString()??'null');
				});
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:115: lines 115-119
				$remotingResponse = $ret->gather();
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e1 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:123: characters 5-26
				$error = $e1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:124: characters 5-97
				$apiNotFoundMessages = \Array_hx::wrap([
					"Invalid path",
					"No such object",
					"Can't access",
					"No such method",
				]);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:125: lines 125-132
				if (($path !== null) && ($args !== null) && Boot::is($e1, Boot::getClass('String')) && \Lambda::exists($apiNotFoundMessages, function ($msg)  use (&$error) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:125: characters 106-146
					return \StringTools::startsWith($error, $msg);
				})) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:126: characters 25-141
					$remotingResponse = new SyncFuture(new LazyConst("Unable to access " . ($path->join(".")??'null') . " - API Not Found (" . ($error??'null') . "). See " . (\Std::string($this->context->objects)??'null')));
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:127: characters 6-21
					$r->setNotFound();
				} else {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:130: characters 6-26
					$r->setInternalError();
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:131: characters 25-68
					$remotingResponse = new SyncFuture(new LazyConst($this->remotingError($e1, $httpContext)));
				}
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:135: lines 135-144
			$remotingResponse->handle(function ($response)  use (&$doneTrigger, &$httpContext, &$r) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:137: characters 5-50
				$r->set_contentType("application/x-haxe-remoting");
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:138: characters 5-21
				$r->clearContent();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:139: characters 5-24
				$r->write($response);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:142: characters 5-16
				$httpContext1 = $httpContext;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:142: characters 5-57
				$httpContext1->completion = $httpContext1->completion | (1 << Boot::dynamicField(RequestCompletion::CRequestHandlersComplete(), 'index'));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:143: characters 5-42
				$doneTrigger->trigger(Outcome::Success(Noise::Noise()));
			});
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:146: characters 8-45
			$doneTrigger->trigger(Outcome::Success(Noise::Noise()));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:148: characters 3-32
		return $doneTrigger;
	}


	/**
	 * @param Injector $injector
	 * 
	 * @return void
	 */
	public function initializeContext ($injector) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:152: characters 3-10
		$this->context = new Context();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:153: characters 28-39
		$_g_head = $this->apiContexts->h;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:153: lines 153-160
		while ($_g_head !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:153: lines 153-160
			$val = $_g_head->item;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:153: lines 153-160
			$_g_head = $_g_head->next;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:153: lines 153-160
			$apiContextClass = $val;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:154: characters 4-61
			$apiContext = $injector->_instantiate($apiContextClass);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:155: lines 155-159
			$_g = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:155: lines 155-159
			$_g1 = \Reflect::fields($apiContext);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:155: lines 155-159
			while ($_g < $_g1->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:155: characters 10-19
				$fieldName = ($_g1->arr[$_g] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:155: lines 155-159
				$_g = $_g + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:156: characters 5-54
				$api = \Reflect::field($apiContext, $fieldName);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:157: lines 157-158
				if (\Reflect::isObject($api)) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:158: characters 6-48
					$this->context->addObject($fieldName, $api, false);
				}
			}

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:161: characters 21-25
		$_g_head1 = $this->apis->h;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:161: lines 161-165
		while ($_g_head1 !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:161: lines 161-165
			$val1 = $_g_head1->item;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:161: lines 161-165
			$_g_head1 = $_g_head1->next;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:161: lines 161-165
			$apiClass = $val1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:162: characters 4-50
			$className = \Type::getClassName($apiClass);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:163: characters 4-47
			$api1 = $injector->_instantiate($apiClass);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:164: characters 4-46
			$this->context->addObject($className, $api1, false);
		}

	}


	/**
	 * Expose a single UFApi to the request.
	 * This will be available through Ufront style remoting, using `UFApi` or `UFAsyncApi` on the client.
	 * 
	 * @param Class $api
	 * 
	 * @return void
	 */
	public function loadApi ($api) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:45: characters 3-19
		$this->apis->push($api);
	}


	/**
	 * Expose a UFApiContext to the request.
	 * This will be available through both Ufront style and Haxe style remoting.
	 * Ufront style remoting uses the `UFApi` and `UFAsyncApi` on the client.
	 * Ufront remoting works synchronously for `UFApi`, or returns a surprise for `UFAsyncApi`.
	 * Haxe style remoting creates a context class on the client containing all the API proxies.
	 * For example a class `ApiContext` with `var signupApi:SignupApi` would generate `ApiContextClient` with `var signupApi:SignupApiProxy`.
	 * Haxe style remoting uses remoting calls using plain async callbacks..
	 * 
	 * @param Class $apiContext
	 * 
	 * @return void
	 */
	public function loadApiContext ($apiContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:70: characters 3-33
		$this->apiContexts->push($apiContext);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:71: characters 3-56
		$api = UFApiContext::getApisInContext($apiContext)->iterator();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:71: characters 3-56
		while ($api->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:71: characters 3-56
			$api1 = $api->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:71: characters 3-56
			$this->apis->push($api1);
		}

	}


	/**
	 * Expose a group of UFApis to the request.
	 * These will be available through Ufront style remoting, using `UFApi` or `UFAsyncApi` on the client.
	 * 
	 * @param object $newAPIs
	 * 
	 * @return void
	 */
	public function loadApis ($newAPIs) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:53: characters 16-23
		$api = $newAPIs->iterator();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:53: characters 16-23
		while ($api->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:53: lines 53-54
			$api1 = $api->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:54: characters 4-18
			$this->apis->push($api1);
		}
	}


	/**
	 * @param mixed $e
	 * @param HttpContext $httpContext
	 * 
	 * @return string
	 */
	public function remotingError ($e, $httpContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:209: characters 3-27
		$_this = $httpContext->messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:209: characters 3-27
		$_this->arr[$_this->length] = new HxAnon([
			"msg" => $e,
			"pos" => new HxAnon([
				"fileName" => "ufront/remoting/RemotingHandler.hx",
				"lineNumber" => 209,
				"className" => "ufront.remoting.RemotingHandler",
				"methodName" => "remotingError",
			]),
			"type" => MessageType::MError(),
		]);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:209: characters 3-27
		++$_this->length;

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:211: characters 8-69
		$this1 = $httpContext->request->get_clientHeaders();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:211: lines 211-232
		if (array_key_exists(strtolower("X-Ufront-Remoting"), $this1->data)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:214: characters 4-55
			$s = new RemotingSerializer(RemotingDirection::RDServerToClient());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:215: characters 4-27
			$s->serializeException($e);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:216: characters 4-51
			$serializedException = "hxe" . ($s->toString()??'null');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:220: characters 5-75
			$exceptionStack = CallStack::toString(CallStack::exceptionStack());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:221: characters 5-94
			$serializedStack = "hxs" . (RemotingSerializer::run($exceptionStack, RemotingDirection::RDServerToClient())??'null');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:222: characters 5-56
			return ($serializedStack??'null') . "\x0A" . ($serializedException??'null');
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:229: characters 4-55
			$s1 = new RemotingSerializer(RemotingDirection::RDServerToClient());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:230: characters 4-27
			$s1->serializeException($e);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:231: characters 4-31
			return "hxr" . ($s1->toString()??'null');
		}
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/remoting/RemotingHandler.hx:236: characters 29-69
		return "ufront.remoting.RemotingHandler";
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(RemotingHandler::class, 'ufront.remoting.RemotingHandler');

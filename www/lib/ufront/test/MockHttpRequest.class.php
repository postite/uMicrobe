<?php

// Generated by Haxe 3.4.7
class ufront_test_MockHttpRequest extends ufront_web_context_HttpRequest {
	public function __construct($uri = null) { if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::new");
		$__hx__spos = $GLOBALS['%s']->length;
		if($uri === null) {
			$uri = "/";
		}
		$this->setQueryString("");
		$this->setPostString("");
		$map = new haxe_ds_StringMap();
		$this->setQuery($map);
		$map1 = new haxe_ds_StringMap();
		$this->setPost($map1);
		$map2 = new haxe_ds_StringMap();
		$this->setFiles($map2);
		$map3 = new haxe_ds_StringMap();
		$this->setCookies($map3);
		$this->setHostName("localhost");
		$this->setClientIP("127.0.0.1");
		$this->setUri($uri);
		$this1 = null;
		$this2 = new haxe_ds_StringMap();
		$this1 = $this2;
		$this->setClientHeaders($this1);
		$this->setUserAgent(ufront_web_UserAgent::fromString("Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:43.0) Gecko/20100101 Firefox/43.0"));
		$this->setHttpMethod("GET");
		$this->setScriptDirectory("/var/www/");
		$this->setAuthorization(null);
		$this->setIsMultipart(false);
		$GLOBALS['%s']->pop();
	}}
	public function setParams($params) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setParams");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->params = $params;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_queryString() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_queryString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->queryString;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setQueryString($qs) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setQueryString");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->queryString = $qs;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_postString() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_postString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->postString;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setPostString($ps) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setPostString");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->postString = $ps;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_query() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_query");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->query;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setQuery($query) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setQuery");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->query = $query;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_post() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_post");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->post;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setPost($post) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setPost");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->post = $post;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_files() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_files");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->files;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setFiles($files) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setFiles");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->files = $files;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_cookies() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_cookies");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->cookies;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setCookies($cookies) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setCookies");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->cookies = $cookies;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_hostName() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_hostName");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->hostName;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setHostName($hostName) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setHostName");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->hostName = $hostName;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_clientIP() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_clientIP");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->clientIP;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setClientIP($clientIP) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setClientIP");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->clientIP = $clientIP;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_uri() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_uri");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->uri;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setUri($uri) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setUri");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->uri = $uri;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_clientHeaders() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_clientHeaders");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->clientHeaders;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setClientHeaders($clientHeaders) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setClientHeaders");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->clientHeaders = $clientHeaders;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_userAgent() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_userAgent");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->userAgent;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setUserAgent($userAgent) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setUserAgent");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->userAgent = $userAgent;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_httpMethod() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_httpMethod");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->httpMethod;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setHttpMethod($httpMethod) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setHttpMethod");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->httpMethod = $httpMethod;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_scriptDirectory() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_scriptDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->scriptDirectory;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setScriptDirectory($scriptDirectory) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setScriptDirectory");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->scriptDirectory = $scriptDirectory;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_authorization() {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::get_authorization");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->authorization;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setAuthorization($authorization) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setAuthorization");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->authorization = $authorization;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function setIsMultipart($isMultipart) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::setIsMultipart");
		$__hx__spos = $GLOBALS['%s']->length;
		if($isMultipart) {
			$this1 = $this->get_clientHeaders();
			ufront_core__MultiValueMap_MultiValueMap_Impl_::set($this1, strtolower("Content-Type"), "multipart/form-data; charset=UTF-8");
		} else {
			$this2 = $this->get_clientHeaders();
			ufront_core__MultiValueMap_MultiValueMap_Impl_::set($this2, strtolower("Content-Type"), "application/x-www-form-urlencoded; charset=UTF-8");
		}
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseMultipart($onPart = null, $onData = null, $onEndPart = null) {
		$GLOBALS['%s']->push("ufront.test.MockHttpRequest::parseMultipart");
		$__hx__spos = $GLOBALS['%s']->length;
		throw new HException(ufront_web_HttpError::wrap("parseMultipart is not supported in MockHttpRequest", null, _hx_anonymous(array("fileName" => "MockHttpRequest.hx", "lineNumber" => 158, "className" => "ufront.test.MockHttpRequest", "methodName" => "parseMultipart"))));
		$GLOBALS['%s']->pop();
	}
	static $__properties__ = array("get_authorization" => "get_authorization","get_scriptDirectory" => "get_scriptDirectory","get_httpMethod" => "get_httpMethod","get_userAgent" => "get_userAgent","get_clientHeaders" => "get_clientHeaders","get_uri" => "get_uri","get_clientIP" => "get_clientIP","get_hostName" => "get_hostName","get_cookies" => "get_cookies","get_files" => "get_files","get_post" => "get_post","get_query" => "get_query","get_postString" => "get_postString","get_queryString" => "get_queryString","get_params" => "get_params");
	function __toString() { return 'ufront.test.MockHttpRequest'; }
}

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx
 */

namespace ufront\log;

use \ufront\core\SurpriseTools;
use \ufront\web\context\HttpContext;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \ufront\app\UFLogHandler;
use \haxe\Serializer;

/**
 * A `UFLogHandler` that sends traces from a server to the client's browser console during a Ufront remoting API call.
 * This will add a `hxt` line to haxe remoting call, that can be interpreted by either `ufront.remoting.HttpAsyncConnection` or `ufront.remoting.HttpConnection`.
 * When `log` is fired, this will flush the messages (traces, logs, warnings and errors) from the current context to the remoting response.
 * If `-debug` is defined, any application level messages (those from "trace" rather than "ufTrace", which may not necessarily be associated with this request) will also be sent to the remoting response.
 * If the `HttpRequest` does not contain the `X-Ufront-Remoting` header, or the `HttpResponse.contentType` is not "application/x-haxe-remoting", the traces will not be displayed.
 */
class RemotingLogger implements UFLogHandler {
	/**
	 * @param object $m
	 * 
	 * @return string
	 */
	static public function formatMessage ($m) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:46: characters 3-19
		$m->msg = "" . (\Std::string($m->msg)??'null');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:47: lines 47-49
		if ($m->pos->customParams !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 25-63
			$_g = new \Array_hx();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 27-61
			$_g1 = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 27-61
			$_g2 = $m->pos->customParams;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 27-61
			while ($_g1 < $_g2->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 32-33
				$p = ($_g2->arr[$_g1] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 27-61
				$_g1 = $_g1 + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 57-61
				$x = "" . (\Std::string($p)??'null');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 57-61
				$_g->arr[$_g->length] = $x;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 57-61
				++$_g->length;

			}

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:48: characters 4-63
			$m->pos->customParams = $_g;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:51: characters 3-40
		return "hxt" . (Serializer::run($m)??'null');
	}


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param HttpContext $httpContext
	 * @param \Array_hx $appMessages
	 * 
	 * @return FutureObject
	 */
	public function log ($httpContext, $appMessages) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:24: characters 7-68
		$this1 = $httpContext->request->get_clientHeaders();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:24: lines 24-39
		if (array_key_exists(strtolower("X-Ufront-Remoting"), $this1->data) && ($httpContext->response->get_contentType() === "application/x-haxe-remoting")) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:25: characters 4-21
			$results = new \Array_hx();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:26: lines 26-27
			$_g = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:26: lines 26-27
			$_g1 = $httpContext->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:26: lines 26-27
			while ($_g < $_g1->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:26: characters 9-12
				$msg = ($_g1->arr[$_g] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:26: lines 26-27
				$_g = $_g + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:27: characters 5-39
				$x = RemotingLogger::formatMessage($msg);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:27: characters 5-39
				$results->arr[$results->length] = $x;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:27: characters 5-39
				++$results->length;

			}

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:30: lines 30-33
			if ($appMessages !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:31: lines 31-32
				$_g2 = 0;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:31: lines 31-32
				while ($_g2 < $appMessages->length) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:31: characters 11-14
					$msg1 = ($appMessages->arr[$_g2] ?? null);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:31: lines 31-32
					$_g2 = $_g2 + 1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:32: characters 7-41
					$x1 = RemotingLogger::formatMessage($msg1);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:32: characters 7-41
					$results->arr[$results->length] = $x1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:32: characters 7-41
					++$results->length;

				}
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:36: lines 36-38
			if ($results->length > 0) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:37: characters 5-60
				$httpContext->response->write("\x0A" . ($results->join("\x0A")??'null'));
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/RemotingLogger.hx:41: characters 3-33
		return SurpriseTools::success();
	}
}


Boot::registerClass(RemotingLogger::class, 'ufront.log.RemotingLogger');

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx
 */

namespace ufront\log;

use \ufront\core\SurpriseTools;
use \ufront\web\context\HttpContext;
use \ufront\web\result\CallJavascriptResult;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \ufront\app\UFLogHandler;

/**
 * Logger module that prints to a JS console, either on the client directly, or on the server by adding a JS snippet to the output.
 * This will flush the messages (traces, logs, warnings and errors) from the current context to the browser.
 * This module will respect the trace types specified in the `haxe.log.Message`, using `console.log`, `console.info`, `console.warn` and `console.error` as appropriate.
 * __Server Behaviour__
 * On the server, if `-debug` is defined, any application level messages (not necessarily associated with this request, made using "trace()" rather than "ufTrace()") will also be sent to the browser.
 * If the `HttpResponse` output type is not "text/html", the traces will not be displayed.
 * The trace output will be added as an inline javascript snippet at the very end of the response, before the closing `</body>` tag.
 * __Client Behaviour__
 * If running client-side, the message will be traced to the console directly using Javascript.
 */
class BrowserConsoleLogger implements UFLogHandler {
	/**
	 * A helper to create a `console.log`, `console.info`, `console.warn` or `console.error` Javascript snippet.
	 * When executed by the client, this snippet will send the given message to the client's browser console.
	 * 
	 * @param object $m
	 * 
	 * @return string
	 */
	static public function formatMessage ($m) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:67: lines 67-72
		$type = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:67: characters 22-28
		$_g = $m->type;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:67: characters 22-28
		switch ($_g->index) {
			case 0:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:67: lines 67-72
				$type = "log";
				break;
			case 1:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:67: lines 67-72
				$type = "info";
				break;
			case 2:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:67: lines 67-72
				$type = "warn";
				break;
			case 3:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:67: lines 67-72
				$type = "error";
				break;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:73: lines 73-75
		$extras = (($m->pos !== null) && ($m->pos->customParams !== null) ? ", " . ($m->pos->customParams->join(", ")??'null') : "");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:76: characters 3-92
		$msg = "" . ($m->pos->className??'null') . "." . ($m->pos->methodName??'null') . "(" . ($m->pos->lineNumber??'null') . "): " . (\Std::string($m->msg)??'null') . ($extras??'null');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:77: characters 3-80
		return "console." . ($type??'null') . "(decodeURIComponent(\"" . (rawurlencode($msg)??'null') . "\"))";
	}


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param HttpContext $ctx
	 * @param \Array_hx $appMessages
	 * 
	 * @return FutureObject
	 */
	public function log ($ctx, $appMessages) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:33: lines 33-51
		if (($ctx->response->get_contentType() === "text/html") && !$ctx->response->isRedirect()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:34: characters 5-22
			$results = new \Array_hx();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:35: lines 35-36
			$_g = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:35: lines 35-36
			$_g1 = $ctx->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:35: lines 35-36
			while ($_g < $_g1->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:35: characters 10-13
				$msg = ($_g1->arr[$_g] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:35: lines 35-36
				$_g = $_g + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:36: characters 6-40
				$x = BrowserConsoleLogger::formatMessage($msg);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:36: characters 6-40
				$results->arr[$results->length] = $x;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:36: characters 6-40
				++$results->length;

			}

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:39: lines 39-42
			if ($appMessages !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:40: lines 40-41
				$_g2 = 0;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:40: lines 40-41
				while ($_g2 < $appMessages->length) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:40: characters 12-15
					$msg1 = ($appMessages->arr[$_g2] ?? null);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:40: lines 40-41
					$_g2 = $_g2 + 1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:41: characters 8-42
					$x1 = BrowserConsoleLogger::formatMessage($msg1);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:41: characters 8-42
					$results->arr[$results->length] = $x1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:41: characters 8-42
					++$results->length;

				}
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:45: lines 45-50
			if ($results->length > 0) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:46: characters 6-89
				$script = "\x0A<script type=\"text/javascript\">\x0A" . ($results->join("\x0A")??'null') . "\x0A</script>";
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:47: characters 6-109
				$newContent = CallJavascriptResult::insertScriptsBeforeBodyTag($ctx->response->getBuffer(), \Array_hx::wrap([$script]));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:48: characters 6-33
				$ctx->response->clearContent();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:49: characters 6-38
				$ctx->response->write($newContent);
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/BrowserConsoleLogger.hx:59: characters 3-33
		return SurpriseTools::success();
	}
}


Boot::registerClass(BrowserConsoleLogger::class, 'ufront.log.BrowserConsoleLogger');

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx
 */

namespace ufront\log;

use \ufront\core\SurpriseTools;
use \ufront\web\context\HttpContext;
use \php\Boot;
use \php\_Boot\HxException;
use \ufront\app\HttpApplication;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxString;
use \ufront\app\UFLogHandler;
use \ufront\app\UFInitRequired;
use \haxe\CallStack;

/**
 * Trace module that logs traces to a file.
 * During the `onLogRequest` event, this will open a file (relative to the `HttpContext.contentDirectory`) and append entries to the log.
 * This will log traces, logs, warnings and errors from the current request.
 * It will also log messages from `HttpApplication.messages`, which may not associated with a particular request.
 * Entries are as follows:
 * - A general request log: `$datetime [$method] [$uri] from [$clientIP] with session [$sessionID], response: [$code $contentType]`
 * - Any messages from the HttpContext, in the format `\t[$messageType] $className($line): "$message"` (note the leading tab)
 * - Any messages from the HttpApplication, in the same format.
 * New lines will be removed from the log, and added as a literal "\n".
 * Example output:
 * ```
 * 2013-09-18 11:11:07 [GET] [/staff/view/1033/] from [10.1.1.36] with session [2AijlXS3PUbxnaoFYc1pVQwPtMzigWAPfYB2y6x2], response: [200 text/html]
 * 2013-09-18 11:11:07 [POST] [/remoting/] from [10.1.1.36] with session [null], response: [500 text/html]
 * [Error] ufront.module.ErrorModule._onError(64): "Handling error: cgi.c(165) : Cannot set Return code : Headers already sent"
 * [Trace] ufront.application.HttpApplication._conclude(263): "in _conclude()"
 * 2013-09-18 11:11:07 [POST] [/remoting/] from [10.1.1.36] with session [2AijlXS3PUbxnaoFYc1pVQwPtMzigWAPfYB2y6x2], response: [500 text/html]
 * ```
 * The file will be opened, written to, and closed for each request during the `FileLogger.log()` method.
 */
class FileLogger implements UFInitRequired, UFLogHandler {
	/**
	 * @var \EReg
	 */
	static public $REMOVENL;


	/**
	 * @var string
	 * The relative or absolute path to the log file.
	 */
	public $path;


	/**
	 * Format a message in a suitable way for a text-only log file.
	 * 
	 * @param object $msg
	 * 
	 * @return string
	 */
	static public function format ($msg) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:101: characters 3-38
		$msgStr = \Std::string($msg->msg);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:102: characters 3-48
		$text = FileLogger::$REMOVENL->replace($msgStr, "\\n");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:103: characters 3-59
		$type = HxString::substr(\Type::enumConstructor($msg->type), 1);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:104: characters 3-21
		$pos = $msg->pos;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:105: characters 3-80
		return "[" . ($type??'null') . "] " . ($pos->className??'null') . "." . ($pos->methodName??'null') . "(" . ($pos->lineNumber??'null') . "): " . ($text??'null');
	}


	/**
	 * @param string $path
	 * 
	 * @return void
	 */
	public function __construct ($path) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:52: characters 3-19
		$this->path = $path;
	}


	/**
	 * Close the log file, dispose of the module
	 * 
	 * @param HttpApplication $app
	 * 
	 * @return FutureObject
	 */
	public function dispose ($app) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:61: characters 3-14
		$this->path = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:62: characters 3-33
		return SurpriseTools::success();
	}


	/**
	 * @param HttpApplication $app
	 * 
	 * @return FutureObject
	 */
	public function init ($app) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:56: characters 3-33
		return SurpriseTools::success();
	}


	/**
	 * Write any messages from the context or application.
	 * 
	 * @param HttpContext $context
	 * @param \Array_hx $appMessages
	 * 
	 * @return FutureObject
	 */
	public function log ($context, $appMessages) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:67: characters 3-47
		$logFile = ($context->get_contentDirectory()??'null') . ($this->path??'null');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:68: characters 3-29
		$req = $context->request;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:69: characters 3-30
		$res = $context->response;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:70: characters 3-34
		$userDetails = $req->get_clientIP();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:71: lines 71-75
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:72: characters 4-73
			if (((null !== $context->session ? $context->session->get_id() : null)) !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:72: characters 35-73
				$userDetails = ($userDetails??'null') . ((" " . (((null !== $context->session ? $context->session->get_id() : null))??'null'))??'null');
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:73: characters 4-81
			if (((($context->auth !== null) && ($context->auth->get_currentUser() !== null) ? $context->auth->get_currentUser()->get_userID() : null)) !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:73: characters 39-81
				$userDetails = ($userDetails??'null') . ((" " . (((($context->auth !== null) && ($context->auth->get_currentUser() !== null) ? $context->auth->get_currentUser()->get_userID() : null))??'null'))??'null');
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
					}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:77: characters 3-134
		$content = "" . (\Std::string(\Date::now())??'null') . " [" . ($req->get_httpMethod()??'null') . "] [" . ($req->get_uri()??'null') . "] from [" . ($userDetails??'null') . "], response: [" . ($res->status??'null') . " " . ($res->get_contentType()??'null') . "]\x0A";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:78: lines 78-79
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:78: lines 78-79
		$_g1 = $context->messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:78: lines 78-79
		while ($_g < $_g1->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:78: characters 8-11
			$msg = ($_g1->arr[$_g] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:78: lines 78-79
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:79: characters 4-35
			$content = ($content??'null') . (("\x09" . (FileLogger::format($msg)??'null') . "\x0A")??'null');
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:80: lines 80-81
		if ($appMessages !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:80: lines 80-81
			$_g2 = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:80: lines 80-81
			while ($_g2 < $appMessages->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:80: characters 32-35
				$msg1 = ($appMessages->arr[$_g2] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:80: lines 80-81
				$_g2 = $_g2 + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:81: characters 4-35
				$content = ($content??'null') . (("\x09" . (FileLogger::format($msg1)??'null') . "\x0A")??'null');
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/FileLogger.hx:91: characters 4-34
		return SurpriseTools::success();
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$REMOVENL = new \EReg("[\x0A\x0D]", "g");
	}
}


Boot::registerClass(FileLogger::class, 'ufront.log.FileLogger');
FileLogger::__hx__init();

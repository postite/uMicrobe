<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx
 */

namespace ufront\log;

use \ufront\core\SurpriseTools;
use \ufront\web\context\HttpContext;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxString;
use \ufront\app\UFLogHandler;
use \haxe\CallStack;

/**
 * Trace module that prints to the server console where it makes sense to do so.
 * This will use a different method on each platform where it makes sense:
 * - `neko.Web.logMessage()` on Neko and Tora.
 * - `error_log()` on PHP.
 * - `console.log()`, `console.info()`, `console.warn()`, and `console.error()` on JS.
 * This will flush the messages (traces, logs, warnings and errors) from the current context to the appropriate server log.
 */
class ServerConsoleLogger implements UFLogHandler {
	/**
	 * @param object $m
	 * 
	 * @return string
	 */
	static public function formatMsg ($m) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:50: lines 50-52
		$extras = (($m->pos !== null) && ($m->pos->customParams !== null) ? ", " . ($m->pos->customParams->join(", ")??'null') : "");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:53: characters 3-57
		$type = HxString::substr(\Type::enumConstructor($m->type), 1);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:54: characters 3-95
		return "" . ($type??'null') . ": " . ($m->pos->className??'null') . "." . ($m->pos->methodName??'null') . "(" . ($m->pos->lineNumber??'null') . "): " . (\Std::string($m->msg)??'null') . ($extras??'null');
	}


	/**
	 * @param string $message
	 * @param MessageType $type
	 * 
	 * @return void
	 */
	static public function writeLog ($message, $type = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:62: characters 4-31
		error_log($message);
	}


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param HttpContext $ctx
	 * @param \Array_hx $appMessages
	 * 
	 * @return FutureObject
	 */
	public function log ($ctx, $appMessages) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:24: characters 3-21
		$messages = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:26: characters 3-42
		$userDetails = $ctx->request->get_clientIP();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:27: lines 27-31
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:28: characters 4-65
			if (((null !== $ctx->session ? $ctx->session->get_id() : null)) !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:28: characters 31-65
				$userDetails = ($userDetails??'null') . ((" " . (((null !== $ctx->session ? $ctx->session->get_id() : null))??'null'))??'null');
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:29: characters 4-73
			if (((($ctx->auth !== null) && ($ctx->auth->get_currentUser() !== null) ? $ctx->auth->get_currentUser()->get_userID() : null)) !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:29: characters 35-73
				$userDetails = ($userDetails??'null') . ((" " . (((($ctx->auth !== null) && ($ctx->auth->get_currentUser() !== null) ? $ctx->auth->get_currentUser()->get_userID() : null))??'null'))??'null');
			}
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
					}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:32: characters 3-153
		$requestLog = "[" . ($ctx->request->get_httpMethod()??'null') . " " . ($ctx->request->get_uri()??'null') . "] from [" . ($userDetails??'null') . "], response: [" . ($ctx->response->status??'null') . " " . ($ctx->response->get_contentType()??'null') . "]";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:34: characters 3-30
		$messages->arr[$messages->length] = $requestLog;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:34: characters 3-30
		++$messages->length;

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:36: lines 36-37
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:36: lines 36-37
		$_g1 = $ctx->messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:36: lines 36-37
		while ($_g < $_g1->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:36: characters 8-11
			$msg = ($_g1->arr[$_g] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:36: lines 36-37
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:37: characters 4-35
			$x = ServerConsoleLogger::formatMsg($msg);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:37: characters 4-35
			$messages->arr[$messages->length] = $x;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:37: characters 4-35
			++$messages->length;

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:39: lines 39-42
		if ($appMessages !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:40: lines 40-41
			$_g2 = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:40: lines 40-41
			while ($_g2 < $appMessages->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:40: characters 9-12
				$msg1 = ($appMessages->arr[$_g2] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:40: lines 40-41
				$_g2 = $_g2 + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:41: characters 5-36
				$x1 = ServerConsoleLogger::formatMsg($msg1);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:41: characters 5-36
				$messages->arr[$messages->length] = $x1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:41: characters 5-36
				++$messages->length;

			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:44: characters 3-36
		ServerConsoleLogger::writeLog($messages->join("\x0A  "));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/ServerConsoleLogger.hx:46: characters 3-33
		return SurpriseTools::success();
	}
}


Boot::registerClass(ServerConsoleLogger::class, 'ufront.log.ServerConsoleLogger');

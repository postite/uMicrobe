<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/MessageList.hx
 */

namespace ufront\log;

use \php\Boot;

/**
 * A class that can be used to take messages, and either push them to an array, or process them immediately.
 * In some contexts, for example, the remoting APIs, we are not sure if we want to:
 * 1. collect traces and process them all together at a later stage (eg in a Http Context, where we log to file or browser at the end of the request).
 * 2. display the traces immediately (eg in a UFTaskSet context or in an interactive context).
 * This class is a generic implementation that allows us to do either or both.
 * See `UFApi.messages` for the main place this class is used.
 */
class MessageList {
	/**
	 * @var \Array_hx
	 * The messages array to push each message to.
	 * This is used if we are collecting messages to process at the end of a request.
	 * Read-only, set via the constructor.
	 */
	public $messages;
	/**
	 * @var \Closure
	 * The callback to process each message as it comes through.
	 * This is used if we wish to process and display a message immediately, rather than waiting until the end of a request.
	 * Read-only, set via the constructor.
	 */
	public $onMessage;


	/**
	 * Create a new MessageList, parsing in the desired values for `this.messages` and `this.onMessage`.
	 * 
	 * @param \Array_hx $messages
	 * @param \Closure $onMessage
	 * 
	 * @return void
	 */
	public function __construct ($messages = null, $onMessage = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/MessageList.hx:35: characters 3-27
		$this->messages = $messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/MessageList.hx:36: characters 3-29
		$this->onMessage = $onMessage;
	}


	/**
	 * Process a new message using the `this.messages` array or `this.onMessage` callback, if they have been provided.
	 * 
	 * @param object $m
	 * 
	 * @return void
	 */
	public function push ($m) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/MessageList.hx:41: characters 3-41
		if ($this->messages !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/MessageList.hx:41: characters 23-41
			$_this = $this->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/MessageList.hx:41: characters 23-41
			$_this->arr[$_this->length] = $m;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/MessageList.hx:41: characters 23-41
			++$_this->length;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/MessageList.hx:42: characters 3-38
		if ($this->onMessage !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/MessageList.hx:42: characters 24-38
			($this->onMessage)($m);
		}
	}
}


Boot::registerClass(MessageList::class, 'ufront.log.MessageList');

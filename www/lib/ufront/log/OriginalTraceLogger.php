<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx
 */

namespace ufront\log;

use \ufront\core\SurpriseTools;
use \ufront\web\context\HttpContext;
use \php\Boot;
use \ufront\app\HttpApplication;
use \tink\core\_Future\FutureObject;
use \ufront\app\UFLogHandler;
use \ufront\app\UFInitRequired;

/**
 * This logger uses the original trace that was in place before the `HttpApplication.init()` was called.
 * This is useful if that trace function was being used for unit testing etc.
 * Please note calls to `ufTrace`, `ufLog`, `ufWarn` and `ufError` are always passed through.
 * Plain `trace()` calls are only passed through when the `-debug` compilation flag is being used.
 */
class OriginalTraceLogger implements UFInitRequired, UFLogHandler {
	/**
	 * @var \Closure
	 */
	public $originalTrace;


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param HttpApplication $app
	 * 
	 * @return FutureObject
	 */
	public function dispose ($app) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:30: characters 3-33
		return SurpriseTools::success();
	}


	/**
	 * @param HttpApplication $app
	 * 
	 * @return FutureObject
	 */
	public function init ($app) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:25: characters 3-41
		$this->originalTrace = $app->originalTrace;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:26: characters 3-33
		return SurpriseTools::success();
	}


	/**
	 * @param HttpContext $ctx
	 * @param \Array_hx $appMessages
	 * 
	 * @return FutureObject
	 */
	public function log ($ctx, $appMessages) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:34: lines 34-35
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:34: lines 34-35
		$_g1 = $ctx->messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:34: lines 34-35
		while ($_g < $_g1->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:34: characters 8-11
			$msg = ($_g1->arr[$_g] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:34: lines 34-35
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:35: characters 4-37
			($this->originalTrace)($msg->msg, $msg->pos);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:38: lines 38-41
		if ($appMessages !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:39: lines 39-40
			$_g2 = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:39: lines 39-40
			while ($_g2 < $appMessages->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:39: characters 10-13
				$msg1 = ($appMessages->arr[$_g2] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:39: lines 39-40
				$_g2 = $_g2 + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:40: characters 6-39
				($this->originalTrace)($msg1->msg, $msg1->pos);
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/log/OriginalTraceLogger.hx:44: characters 3-33
		return SurpriseTools::success();
	}
}


Boot::registerClass(OriginalTraceLogger::class, 'ufront.log.OriginalTraceLogger');

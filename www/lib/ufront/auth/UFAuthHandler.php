<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/auth/UFAuthHandler.hx
 */

namespace ufront\auth;

use \php\Boot;
use \php\_Boot\HxAnon;

/**
 * An authentication handler that can be used with Ufront applications.
 * By using this `UFAuthHandler` interface, you are able to write code where the underlying authentication layer could be changed.
 * For example, you may switch from EasyAuth (a mysql DB form of authentication) to a solution using social logins, an OAuth provider or LDAP.
 * Or you may use a combination of these.
 * Writing your code against the `UFAuthHandler` interface, rather than a specific implementation, allows you to write your login checks, identity checks, and permission checks in a way that is usable with different (or even multiple) login mechanisms.
 * @author Jason O'Neil
 */
interface UFAuthHandler {
	/**
	 * @return UFAuthUser
	 */
	public function get_currentUser () ;


	/**
	 * Does the given user have the specified permission?
	 * Will return false if the user is not logged in, or if the user does not have permission.
	 * 
	 * @param mixed $permission
	 * 
	 * @return bool
	 */
	public function hasPermission ($permission) ;


	/**
	 * Does the given user have the specified permissions?
	 * Will return false if the user is not logged in, or if the user does not have all of the specified permissions.
	 * 
	 * @param object $permissions
	 * 
	 * @return bool
	 */
	public function hasPermissions ($permissions) ;


	/**
	 * Is a session currently open and authenticated - is the user logged in?
	 * 
	 * @return bool
	 */
	public function isLoggedIn () ;


	/**
	 * Is this particular user currently logged in?
	 * Will return false if a different user is logged in.
	 * 
	 * @param UFAuthUser $user
	 * 
	 * @return bool
	 */
	public function isLoggedInAs ($user) ;


	/**
	 * Require the user to be logged in.
	 * Otherwise throw `HttpError.authError(ANotLoggedIn)`.
	 * 
	 * @return void
	 */
	public function requireLogin () ;


	/**
	 * Require this user to be the one currently logged in.
	 * Otherwise will throw `HttpError.authError(ANotLoggedInAs(user))`
	 * 
	 * @param UFAuthUser $user
	 * 
	 * @return void
	 */
	public function requireLoginAs ($user) ;


	/**
	 * Require the given user to have the specified permission.
	 * If not, throw `HttpError.authError(ANoPermission(permission))`.
	 * 
	 * @param mixed $permission
	 * 
	 * @return void
	 */
	public function requirePermission ($permission) ;


	/**
	 * Require the given user to have the specified permissions.
	 * If not, throw `HttpError.authError(ANoPermission(permission))`.
	 * 
	 * @param object $permissions
	 * 
	 * @return void
	 */
	public function requirePermissions ($permissions) ;


	/**
	 * A String representation, usually just the name of the AuthHandler class, and possibly the current user.
	 * 
	 * @return string
	 */
	public function toString () ;
}


Boot::registerClass(UFAuthHandler::class, 'ufront.auth.UFAuthHandler');
Boot::registerMeta(UFAuthHandler::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));
Boot::registerGetters('ufront\\auth\\UFAuthHandler', [
	'currentUser' => true
]);

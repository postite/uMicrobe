<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/auth/AuthError.hx
 */

namespace ufront\auth;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * Common authentication errors that may be encountered by a `UFAuthHandler`.
 */
class AuthError extends HxEnum {
	/**
	 * Authentication failed.
	 * 
	 * @param string $msg
	 * 
	 * @return AuthError
	 */
	static public function ALoginFailed ($msg) {
		return new AuthError('ALoginFailed', 1, [$msg]);
	}


	/**
	 * A permission is required, but the user is not logged in or does not have the necessary permission.
	 * 
	 * @param mixed $p
	 * 
	 * @return AuthError
	 */
	static public function ANoPermission ($p) {
		return new AuthError('ANoPermission', 3, [$p]);
	}


	/**
	 * A login is required, but the user was not logged in.
	 * 
	 * @return AuthError
	 */
	static public function ANotLoggedIn () {
		static $inst = null;
		if (!$inst) $inst = new AuthError('ANotLoggedIn', 0, []);
		return $inst;
	}


	/**
	 * A login is required, but the user was not logged in, or is logged in as someone else.
	 * 
	 * @param UFAuthUser $u
	 * 
	 * @return AuthError
	 */
	static public function ANotLoggedInAs ($u) {
		return new AuthError('ANotLoggedInAs', 2, [$u]);
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			1 => 'ALoginFailed',
			3 => 'ANoPermission',
			0 => 'ANotLoggedIn',
			2 => 'ANotLoggedInAs',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'ALoginFailed' => 1,
			'ANoPermission' => 1,
			'ANotLoggedIn' => 0,
			'ANotLoggedInAs' => 1,
		];
	}
}


Boot::registerClass(AuthError::class, 'ufront.auth.AuthError');

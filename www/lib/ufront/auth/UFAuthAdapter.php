<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/auth/UFAuthAdapter.hx
 */

namespace ufront\auth;

use \php\Boot;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxAnon;

/**
 * An interface describing a mechanism for authenticating a user.
 * It is important to note that this does not specify how the user is authenticated - either in terms of technology or user experience.
 * For example, a username and password may be required, or you may use another method involving social logons, certificates, cookies, removal of swords from rocks, or something else entirely.
 * However the adapter instance is set up, when `this.authenticate()` is called, it should check the authentication and return either a valid user, or an auth error.
 */
interface UFAuthAdapter {
	/**
	 * @return FutureObject
	 */
	public function authenticate () ;
}


Boot::registerClass(UFAuthAdapter::class, 'ufront.auth.UFAuthAdapter');
Boot::registerMeta(UFAuthAdapter::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));

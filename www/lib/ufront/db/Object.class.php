<?php

// Generated by Haxe 3.4.7
class ufront_db_Object extends sys_db_Object {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("ufront.db.Object::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->validationErrors = ufront_db__ValidationErrors_ValidationErrors_Impl_::_new();
		parent::__construct();
		$GLOBALS['%s']->pop();
	}}
	public $id;
	public $created;
	public $modified;
	public $saved;
	public $savedTrigger;
	public function insert() {
		$GLOBALS['%s']->push("ufront.db.Object::insert");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->validate()) {
			$this->created = Date::now();
			$this->modified = Date::now();
			parent::insert();
			if($this->savedTrigger !== null) {
				tink_core__Callback_CallbackList_Impl_::invoke($this->savedTrigger->handlers, tink_core_Noise::$Noise);
			}
		} else {
			$errors = Lambda::harray(ufront_db__ValidationErrors_ValidationErrors_Impl_::toSimpleMap($this->validationErrors))->join("\x0A");
			throw new HException("Data validation failed for " . Std::string($this) . ": \x0A" . _hx_string_or_null($errors));
		}
		$GLOBALS['%s']->pop();
	}
	public function update() {
		$GLOBALS['%s']->push("ufront.db.Object::update");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->validate()) {
			$this->modified = Date::now();
			parent::update();
		} else {
			$errors = Lambda::harray(ufront_db__ValidationErrors_ValidationErrors_Impl_::toSimpleMap($this->validationErrors))->join(", ");
			throw new HException("Data validation failed for " . Std::string($this) . ": " . _hx_string_or_null($errors));
		}
		$GLOBALS['%s']->pop();
	}
	public function save() {
		$GLOBALS['%s']->push("ufront.db.Object::save");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->id === null) {
			$this->insert();
		} else {
			try {
				$this->_lock = true;
				$this->update();
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				$e = $_ex_;
				{
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					if(_hx_index_of(Std::string($e), "Data validation failed", null) !== -1) {
						throw new HException($e);
					}
					$this->insert();
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function refresh() {
		$GLOBALS['%s']->push("ufront.db.Object::refresh");
		$__hx__spos = $GLOBALS['%s']->length;
		$relArr = haxe_rtti_Meta::getType(Type::getClass($this))->ufRelationships;
		if($relArr !== null) {
			$_g = 0;
			while($_g < $relArr->length) {
				$relDetails = $relArr[$_g];
				$_g = $_g + 1;
				$fieldName = _hx_array_get(_hx_explode(",", $relDetails), 0);
				$this->{$fieldName} = null;
				unset($relDetails,$fieldName);
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function toString() {
		$GLOBALS['%s']->push("ufront.db.Object::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		$modelName = Type::getClassName(Type::getClass($this));
		$idStr = null;
		if($this->id !== null) {
			$idStr = "" . _hx_string_rec($this->id, "");
		} else {
			$idStr = "new";
		}
		{
			$tmp = "" . _hx_string_or_null($modelName) . "#" . _hx_string_or_null($idStr);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public $validationErrors;
	public function validate() {
		$GLOBALS['%s']->push("ufront.db.Object::validate");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->validationErrors === null) {
			$this->validationErrors = ufront_db__ValidationErrors_ValidationErrors_Impl_::_new();
		} else {
			ufront_db__ValidationErrors_ValidationErrors_Impl_::reset($this->validationErrors);
		}
		$this->_validationsFromMacros();
		{
			$tmp = ufront_db__ValidationErrors_ValidationErrors_Impl_::get_length($this->validationErrors) === 0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function _validationsFromMacros() {
		$GLOBALS['%s']->push("ufront.db.Object::_validationsFromMacros");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
	public function get_saved() {
		$GLOBALS['%s']->push("ufront.db.Object::get_saved");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->saved === null) {
			$this->savedTrigger = tink_core__Signal_Signal_Impl_::trigger();
			$this->saved = $this->savedTrigger;
		}
		{
			$tmp = $this->saved;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public $hxSerializationFields;
	public function get_hxSerializationFields() {
		$GLOBALS['%s']->push("ufront.db.Object::get_hxSerializationFields");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->hxSerializationFields === null) {
			$arr = haxe_rtti_Meta::getType(Type::getClass($this))->hxSerializationFields;
			$this->set_hxSerializationFields($arr->copy());
		}
		{
			$tmp = $this->hxSerializationFields;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function set_hxSerializationFields($fields) {
		$GLOBALS['%s']->push("ufront.db.Object::set_hxSerializationFields");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->hxSerializationFields = $fields;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function hxSerialize($s) {
		$GLOBALS['%s']->push("ufront.db.Object::hxSerialize");
		$__hx__spos = $GLOBALS['%s']->length;
		$s->useEnumIndex = true;
		$s->useCache = false;
		$s->serialize($this->get_hxSerializationFields()->join(","));
		{
			$_g = 0;
			$_g1 = $this->get_hxSerializationFields();
			while($_g < $_g1->length) {
				$f = $_g1[$_g];
				$_g = $_g + 1;
				$s->serialize(Reflect::getProperty($this, $f));
				unset($f);
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function hxUnserialize($s) {
		$GLOBALS['%s']->push("ufront.db.Object::hxUnserialize");
		$__hx__spos = $GLOBALS['%s']->length;
		$hxSerializationFieldsString = $s->unserialize();
		$this->set_hxSerializationFields(_hx_explode(",", $hxSerializationFieldsString));
		{
			$_g = 0;
			$_g1 = $this->get_hxSerializationFields();
			while($_g < $_g1->length) {
				$f = $_g1[$_g];
				$_g = $_g + 1;
				Reflect::setProperty($this, $f, $s->unserialize());
				unset($f);
			}
		}
		if($this->validationErrors === null) {
			$this->validationErrors = ufront_db__ValidationErrors_ValidationErrors_Impl_::_new();
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	static $manager;
	static $__properties__ = array("set_hxSerializationFields" => "set_hxSerializationFields","get_hxSerializationFields" => "get_hxSerializationFields","get_saved" => "get_saved");
	function __toString() { return $this->toString(); }
}
ufront_db_Object::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("rtti" => (new _hx_array(array("oy4:namey6:Objecty7:indexesahy9:relationsahy7:hfieldsby2:idoR0R5y6:isNullfy1:tjy17:sys.db.RecordType:0:0gy8:modifiedoR0R9R6fR7jR8:11:0gy7:createdoR0R10R6fR7r7ghy3:keyaR5hy6:fieldsar4r8r6hg"))), "noTable" => null))));
ufront_db_Object::$manager = new sys_db_Manager(_hx_qtype("ufront.db.Object"));

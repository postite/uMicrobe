<?php

// Generated by Haxe 3.4.7
class ufront_db__ValidationErrors_ValidationErrors_Impl_ {
	public function __construct(){}
	static function _new() {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::_new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new haxe_ds_StringMap();
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function reset($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::reset");
		$__hx__spos = $GLOBALS['%s']->length;
		$key = $this1->keys();
		while($key->hasNext()) {
			$key1 = $key->next();
			$this1->remove($key1);
			unset($key1);
		}
		$GLOBALS['%s']->pop();
	}
	static function set($this1, $field, $error) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::set");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$this1->exists($field)) {
			$this1->set($field, (new _hx_array(array())));
		}
		if(!Lambda::has($this1->get($field), $error)) {
			$this1->get($field)->push($error);
		}
		{
			$GLOBALS['%s']->pop();
			return $error;
		}
		$GLOBALS['%s']->pop();
	}
	static function errorMessage($this1, $field) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::errorMessage");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$this1->exists($field)) {
			$GLOBALS['%s']->pop();
			return null;
		}
		{
			$tmp = $this1->get($field)->join("\x0A");
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function errors($this1, $field) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::errors");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$this1->exists($field)) {
			$tmp = (new _hx_array(array()));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		{
			$tmp = $this1->get($field);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function isFieldValid($this1, $field) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::isFieldValid");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$this1->exists($field)) {
			$GLOBALS['%s']->pop();
			return true;
		}
		{
			$tmp = $this1->get($field)->length === 0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function areFieldsValid($this1, $fields) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::areFieldsValid");
		$__hx__spos = $GLOBALS['%s']->length;
		$allValid = true;
		{
			$_g = 0;
			while($_g < $fields->length) {
				$f = $fields[$_g];
				$_g = $_g + 1;
				if(ufront_db__ValidationErrors_ValidationErrors_Impl_::isFieldValid($this1, $f) === false) {
					$allValid = false;
				}
				unset($f);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $allValid;
		}
		$GLOBALS['%s']->pop();
	}
	static function toMap($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::toMap");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function toSimpleMap($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::toSimpleMap");
		$__hx__spos = $GLOBALS['%s']->length;
		$m = new haxe_ds_StringMap();
		{
			$k = $this1->keys();
			while($k->hasNext()) {
				$k1 = $k->next();
				$m->set($k1, $this1->get($k1)->join("\x0A"));
				unset($k1);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $this1;
		}
		$GLOBALS['%s']->pop();
	}
	static function toArray($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::toArray");
		$__hx__spos = $GLOBALS['%s']->length;
		$_g = (new _hx_array(array()));
		{
			$key = $this1->keys();
			while($key->hasNext()) {
				$key1 = $key->next();
				$_g1 = 0;
				$_g2 = $this1->get($key1);
				while($_g1 < $_g2->length) {
					$err = $_g2[$_g1];
					$_g1 = $_g1 + 1;
					$this2 = new tink_core_MPair($key1, $err);
					$_g->push($this2);
					unset($this2,$err);
				}
				unset($key1,$_g2,$_g1);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $_g;
		}
		$GLOBALS['%s']->pop();
	}
	static function toSimpleArray($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::toSimpleArray");
		$__hx__spos = $GLOBALS['%s']->length;
		$_g = (new _hx_array(array()));
		{
			$arr = $this1->iterator();
			while($arr->hasNext()) {
				$arr1 = $arr->next();
				$_g1 = 0;
				while($_g1 < $arr1->length) {
					$err = $arr1[$_g1];
					$_g1 = $_g1 + 1;
					$_g->push($err);
					unset($err);
				}
				unset($arr1,$_g1);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $_g;
		}
		$GLOBALS['%s']->pop();
	}
	static function toString($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ufront_db__ValidationErrors_ValidationErrors_Impl_::toSimpleArray($this1)->join("\x0A");
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function iterator($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::iterator");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ufront_db__ValidationErrors_ValidationErrors_Impl_::toArray($this1)->iterator();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function get_length($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::get_length");
		$__hx__spos = $GLOBALS['%s']->length;
		$l = 0;
		{
			$arr = $this1->iterator();
			while($arr->hasNext()) {
				$arr1 = $arr->next();
				$l = $l + $arr1->length;
				unset($arr1);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $l;
		}
		$GLOBALS['%s']->pop();
	}
	static function get_isValid($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::get_isValid");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ufront_db__ValidationErrors_ValidationErrors_Impl_::get_length($this1) === 0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function get_isInvalid($this1) {
		$GLOBALS['%s']->push("ufront.db._ValidationErrors.ValidationErrors_Impl_::get_isInvalid");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ufront_db__ValidationErrors_ValidationErrors_Impl_::get_length($this1) > 0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static $__properties__ = array("get_isInvalid" => "get_isInvalid","get_isValid" => "get_isValid","get_length" => "get_length");
	function __toString() { return 'ufront.db._ValidationErrors.ValidationErrors_Impl_'; }
}

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx
 */

namespace ufront\db\_ValidationErrors;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_NativeArray\NativeArrayIterator;
use \tink\core\MPair;

final class ValidationErrors_Impl_ {


	/**
	 * @return StringMap
	 */
	static public function _new () {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:8: character 9
		$this1 = new StringMap();
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:8: character 9
		return $this1;
	}


	/**
	 * Get a list of errors for a particular field as an array.  Array is empty if there are no errors.
	 * 
	 * @param StringMap $this
	 * @param \Array_hx $fields
	 * 
	 * @return bool
	 */
	static public function areFieldsValid ($this1, $fields) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:47: characters 3-23
		$allValid = true;
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:48: lines 48-50
		$_g = 0;
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:48: lines 48-50
		while ($_g < $fields->length) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:48: characters 9-10
			$f = ($fields->arr[$_g] ?? null);
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:48: lines 48-50
			$_g = $_g + 1;
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:49: characters 4-50
			if (ValidationErrors_Impl_::isFieldValid($this1, $f) === false) {
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:49: characters 34-50
				$allValid = false;
			}
		}

		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:51: characters 3-18
		return $allValid;
	}


	/**
	 * Get a list of errors for a particular field.  Null if there are no errors.  If multiple errors, they are joined together with '\n'
	 * 
	 * @param StringMap $this
	 * @param string $field
	 * 
	 * @return string
	 */
	static public function errorMessage ($this1, $field) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:29: characters 3-41
		if (!array_key_exists($field, $this1->data)) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:29: characters 30-41
			return null;
		}
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:30: characters 3-38
		return ($this1->data[$field] ?? null)->join("\x0A");
	}


	/**
	 * Get a list of errors for a particular field as an array.  Array is empty if there are no errors.
	 * 
	 * @param StringMap $this
	 * @param string $field
	 * 
	 * @return \Array_hx
	 */
	static public function errors ($this1, $field) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:35: characters 3-39
		if (!array_key_exists($field, $this1->data)) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:35: characters 30-39
			return new \Array_hx();
		}
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:36: characters 3-27
		return ($this1->data[$field] ?? null);
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return bool
	 */
	static public function get_isInvalid ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:89: characters 34-55
		return ValidationErrors_Impl_::get_length($this1) > 0;
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return bool
	 */
	static public function get_isValid ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:88: characters 32-54
		return ValidationErrors_Impl_::get_length($this1) === 0;
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return int
	 */
	static public function get_length ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:83: characters 3-13
		$l = 0;
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:84: characters 16-20
		$arr = new NativeArrayIterator($this1->data);
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:84: characters 16-20
		while ($arr->hasNext()) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:84: characters 3-38
			$arr1 = $arr->next();
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:84: characters 23-38
			$l = $l + $arr1->length;
		}

		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:85: characters 3-11
		return $l;
	}


	/**
	 * Check whether or not a field is has any validation errors.
	 * 
	 * @param StringMap $this
	 * @param string $field
	 * 
	 * @return bool
	 */
	static public function isFieldValid ($this1, $field) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:41: characters 3-41
		if (!array_key_exists($field, $this1->data)) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:41: characters 30-41
			return true;
		}
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:42: characters 3-39
		return ($this1->data[$field] ?? null)->length === 0;
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return object
	 */
	static public function iterator ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:79: characters 3-30
		return ValidationErrors_Impl_::toArray($this1)->iterator();
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return void
	 */
	static public function reset ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:15: characters 16-27
		$key = new NativeArrayIterator(array_map("strval", array_keys($this1->data)));
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:15: characters 16-27
		while ($key->hasNext()) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:15: lines 15-17
			$key1 = $key->next();
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:16: characters 4-22
			$this1->remove($key1);
		}
	}


	/**
	 * Add an error to a particular field.  If the field already has an error, this will be added to it
	 * 
	 * @param StringMap $this
	 * @param string $field
	 * @param string $error
	 * 
	 * @return string
	 */
	static public function set ($this1, $field, $error) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:22: characters 3-51
		if (!array_key_exists($field, $this1->data)) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:22: characters 30-51
			$this1->data[$field] = new \Array_hx();
		}
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:23: characters 3-79
		if (!\Lambda::has(($this1->data[$field] ?? null), $error)) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:23: characters 48-79
			$_this = ($this1->data[$field] ?? null);
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:23: characters 48-79
			$_this->arr[$_this->length] = $error;
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:23: characters 48-79
			++$_this->length;
		}
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:24: characters 3-15
		return $error;
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return \Array_hx
	 */
	static public function toArray ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 10-90
		$_g = new \Array_hx();
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 25-36
		$key = new NativeArrayIterator(array_map("strval", array_keys($this1->data)));
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 25-36
		while ($key->hasNext()) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 12-88
			$key1 = $key->next();
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 39-88
			$_g1 = 0;
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 39-88
			$_g2 = ($this1->data[$key1] ?? null);
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 39-88
			while ($_g1 < $_g2->length) {
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 45-48
				$err = ($_g2->arr[$_g1] ?? null);
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 39-88
				$_g1 = $_g1 + 1;
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 68-88
				$this2 = new MPair($key1, $err);
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 68-88
				$_g->arr[$_g->length] = $this2;
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 68-88
				++$_g->length;

			}
		}

		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:67: characters 10-90
		return $_g;
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return StringMap
	 */
	static public function toMap ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:55: characters 3-14
		return $this1;
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return \Array_hx
	 */
	static public function toSimpleArray ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 10-56
		$_g = new \Array_hx();
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 25-29
		$arr = new NativeArrayIterator($this1->data);
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 25-29
		while ($arr->hasNext()) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 12-54
			$arr1 = $arr->next();
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 32-54
			$_g1 = 0;
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 32-54
			while ($_g1 < $arr1->length) {
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 38-41
				$err = ($arr1->arr[$_g1] ?? null);
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 32-54
				$_g1 = $_g1 + 1;
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 51-54
				$_g->arr[$_g->length] = $err;
				#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 51-54
				++$_g->length;

			}
		}

		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:71: characters 10-56
		return $_g;
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return StringMap
	 */
	static public function toSimpleMap ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:59: characters 11-35
		$this2 = [];
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:59: characters 11-35
		$m_data = $this2;
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:60: characters 14-25
		$k = new NativeArrayIterator(array_map("strval", array_keys($this1->data)));
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:60: characters 14-25
		while ($k->hasNext()) {
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:60: lines 60-62
			$k1 = $k->next();
			#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:61: characters 4-38
			$m_data[$k1] = ($this1->data[$k1] ?? null)->join("\x0A");
		}

		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:63: characters 3-14
		return $this1;
	}


	/**
	 * @param StringMap $this
	 * 
	 * @return string
	 */
	static public function toString ($this1) {
		#/usr/local/lib/haxe/lib/ufront-orm/1,1,0/src/ufront/db/ValidationErrors.hx:75: characters 3-36
		return ValidationErrors_Impl_::toSimpleArray($this1)->join("\x0A");
	}
}


Boot::registerClass(ValidationErrors_Impl_::class, 'ufront.db._ValidationErrors.ValidationErrors_Impl_');
Boot::registerGetters('ufront\\db\\_ValidationErrors\\ValidationErrors_Impl_', [
	'isInvalid' => true,
	'isValid' => true,
	'length' => true
]);

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx
 */

namespace ufront\core;

use \tink\core\FutureTrigger;
use \tink\core\Outcome;
use \php\Boot;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \tink\core\MPair;
use \tink\core\Noise;
use \php\_Boot\HxAnon;

/**
 * Tools to help transform callbacks into surprises.
 * This class is designed for use with static extension: `using ufront.core.AsyncTools;`.
 */
class CallbackTools {
	/**
	 * Transform a NodeJS style async call with one returned value into a surprise.
	 * This expects an async call which has a callback with a first `error` argument (a string) and a second `data` argument of any type.
	 * If the error argument is not null, it will return a Failure, with a `tink.core.Error` with the error message and the position of the call that failed.
	 * If the error argument is null, then the call is assumed to be a success, and the value of the data is returned.
	 * Please note if both the `error` and `data` arguments are null, then a `Success(null)` will be returned.
	 * 
	 * @param \Closure $cb
	 * @param object $pos
	 * 
	 * @return FutureObject
	 */
	static public function asSurprise ($cb, $pos = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:238: characters 4-29
		$t = new FutureTrigger();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:239: lines 239-247
		$cb(function ($error, $val)  use (&$pos, &$t) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:240: lines 240-246
			if ($error !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:241: characters 6-61
				$e = TypedError::withData(500, "" . (\Std::string($error)??'null'), $pos, new HxAnon([
					"fileName" => "ufront/core/AsyncTools.hx",
					"lineNumber" => 241,
					"className" => "ufront.core.CallbackTools",
					"methodName" => "asSurprise",
				]));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:242: characters 6-29
				$t->trigger(Outcome::Failure($e));
			} else {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:245: characters 6-31
				$t->trigger(Outcome::Success($val));
			}
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:248: characters 4-23
		return $t;
	}


	/**
	 * Transform a NodeJS style async call with 2 returned values into a surprise.
	 * This expects an async call which has a callback with a first `error` argument (a string) and second and third `data` arguments of any type.
	 * If the error argument is not null, it will return a Failure, with a `tink.core.Error` with the error message and the position of the call that failed.
	 * If the error argument is null, then the call is assumed to be a success, and a pair containing the data values is returned.
	 * Please note if both the `error` and `data` arguments are null, then a `Success(Pair(null,null))` will be returned.
	 * 
	 * @param \Closure $cb
	 * @param object $pos
	 * 
	 * @return FutureObject
	 */
	static public function asSurprisePair ($cb, $pos = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:263: characters 4-29
		$t = new FutureTrigger();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:264: lines 264-272
		$cb(function ($error, $val1, $val2)  use (&$pos, &$t) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:265: lines 265-271
			if ($error !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:266: characters 6-61
				$e = TypedError::withData(500, "" . (\Std::string($error)??'null'), $pos, new HxAnon([
					"fileName" => "ufront/core/AsyncTools.hx",
					"lineNumber" => 266,
					"className" => "ufront.core.CallbackTools",
					"methodName" => "asSurprisePair",
				]));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:267: characters 6-29
				$t->trigger(Outcome::Failure($e));
			} else {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:270: characters 25-44
				$this1 = new MPair($val1, $val2);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:270: characters 6-47
				$t->trigger(Outcome::Success($this1));
			}
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:273: characters 4-23
		return $t;
	}


	/**
	 * Transform a NodeJS style async call with no returned values into a surprise.
	 * This expects an async call which has a callback with a single `error` argument.
	 * If the error argument is not null, it will return a Failure, with a `tink.core.Error` with the error message and the position of the call that failed.
	 * If the error argument is null, then the call is a `Success( Noise )`.
	 * 
	 * @param \Closure $cb
	 * @param object $pos
	 * 
	 * @return FutureObject
	 */
	static public function asVoidSurprise ($cb, $pos = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:213: characters 4-29
		$t = new FutureTrigger();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:214: lines 214-222
		$cb(function ($error)  use (&$pos, &$t) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:215: lines 215-221
			if ($error !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:216: characters 6-61
				$e = TypedError::withData(500, "" . (\Std::string($error)??'null'), $pos, new HxAnon([
					"fileName" => "ufront/core/AsyncTools.hx",
					"lineNumber" => 216,
					"className" => "ufront.core.CallbackTools",
					"methodName" => "asVoidSurprise",
				]));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:217: characters 6-29
				$t->trigger(Outcome::Failure($e));
			} else {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:220: characters 6-33
				$t->trigger(Outcome::Success(Noise::Noise()));
			}
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:223: characters 4-23
		return $t;
	}
}


Boot::registerClass(CallbackTools::class, 'ufront.core.CallbackTools');

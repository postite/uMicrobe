<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx
 */

namespace ufront\core;

use \php\Boot;

/**
 * Helper class to generate [UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) strings (version 4).
 * Original code from `thx.core` library, MIT licensed.
 */
class Uuid {
	/**
	 * `Uuid.create()` returns a UUID created using pseudo-random values.
	 * 
	 * @return string
	 */
	static public function create () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:19: characters 3-14
		$s = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:20: lines 20-21
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:20: lines 20-21
		while ($_g < 8) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:20: lines 20-21
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:20: characters 7-8
			$i = $_g - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:21: characters 11-20
			$index = (int)(floor(mt_rand() / mt_getrandmax() * 16));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:21: characters 4-20
			$s[$i] = (($index < 0) || ($index >= strlen("0123456789ABCDEF")) ? "" : "0123456789ABCDEF"[$index]);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:22: characters 3-14
		$s[8] = "-";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:23: lines 23-24
		$_g1 = 9;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:23: lines 23-24
		while ($_g1 < 13) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:23: lines 23-24
			$_g1 = $_g1 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:23: characters 7-8
			$i1 = $_g1 - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:24: characters 11-20
			$index1 = (int)(floor(mt_rand() / mt_getrandmax() * 16));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:24: characters 4-20
			$s[$i1] = (($index1 < 0) || ($index1 >= strlen("0123456789ABCDEF")) ? "" : "0123456789ABCDEF"[$index1]);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:25: characters 3-14
		$s[13] = "-";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:26: characters 3-14
		$s[14] = "4";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:27: lines 27-28
		$_g2 = 15;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:27: lines 27-28
		while ($_g2 < 18) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:27: lines 27-28
			$_g2 = $_g2 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:27: characters 7-8
			$i2 = $_g2 - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:28: characters 11-20
			$index2 = (int)(floor(mt_rand() / mt_getrandmax() * 16));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:28: characters 4-20
			$s[$i2] = (($index2 < 0) || ($index2 >= strlen("0123456789ABCDEF")) ? "" : "0123456789ABCDEF"[$index2]);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:29: characters 3-14
		$s[18] = "-";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:30: characters 16-42
		$index3 = (int)(floor(mt_rand() / mt_getrandmax() * 4));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:30: characters 3-42
		$s[19] = "" . (((($index3 < 0) || ($index3 >= strlen("89AB")) ? "" : "89AB"[$index3]))??'null');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:31: lines 31-32
		$_g3 = 20;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:31: lines 31-32
		while ($_g3 < 23) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:31: lines 31-32
			$_g3 = $_g3 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:31: characters 7-8
			$i3 = $_g3 - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:32: characters 11-20
			$index4 = (int)(floor(mt_rand() / mt_getrandmax() * 16));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:32: characters 4-20
			$s[$i3] = (($index4 < 0) || ($index4 >= strlen("0123456789ABCDEF")) ? "" : "0123456789ABCDEF"[$index4]);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:33: characters 3-14
		$s[23] = "-";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:34: lines 34-35
		$_g4 = 24;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:34: lines 34-35
		while ($_g4 < 36) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:34: lines 34-35
			$_g4 = $_g4 + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:34: characters 7-8
			$i4 = $_g4 - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:35: characters 11-20
			$index5 = (int)(floor(mt_rand() / mt_getrandmax() * 16));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:35: characters 4-20
			$s[$i4] = (($index5 < 0) || ($index5 >= strlen("0123456789ABCDEF")) ? "" : "0123456789ABCDEF"[$index5]);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:36: characters 3-20
		return $s->join("");
	}


	/**
	 * Check if a String is a valid UUID.
	 * Currently only checks for version 4 UUIDs, as generated by `Uuid.create()`.
	 * This expects any letters in the UUID to be uppercase.
	 * 
	 * @param string $s
	 * 
	 * @return bool
	 */
	static public function isValid ($s) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:45: characters 3-91
		return (new \EReg("[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}", ""))->match($s);
	}


	/**
	 * @param int $outOf
	 * 
	 * @return int
	 */
	static public function random ($outOf) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:10: characters 10-43
		return (int)(floor(mt_rand() / mt_getrandmax() * $outOf));
	}


	/**
	 * @return string
	 */
	static public function srandom () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:13: characters 10-49
		$index = (int)(floor(mt_rand() / mt_getrandmax() * 16));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:13: characters 10-49
		if (($index < 0) || ($index >= strlen("0123456789ABCDEF"))) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:13: characters 10-49
			return "";
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/Uuid.hx:13: characters 10-49
			return "0123456789ABCDEF"[$index];
		}
	}
}


Boot::registerClass(Uuid::class, 'ufront.core.Uuid');

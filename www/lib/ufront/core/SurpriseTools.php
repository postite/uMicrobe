<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx
 */

namespace ufront\core;

use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\Noise;
use \haxe\CallStack;
use \tink\core\_Lazy\LazyConst;
use \ufront\web\HttpError;

/**
 * Tools to help create, transform and respond to `Surprise` values.
 * This class is designed for use with static extension: `using ufront.core.AsyncTools;`.
 */
class SurpriseTools {
	/**
	 * @var FutureObject
	 */
	static public $s;


	/**
	 * Wrap a value in `Future.sync(Failure(err))`
	 * 
	 * @param mixed $err
	 * 
	 * @return FutureObject
	 */
	static public function asBadSurprise ($err) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:127: characters 11-38
		return new SyncFuture(new LazyConst(Outcome::Failure($err)));
	}


	/**
	 * Wrap a value in `Future.sync(Success(data))`
	 * 
	 * @param mixed $data
	 * 
	 * @return FutureObject
	 */
	static public function asGoodSurprise ($data) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:123: characters 11-39
		return new SyncFuture(new LazyConst(Outcome::Success($data)));
	}


	/**
	 * Wrap an `Outcome` in `Future.sync(outcome)`
	 * 
	 * @param Outcome $outcome
	 * 
	 * @return FutureObject
	 */
	static public function asSurprise ($outcome) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:119: characters 4-33
		return new SyncFuture(new LazyConst($outcome));
	}


	/**
	 * Wrap a value in `Future.sync(Failure(err))`
	 * 
	 * @param mixed $err
	 * @param string $msg
	 * @param object $p
	 * 
	 * @return FutureObject
	 */
	static public function asSurpriseError ($err, $msg = null, $p = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:131: lines 131-132
		if ($msg === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:132: characters 5-26
			$msg = "Failure: " . (\Std::string($err)??'null');
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:133: characters 11-60
		return new SyncFuture(new LazyConst(Outcome::Failure(HttpError::wrap($err, $msg, $p))));
	}


	/**
	 * Wrap a value in `Future.sync(Failure(err))`
	 * 
	 * @param mixed $err
	 * @param string $msg
	 * @param object $p
	 * 
	 * @return FutureObject
	 */
	static public function asSurpriseTypedError ($err, $msg = null, $p = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:138: lines 138-139
		if ($msg === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:139: characters 5-26
			$msg = "Failure: " . (\Std::string($err)??'null');
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:140: characters 11-65
		return new SyncFuture(new LazyConst(Outcome::Failure(HttpError::wrap($err, $msg, $p))));
	}


	/**
	 * If a surprise returns a Failure, transform the Failure data to _____.
	 * 
	 * @param FutureObject $s
	 * @param mixed $newFailureData
	 * 
	 * @return FutureObject
	 */
	static public function changeFailureTo ($s, $newFailureData) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:169: lines 169-172
		$ret = $s->map(function ($outcome)  use (&$newFailureData) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:169: lines 169-172
			switch ($outcome->index) {
				case 0:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:170: characters 18-19
					$d = $outcome->params[0];
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:170: characters 22-32
					return Outcome::Success($d);
					break;
				case 1:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:171: characters 22-45
					return Outcome::Failure($newFailureData);
					break;
			}
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:169: lines 169-172
		return $ret->gather();
	}


	/**
	 * If a surprise returns a Failure, transform the Failure data to a wrapped error.
	 * 
	 * @param FutureObject $s
	 * @param string $msg
	 * @param object $p
	 * 
	 * @return FutureObject
	 */
	static public function changeFailureToError ($s, $msg = null, $p = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:177: lines 177-183
		$ret = $s->map(function ($outcome)  use (&$msg, &$p) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:177: lines 177-183
			switch ($outcome->index) {
				case 0:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:178: characters 18-19
					$d = $outcome->params[0];
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:178: characters 22-32
					return Outcome::Success($d);
					break;
				case 1:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:179: characters 18-23
					$inner = $outcome->params[0];
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:180: lines 180-181
					if ($msg === null) {
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:181: characters 7-30
						$msg = "Failure: " . (\Std::string($inner)??'null');
					}
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:182: characters 6-46
					return Outcome::Failure(HttpError::wrap($inner, $msg, $p));
					break;
			}
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:177: lines 177-183
		return $ret->gather();
	}


	/**
	 * If a surprise returns a Success, transform the Success data to _____.
	 * 
	 * @param FutureObject $s
	 * @param mixed $newSuccessData
	 * 
	 * @return FutureObject
	 */
	static public function changeSuccessTo ($s, $newSuccessData) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:157: lines 157-160
		$ret = $s->map(function ($outcome)  use (&$newSuccessData) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:157: lines 157-160
			switch ($outcome->index) {
				case 0:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:158: characters 22-45
					return Outcome::Success($newSuccessData);
					break;
				case 1:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:159: characters 18-19
					$e = $outcome->params[0];
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:159: characters 22-32
					return Outcome::Failure($e);
					break;
			}
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:157: lines 157-160
		return $ret->gather();
	}


	/**
	 * If a surprise returns a Success, transform the Success data to _____.
	 * 
	 * @param FutureObject $s
	 * 
	 * @return FutureObject
	 */
	static public function changeSuccessToNoise ($s) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:165: characters 4-38
		return SurpriseTools::changeSuccessTo($s, Noise::Noise());
	}


	/**
	 * Return a `Surprise<Noise,T>` success.
	 * 
	 * @return FutureObject
	 */
	static public function success () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:112: characters 4-52
		if (SurpriseTools::$s === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:112: characters 19-52
			SurpriseTools::$s = new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:113: characters 4-17
		return SurpriseTools::$s;
	}


	/**
	 * Attempt to execute a function that returns a synchronous value.
	 * If the function succeeds, the returned value is used as a Success.
	 * If an exception is thrown, the exception value is used as a Failure.
	 * 
	 * @param \Closure $fn
	 * @param string $msg
	 * @param object $p
	 * 
	 * @return FutureObject
	 */
	static public function tryCatchSurprise ($fn, $msg = null, $p = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:149: lines 149-152
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:150: characters 5-27
			return SurpriseTools::asGoodSurprise($fn());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:152: characters 5-33
			return SurpriseTools::asSurpriseError($e, $msg, $p);
		}
	}


	/**
	 * If a surprise returns a Failure, use a fallback value instead. This results in a Future rather than a Surprise.
	 * 
	 * @param FutureObject $s
	 * @param mixed $fallback
	 * 
	 * @return FutureObject
	 */
	static public function useFallback ($s, $fallback) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:188: lines 188-191
		$ret = $s->map(function ($outcome)  use (&$fallback) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:188: lines 188-191
			switch ($outcome->index) {
				case 0:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:190: characters 18-22
					$data = $outcome->params[0];
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:190: characters 25-29
					return $data;
					break;
				case 1:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:189: characters 22-30
					return $fallback;
					break;
			}
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:188: lines 188-191
		return $ret->gather();
	}
}


Boot::registerClass(SurpriseTools::class, 'ufront.core.SurpriseTools');

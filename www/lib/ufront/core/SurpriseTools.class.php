<?php

// Generated by Haxe 3.4.7
class ufront_core_SurpriseTools {
	public function __construct(){}
	static function success() {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::success");
		$__hx__spos = $GLOBALS['%s']->length;
		if(ufront_core_SurpriseTools::$s === null) {
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(tink_core_Noise::$Noise)));
			ufront_core_SurpriseTools::$s = $tmp;
		}
		{
			$tmp = ufront_core_SurpriseTools::$s;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static $s;
	static function asSurprise($outcome) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::asSurprise");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($outcome));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function asGoodSurprise($data) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::asGoodSurprise");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success($data)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function asBadSurprise($err) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::asBadSurprise");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Failure($err)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function asSurpriseError($err, $msg = null, $p = null) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::asSurpriseError");
		$__hx__spos = $GLOBALS['%s']->length;
		if($msg === null) {
			$msg = "Failure: " . Std::string($err);
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Failure(ufront_web_HttpError::wrap($err, $msg, $p))));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function asSurpriseTypedError($err, $msg = null, $p = null) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::asSurpriseTypedError");
		$__hx__spos = $GLOBALS['%s']->length;
		if($msg === null) {
			$msg = "Failure: " . Std::string($err);
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Failure(ufront_web_HttpError::wrap($err, $msg, $p))));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function tryCatchSurprise($fn, $msg = null, $p = null) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::tryCatchSurprise");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			{
				$tmp = ufront_core_SurpriseTools::asGoodSurprise(call_user_func($fn));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				{
					$tmp = ufront_core_SurpriseTools::asSurpriseError($e, $msg, $p);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	static function changeSuccessTo($s, $newSuccessData) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::changeSuccessTo");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $s->map(array(new _hx_lambda(array(&$newSuccessData), "ufront_core_SurpriseTools_0"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function changeSuccessToNoise($s) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::changeSuccessToNoise");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = ufront_core_SurpriseTools::changeSuccessTo($s, tink_core_Noise::$Noise);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function changeFailureTo($s, $newFailureData) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::changeFailureTo");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $s->map(array(new _hx_lambda(array(&$newFailureData), "ufront_core_SurpriseTools_1"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function changeFailureToError($s, $msg = null, $p = null) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::changeFailureToError");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $s->map(array(new _hx_lambda(array(&$msg, &$p), "ufront_core_SurpriseTools_2"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function useFallback($s, $fallback) {
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::useFallback");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $s->map(array(new _hx_lambda(array(&$fallback), "ufront_core_SurpriseTools_3"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'ufront.core.SurpriseTools'; }
}
function ufront_core_SurpriseTools_0(&$newSuccessData, $outcome) {
	{
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::changeSuccessTo@157");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($outcome->index) {
		case 0:{
			$tmp = tink_core_Outcome::Success($newSuccessData);
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 1:{
			$e = _hx_deref($outcome)->params[0];
			{
				$tmp = tink_core_Outcome::Failure($e);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_core_SurpriseTools_1(&$newFailureData, $outcome) {
	{
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::changeFailureTo@169");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($outcome->index) {
		case 0:{
			$d = _hx_deref($outcome)->params[0];
			{
				$tmp = tink_core_Outcome::Success($d);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 1:{
			$tmp = tink_core_Outcome::Failure($newFailureData);
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_core_SurpriseTools_2(&$msg, &$p, $outcome) {
	{
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::changeFailureToError@177");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($outcome->index) {
		case 0:{
			$d = _hx_deref($outcome)->params[0];
			{
				$tmp = tink_core_Outcome::Success($d);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 1:{
			$inner = _hx_deref($outcome)->params[0];
			if($msg === null) {
				$msg = "Failure: " . Std::string($inner);
			}
			{
				$tmp = tink_core_Outcome::Failure(ufront_web_HttpError::wrap($inner, $msg, $p));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function ufront_core_SurpriseTools_3(&$fallback, $outcome) {
	{
		$GLOBALS['%s']->push("ufront.core.SurpriseTools::useFallback@188");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($outcome->index) {
		case 0:{
			$data = _hx_deref($outcome)->params[0];
			{
				$GLOBALS['%s']->pop();
				return $data;
			}
		}break;
		case 1:{
			$GLOBALS['%s']->pop();
			return $fallback;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}

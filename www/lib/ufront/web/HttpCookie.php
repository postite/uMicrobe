<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx
 */

namespace ufront\web;

use \php\Boot;

/**
 * A class to build and configure a HTTP Cookie to be sent to the client.
 * Creating a `HttpCookie` object does not automatically set a cookie.
 * Use `HttpResponse.setCookie(myCookie)` to ensure the cookie is sent to the client.
 */
class HttpCookie {
	/**
	 * @var \Array_hx
	 */
	static public $dayNames;
	/**
	 * @var \Array_hx
	 */
	static public $monthNames;
	/**
	 * @var float
	 */
	static public $tzOffset;


	/**
	 * @var string
	 * The domain this cookie applies to. If `null`, then this cookie will not include domain information.
	 */
	public $domain;
	/**
	 * @var \Date
	 * The date this cookie will expire. If `null`, then the cookie will not include an expiry date.
	 */
	public $expires;
	/**
	 * @var bool
	 * Whether or not this cookie is for http only, meaning it is not available to Javascript. Default is false.
	 */
	public $httpOnly;
	/**
	 * @var string
	 * The name of the cookie, used to access it in future requests: `request.cookies[name]`.
	 */
	public $name;
	/**
	 * @var string
	 * The path on the server this cookie applies to. If `null`, then the cookie will not include any path information.
	 */
	public $path;
	/**
	 * @var bool
	 * Whether or not this cookie is marked as `secure`. Default is `false`.
	 */
	public $secure;
	/**
	 * @var string
	 * The value to store in the cookie.
	 */
	public $value;


	/**
	 * @param \StringBuf $buf
	 * @param string $name
	 * @param string $value
	 * @param bool $allowNullValue
	 * 
	 * @return void
	 */
	static public function addPair ($buf, $name, $value = null, $allowNullValue = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:116: lines 116-125
		if ($allowNullValue === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:116: lines 116-125
			$allowNullValue = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:117: lines 117-118
		if (!$allowNullValue && (null === $value)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:118: characters 4-10
			return;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:119: characters 3-18
		$buf->add("; ");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:120: characters 3-18
		$buf->add($name);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:121: lines 121-122
		if (null === $value) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:122: characters 4-10
			return;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:123: characters 3-17
		$buf->add("=");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:124: characters 3-19
		$buf->add($value);
	}


	/**
	 * Create a new HttpCookie object.
	 * @param name See `this.name`.
	 * @param value See `this.value`.
	 * @param expires (optional) See `this.expires`. (The default value is `null`).
	 * @param domain (optional) See `this.domain`. (The default value is `null`).
	 * @param path (optional) See `this.path`. (The default value is `null`).
	 * @param secure (optional) See `this.secure` (The default value is `false`).
	 * @param httpOnly (optional) See `this.httpOnly` (The default value is `false`).
	 * 
	 * @param string $name
	 * @param string $value
	 * @param \Date $expires
	 * @param string $domain
	 * @param string $path
	 * @param bool $secure
	 * @param bool $httpOnly
	 * 
	 * @return void
	 */
	public function __construct ($name, $value, $expires = null, $domain = null, $path = null, $secure = false, $httpOnly = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:45: lines 45-53
		if ($secure === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:45: lines 45-53
			$secure = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:45: lines 45-53
		if ($httpOnly === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:45: lines 45-53
			$httpOnly = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:46: characters 3-19
		$this->name = $name;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:47: characters 3-21
		$this->value = $value;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:48: characters 3-25
		$this->expires = $expires;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:49: characters 3-23
		$this->domain = $domain;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:50: characters 3-19
		$this->path = $path;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:51: characters 3-23
		$this->secure = $secure;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:52: characters 3-27
		$this->httpOnly = $httpOnly;
	}


	/**
	 * Cause the cookie to expire with this request, by setting the date to a time in the past.
	 * 
	 * @return void
	 */
	public function expireNow () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:57: characters 3-36
		$this->expires = \Date::fromTime(0);
	}


	/**
	 * @return string
	 */
	public function get_description () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:70: characters 3-29
		$buf = new \StringBuf();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:71: characters 3-17
		$buf->add($this->value);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:72: lines 72-108
		if ($this->expires !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:74: lines 74-86
			if (HttpCookie::$tzOffset === null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:75: lines 75-80
				HttpCookie::$tzOffset = intval(date('Z', $this->expires->__t));
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:87: characters 21-57
			$t = HttpCookie::$tzOffset;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:87: characters 4-58
			$gmtExpires = \Date::fromTime($this->expires->getTime() + $t);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:90: lines 90-95
			$zeroPad = function ($i) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:91: characters 5-20
				$str = "" . ($i??'null');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:92: lines 92-93
				while (strlen($str) < 2) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:93: characters 6-19
					$str = "0" . ($str??'null');
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:94: characters 5-15
				return $str;
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:99: characters 4-44
			$day = (HttpCookie::$dayNames->arr[$gmtExpires->getDay()] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:100: characters 4-47
			$date = $zeroPad($gmtExpires->getDate());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:101: characters 4-50
			$month = (HttpCookie::$monthNames->arr[$gmtExpires->getMonth()] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:102: characters 4-40
			$year = $gmtExpires->getFullYear();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:103: characters 4-48
			$hour = $zeroPad($gmtExpires->getHours());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:104: characters 4-52
			$minute = $zeroPad($gmtExpires->getMinutes());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:105: characters 4-52
			$second = $zeroPad($gmtExpires->getSeconds());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:106: characters 4-71
			$dateStr = "" . ($day??'null') . ", " . ($date??'null') . "-" . ($month??'null') . "-" . ($year??'null') . " " . ($hour??'null') . ":" . ($minute??'null') . ":" . ($second??'null') . " GMT";
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:107: characters 4-38
			HttpCookie::addPair($buf, "expires", $dateStr);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:109: characters 3-35
		HttpCookie::addPair($buf, "domain", $this->domain);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:110: characters 3-31
		HttpCookie::addPair($buf, "path", $this->path);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:111: lines 111-112
		if ($this->secure) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:112: characters 4-34
			HttpCookie::addPair($buf, "secure", null, true);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:113: characters 3-24
		return $buf->b;
	}


	/**
	 * A string representation: `$name: $description`.
	 * 
	 * @return string
	 */
	public function toString () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/HttpCookie.hx:62: characters 3-31
		return "" . ($this->name??'null') . ": " . ($this->get_description()??'null');
	}


	public function __toString() {
		return $this->toString();
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$dayNames = \Array_hx::wrap([
	"Sun",
	"Mon",
	"Tue",
	"Wed",
	"Thu",
	"Fri",
	"Sat",
]);
self::$monthNames = \Array_hx::wrap([
	"Jan",
	"Feb",
	"Mar",
	"Apr",
	"May",
	"Jun",
	"Jul",
	"Aug",
	"Sep",
	"Oct",
	"Nov",
	"Dec",
]);
	}
}


Boot::registerClass(HttpCookie::class, 'ufront.web.HttpCookie');
Boot::registerGetters('ufront\\web\\HttpCookie', [
	'description' => true
]);
HttpCookie::__hx__init();

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx
 */

namespace ufront\web\result;

use \ufront\web\context\ActionContext;
use \php\Boot;
use \ufront\web\context\HttpResponse;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxString;
use \tink\core\_Future\Future_Impl_;
use \tink\core\Noise;

/**
 * A `CallJavascriptResult` wraps another `ActionResult`, and if it is a `text/html` response, it will insert some Javascript code to be executed on the client.
 * It is easiest to use this through static extension:
 * ```haxe
 * using ufront.web.result.CallJavascriptResult;
 * public function showHomepage() {
 * return
 * new ViewResult({ title: "Home" })
 * .addInlineJsToResult( "console.log('arbitrary JS')" )
 * .addJsScriptToResult( "datepicker.jquery.js" );
 * }
 * ```
 * On the server side, a `<script>` tag will be inserted before the closing `</body>` tag.
 * On the client side, the scripts will be inserted into the DOM (triggering them to execute) and then removed immediately.
 */
class CallJavascriptResult extends ActionResult implements WrappedResult {
	/**
	 * @var mixed
	 */
	public $originalResult;
	/**
	 * @var \Array_hx
	 * The collection of script tags that we are adding to the response.
	 */
	public $scripts;


	/**
	 * Wrap an `ActionResult` in a `CallJavascriptResult`, adding some inline JS.
	 * 
	 * @param mixed $originalResult
	 * @param string $js
	 * 
	 * @return CallJavascriptResult
	 */
	static public function addInlineJsToResult ($originalResult, $js) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:35: characters 3-70
		return (new CallJavascriptResult($originalResult))->addInlineJs($js);
	}


	/**
	 * Wrap an `ActionResult` in a `CallJavascriptResult`, adding a JS script.
	 * 
	 * @param mixed $originalResult
	 * @param string $path
	 * 
	 * @return CallJavascriptResult
	 */
	static public function addJsScriptToResult ($originalResult, $path) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:39: characters 3-72
		return (new CallJavascriptResult($originalResult))->addJsScript($path);
	}


	/**
	 * This will run a series of JS snippets.
	 * On the server-side it will use `insertScriptsBeforeBodyTag`, and update the response content as required.
	 * On the client side it will create the scripts as DOM objects and execute them immediately.
	 * 
	 * @param HttpResponse $response
	 * @param \Array_hx $scripts
	 * 
	 * @return void
	 */
	static public function executeScripts ($response, $scripts) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:95: characters 4-81
		$newContent = CallJavascriptResult::insertScriptsBeforeBodyTag($response->getBuffer(), $scripts);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:96: characters 4-27
		$response->clearContent();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:97: characters 4-32
		$response->write($newContent);
	}


	/**
	 * This helper function will take a HTML string, and insert the given scripts before the `</body>` tag.
	 * If there is no `</body>` substring, then the scripts will be inserted at the end of the content.
	 * 
	 * @param string $content
	 * @param \Array_hx $scripts
	 * 
	 * @return string
	 */
	static public function insertScriptsBeforeBodyTag ($content, $scripts) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:124: characters 3-33
		$script = $scripts->join("");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:125: characters 3-57
		$bodyCloseIndex = HxString::lastIndexOf($content, "</body>");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:126: lines 126-133
		if ($bodyCloseIndex === -1) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:129: characters 4-21
			$content = ($content??'null') . ($script??'null');
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:132: characters 4-87
			$content = (HxString::substring($content, 0, $bodyCloseIndex)??'null') . ($script??'null') . (HxString::substr($content, $bodyCloseIndex)??'null');
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:134: characters 3-17
		return $content;
	}


	/**
	 * @param mixed $originalResult
	 * 
	 * @return void
	 */
	public function __construct ($originalResult) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:52: characters 3-39
		$this->originalResult = $originalResult;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:53: characters 3-20
		$this->scripts = new \Array_hx();
	}


	/**
	 * @param string $js
	 * 
	 * @return CallJavascriptResult
	 */
	public function addInlineJs ($js) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:57: characters 3-64
		$_this = $this->scripts;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:57: characters 3-64
		$_this->arr[$_this->length] = "<script type=\"text/javascript\">" . ($js??'null') . "</script>";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:57: characters 3-64
		++$_this->length;

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:58: characters 3-14
		return $this;
	}


	/**
	 * @param string $path
	 * 
	 * @return CallJavascriptResult
	 */
	public function addJsScript ($path) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:62: characters 3-73
		$_this = $this->scripts;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:62: characters 3-73
		$_this->arr[$_this->length] = "<script type=\"text/javascript\" src=\"" . ($path??'null') . "\"></script>";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:62: characters 3-73
		++$_this->length;

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:63: characters 3-14
		return $this;
	}


	/**
	 * Execute the result.
	 * This will execute the original result, and then add the scripts to be executed.
	 * If the result is not does not have a content type of `text/html`, then any scripts wil be ignored.
	 * If there are no scripts added, then the result will not be effected.
	 * The scripts will be executed using `executeScripts`, with the appropriate behaviour for both client and server side code.
	 * 
	 * @param ActionContext $actionContext
	 * 
	 * @return FutureObject
	 */
	public function executeResult ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:76: lines 76-84
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:77: lines 77-83
		return Future_Impl_::_tryMap($this->originalResult->executeResult($actionContext), function ($n)  use (&$_gthis, &$actionContext) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:78: characters 4-54
			$response = $actionContext->httpContext->response;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:79: lines 79-81
			if (($response->get_contentType() === "text/html") && ($_gthis->scripts->length > 0)) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:80: characters 5-40
				CallJavascriptResult::executeScripts($response, $_gthis->scripts);
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/CallJavascriptResult.hx:82: characters 4-16
			return Noise::Noise();
		});
	}
}


Boot::registerClass(CallJavascriptResult::class, 'ufront.web.result.CallJavascriptResult');

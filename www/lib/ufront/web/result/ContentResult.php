<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx
 */

namespace ufront\web\result;

use \ufront\core\SurpriseTools;
use \ufront\web\context\ActionContext;
use \php\Boot;
use \tink\core\_Future\FutureObject;

/**
 * An `ActionResult` that prints specific `String` content to the client, optionally specifying a `contentType`.
 * This works using `HttpResponse.write(content)` and `HttpResponse.contentType`.
 * If the ContentType of the response is `text/html` then we will use `ContentResult.replaceVirtualLinks()` to replace virtual URIs in the HTML.
 */
class ContentResult extends ActionResult {
	/**
	 * @var string
	 */
	public $content;
	/**
	 * @var string
	 */
	public $contentType;


	/**
	 * A shortcut to create a new ContentResult.
	 * This is useful when you are waiting for a Future: `return getFutureContent() >> ContentResult.create;`
	 * 
	 * @param string $content
	 * 
	 * @return ContentResult
	 */
	static public function create ($content) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:21: characters 64-105
		return new ContentResult($content, null);
	}


	/**
	 * Search for virtual URLs in the HTML content and transform them using the appropriate URL filters.
	 * This will transform all URLs beginning with `~/` that are wrapped in either single quotes or double quotes, and contain no whitespace.
	 * TODO: provide a way to 'escape' this behaviour, perhaps by using `~~/` which will be rendered as plain `~/`.
	 * 
	 * @param ActionContext $actionContext
	 * @param string $html
	 * 
	 * @return string
	 */
	static public function replaceVirtualLinks ($actionContext, $html) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:50: characters 3-44
		$singleQuotes = new \EReg("(')(~/[^'\\s]*)'", "gi");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:51: characters 3-44
		$doubleQuotes = new \EReg("(\")(~/[^\"\\s]*)\"", "gi");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:52: lines 52-57
		$transformUri = function ($r)  use (&$actionContext) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:53: characters 4-31
			$quote = $r->matched(1);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:54: characters 4-37
			$originalUri = $r->matched(2);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:55: characters 4-81
			$transformedUri = ActionResult::transformUri($actionContext, $originalUri);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:56: characters 4-37
			return ($quote??'null') . ($transformedUri??'null') . ($quote??'null');
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:58: characters 3-48
		$html = $singleQuotes->map($html, $transformUri);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:59: characters 3-48
		$html = $doubleQuotes->map($html, $transformUri);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:60: characters 3-14
		return $html;
	}


	/**
	 * @param string $content
	 * @param string $contentType
	 * 
	 * @return void
	 */
	public function __construct ($content = null, $contentType = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:27: characters 3-48
		$this->content = ($content !== null ? $content : "");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:28: characters 3-33
		$this->contentType = $contentType;
	}


	/**
	 * @param ActionContext $actionContext
	 * 
	 * @return FutureObject
	 */
	public function executeResult ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:32: lines 32-33
		if (null !== $this->contentType) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:33: characters 4-64
			$actionContext->httpContext->response->set_contentType($this->contentType);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:35: lines 35-36
		if ($actionContext->httpContext->response->get_contentType() === "text/html") {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:36: characters 4-59
			$this->content = ContentResult::replaceVirtualLinks($actionContext, $this->content);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:38: characters 3-54
		$actionContext->httpContext->response->write($this->content);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ContentResult.hx:39: characters 3-33
		return SurpriseTools::success();
	}
}


Boot::registerClass(ContentResult::class, 'ufront.web.result.ContentResult');

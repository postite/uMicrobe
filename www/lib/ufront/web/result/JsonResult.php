<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/JsonResult.hx
 */

namespace ufront\web\result;

use \ufront\core\SurpriseTools;
use \ufront\web\context\ActionContext;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \haxe\Json;
use \php\_Boot\HxAnon;
use \ufront\web\HttpError;

/**
 * An `ActionResult` that sends a JSON response to the client.
 * The response content type will be set to `application/json`, and `Json.stringify` will be used to generate the JSON representation of the data.
 */
class JsonResult extends ActionResult {
	/**
	 * @var mixed
	 * The content to be serialized.
	 */
	public $content;


	/**
	 * A shortcut to create a Json Result.
	 * This is useful when you are waiting for a Future: `return getFutureData() >> JsonResult.create;`.
	 * 
	 * @param mixed $data
	 * 
	 * @return JsonResult
	 */
	static public function create ($data) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/JsonResult.hx:20: characters 59-88
		return new JsonResult($data);
	}


	/**
	 * @param mixed $content
	 * 
	 * @return void
	 */
	public function __construct ($content) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/JsonResult.hx:26: characters 3-46
		HttpError::throwIfNull($content, "content", new HxAnon([
			"fileName" => "ufront/web/result/JsonResult.hx",
			"lineNumber" => 26,
			"className" => "ufront.web.result.JsonResult",
			"methodName" => "new",
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/JsonResult.hx:27: characters 3-25
		$this->content = $content;
	}


	/**
	 * @param ActionContext $actionContext
	 * 
	 * @return FutureObject
	 */
	public function executeResult ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/JsonResult.hx:31: characters 3-57
		HttpError::throwIfNull($actionContext, "actionContext", new HxAnon([
			"fileName" => "ufront/web/result/JsonResult.hx",
			"lineNumber" => 31,
			"className" => "ufront.web.result.JsonResult",
			"methodName" => "executeResult",
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/JsonResult.hx:32: characters 3-46
		$serialized = Json::phpJsonEncode($this->content, null, null);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/JsonResult.hx:33: characters 3-57
		$actionContext->httpContext->response->write($serialized);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/JsonResult.hx:34: characters 3-70
		$actionContext->httpContext->response->set_contentType("application/json");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/JsonResult.hx:35: characters 3-33
		return SurpriseTools::success();
	}
}


Boot::registerClass(JsonResult::class, 'ufront.web.result.JsonResult');

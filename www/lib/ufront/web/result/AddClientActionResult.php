<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx
 */

namespace ufront\web\result;

use \ufront\web\context\ActionContext;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\Future_Impl_;
use \tink\core\Noise;
use \haxe\Serializer;

/**
 * An `AddClientActionResult` result wraps another `ActionResult`, and if it is a `text/html` response, it will insert some Javascript to trigger the given `UFClientAction` on the client.
 * It is easiest to use this through static extension:
 * ```haxe
 * using ufront.web.result.AddClientActionResult;
 * public function showHomepage() {
 * return
 * new ViewResult({ title: "Home" })
 * .addClientAction( SetupParalaxScrolling )
 * .addClientAction( NewNotification, ["New Email"] );
 * }
 * ```
 * The actions are sent to the client as JS calls: `ufExecuteSerializedAction( $className, $serializedData )`.
 * The data will be serialized on the server and unserialized on the client, and will generate an error if the types on the server are different to the types on the client, or if a different serialization error occurs.
 */
class AddClientActionResult extends CallJavascriptResult implements WrappedResult {
	/**
	 * @var string
	 */
	public $action;
	/**
	 * @var mixed
	 */
	public $actionData;


	/**
	 * Wrap an `ActionResult` in a `AddClientActionResult`.
	 * 
	 * @param mixed $originalResult
	 * @param string $clientAction
	 * @param mixed $data
	 * 
	 * @return AddClientActionResult
	 */
	static public function addClientAction ($originalResult, $clientAction, $data = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:36: characters 3-73
		return new AddClientActionResult($originalResult, $clientAction, $data);
	}


	/**
	 * @param mixed $originalResult
	 * @param string $clientAction
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($originalResult, $clientAction, $data = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:45: characters 3-26
		parent::__construct($originalResult);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:46: characters 3-29
		$this->action = $clientAction;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:47: characters 3-25
		$this->actionData = $data;
	}


	/**
	 * Execute the result.
	 * This will execute the original result, and then attempt to trigger the action to be executed.
	 * On the server, it will trigger the action by adding inline JS to execute the actions just before the body tag.
	 * The data will be serialized using standard Haxe serialization, and called using `ClientJsApplication.ufExecuteSerializedAction()`.
	 * On the client, this will call `ClientJsApplication.ufExecuteAction()` directly.
	 * Please note that currently this will execute immediately after the action result has finished executing, so possibly before middleware or `HttpResponse.flush()` have completed.
	 * In future this may be changed to execute after the request has finished completely.
	 * 
	 * @param ActionContext $actionContext
	 * 
	 * @return FutureObject
	 */
	public function executeResult ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:62: lines 62-80
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:63: lines 63-79
		return Future_Impl_::_tryMap($this->originalResult->executeResult($actionContext), function ($n)  use (&$_gthis, &$actionContext) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:65: characters 5-55
			$response = $actionContext->httpContext->response;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:66: lines 66-74
			if ($response->get_contentType() === "text/html") {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:67: characters 6-45
				$className = $_gthis->action;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:68: characters 6-56
				$serializedData = Serializer::run($_gthis->actionData);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:69: characters 6-82
				$fnCall = "ufExecuteSerializedAction( \"" . ($className??'null') . "\", \"" . ($serializedData??'null') . "\" )";
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:70: characters 6-69
				$script = "<script type=\"text/javascript\">" . ($fnCall??'null') . "</script>";
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:71: characters 6-105
				$newContent = CallJavascriptResult::insertScriptsBeforeBodyTag($response->getBuffer(), \Array_hx::wrap([$script]));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:72: characters 6-29
				$response->clearContent();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:73: characters 6-34
				$response->write($newContent);
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/AddClientActionResult.hx:78: characters 4-16
			return Noise::Noise();
		});
	}
}


Boot::registerClass(AddClientActionResult::class, 'ufront.web.result.AddClientActionResult');

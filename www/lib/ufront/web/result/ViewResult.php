<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx
 */

namespace ufront\web\result;

use \haxe\io\Path;
use \ufront\core\SurpriseTools;
use \tink\core\OutcomeTools;
use \tink\core\FutureTrigger;
use \tink\core\Outcome;
use \ufront\web\context\ActionContext;
use \haxe\ds\StringMap;
use \haxe\rtti\Meta;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\TypedError;
use \ufront\view\_TemplateHelper\TemplateHelper_Impl_;
use \ufront\view\UFViewEngine;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Log;
use \ufront\web\Controller;
use \php\_Boot\HxString;
use \tink\core\_Future\Future_Impl_;
use \ufront\view\_TemplateData\TemplateData_Impl_;
use \tink\core\Noise;
use \ufront\view\TemplatingEngines;
use \haxe\CallStack;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;
use \ufront\web\HttpError;

/**
 * A ViewResult loads a view from a `UFViewEngine`, executes it with the correcct `TemplatingEngine`, optionally wraps it in a layout, and writes the result to the `HttpResponse`.
 * It is designed to work with different templating engines, to be intelligent with guessing the correct view, and to work seamlessly on asynchronous platforms.
 * It writes the final output to the client `HttpResponse` with a `text/html` content type.
 * ### Choosing a view
 * A ViewResult will attempt to guess which view to use, based on the current `ActionContext`, that is, based on which controller you are in and which method was executed for the request.
 * It feels a bit like magic, but it's not: let's step through how it works.
 * __Let's look at an example:__
 * ```haxe
 * class AdminController extends Controller {
 * @:route("/dashboard/")
 * function doDashboard() {
 * return new ViewResult();
 * }
 * @:route("/camera/")
 * function takePhoto() {
 * return new ViewResult();
 * }
 * }
 * ```
 * - If you visit `/dashboard/`, it is going to use a template at `/view/admin/dashboard.html` by default.
 * - If you visit `/camera/`, it is going to use a template at `/view/admin/takePhoto.html` by default.
 * __How does it know to look there?__
 * 1. `/view/` is your viewPath, set in `UfrontConfiguration.viewPath`
 * 2. `admin/` is guessed based on the name `AdminController`.
 * We lower-case the first letter, and ignore the "Controller" part of the name.
 * Another example is `BlogPostController` or just `BlogPost` looking for views in "/blogPost/".
 * 3. `dashboard.html` and `takePhoto.html` are guessed based on the action name / method name.
 * If the name begins with "do" followed by an uppercase letter, we ignore the "do" letters.
 * So `function doDefault()` will look for a view called `default.html`.
 * We also make sure the first letter is lower-case.
 * __How do we change it?__
 * Well you can use metadata.
 * To change the default folder that views in this controller are found in, use the `@viewFolder` metadata:
 * ```haxe
 * @viewFolder("/admin-templates/")
 * class AdminController extends Controller {
 * // Views will be in the `view/admin-templates/` folder.
 * }
 * ```
 * You can also set a default layout for every action on the controller:
 * ```haxe
 * @viewFolder("/admin-templates/")
 * @layout("layout.html") // Will look in `view/admin-templates/layout.html`
 * class AdminController extends Controller {
 * // Views will be in the `view/admin-templates/` folder.
 * // Layout will be "layout.html".
 * }
 * // If you would prefer to use a layout that isn't inside the controller's `viewFolder`, add a leading slash to `@layout`:
 * @viewFolder("/admin-templates/")
 * @layout("/layout.html")
 * class AdminController extends Controller {
 * // Views will be in the `view/admin-templates/` folder.
 * // Layout will be `view/layout.html`.
 * }
 * ```
 * If you want to change the template used for one of our actions, you can use the `@template` metadata:
 * ```haxe
 * @:route("/camera/")
 * @template("camera.html") // Will look in `view/admin-templates/camera.html`
 * @layout("cameraLayout.html") // Will look in `view/admin-templates/cameraLayout.html`
 * function takePhoto() {
 * return new ViewResult();
 * }
 * ```
 * To specify a template to use manually in your code:
 * ```
 * return new ViewResult({}, "myView.html");
 * return new ViewResult({}, "myView.html").withLayout("layout.html");
 * return new ViewResult({}, "myView.html").withoutLayout();
 * ```
 * This gives you a fair amount of flexibility:
 * 1. Do nothing, and let Ufront guess.
 * 2. Be more specific, and use metadata, which is still nice and clean.
 * 3. Be very specific and flexible, specifying it in your code.
 * __What about file extensions?__
 * I've used ".html" views in all these examples, but you could leave this out.
 * If the viewPath does not include an extension, any view matching one of the extensions supported by our templating engines will be used.
 * You can optionally specify a TemplatingEngine to use also.
 * See `UFViewEngine.getTemplate()` for a detailed description of how a template is chosen.
 * ### Setting data
 * When you create the view, you can specify some data to execute the template with:
 * ```haxe
 * new ViewResult({ name: "jason", age: 26 });
 * ```
 * You can add to this data using `ViewResult.setVar()` and `ViewResult.setVars()`.
 * You can also specify some global data that will always be included for your app:
 * ```
 * ViewResult.globalValues["copyright"] = "&copy; 2014 Haxe Foundation, all rights reserved.";
 * ```
 * Helpers (dynamic functions) can be included in your ViewResult also.
 * ### Wrapping your view with a layout
 * Most websites will have a layout that is used on almost all of your pages, and then individual views for each different kind of page.
 * In Ufront, a layout is just another `ufront.view.UFTemplate` which has a variable called "viewContent".
 * The result of the current view will be inserted into the "viewContent" field of the layout.
 * All of the same data mappings and helpers will be available to the layout when it renders.
 * You can set a default layout to be used with all ViewResults using the static method `ViewResult.setDefaultLayout()`, or by injecting a String named "defaultLayout" into the app's dependency injector.
 * You can set a default layout for a controller using `@layout("layout.html")` style metadata.
 * You can set a layout for an individual result using `ViewResult.withLayout()`.
 * Finally if you have a default layout, but want to NOT use a layout, you can use `ViewResult.withoutLayout()`
 * ### Where does it get the views from?
 * Short answer: by default, it gets them from the filesystem in the "view/" folder relative to the script directory.
 * Long answer:
 * Ufront supports different view engines. (See `UFViewEngine`).
 * For example, you could have a view engine that loads templates from a database, rather than from the FileSystem.
 * Or one that loads them over HTTP from a server somewhere.
 * ViewResult will use dependency injection to get the correct UFViewEngine four our app.
 * You can set this by setting `UfrontConfiguration.viewEngine` when you start your Ufront app.
 * By default, it is configured to use the `FileViewEngine`, loading views from the "view/" directory relative to your script directory, so "www/view/".
 * ### What if I want a different templating engine?
 * We use a `UFViewEngine` to load our templates, and these support multiple templating engines.
 * You can view some available engines in `TemplatingEngines`, and it will be fairly easy to create a new templating engine if needed.
 * You can use `UfrontApplication.addTemplatingEngine()` to add a new engine, which will then be available to your view results.
 * ### Helpers
 * You can use helpers in your views, and they will be passed to the template:
 * ```haxe
 * myViewResult.addHelper( "markdown", function(md) return Markdown.markdownToHtml(md) );
 * myViewResult.addHelpers([
 * "upper" => function(str:String) { return str.toUpperCase(); },
 * "trim" => function(str:String,len:Int) { return str.substr(0,len)+"..."; }
 * ]);
 * ViewResult.globalHelpers['add'] = function(a:Int,b:Int) return a+b;
 * ```
 * The syntax for calling helpers inside the views will depend on the templating engine you are using.
 * ### Partials
 * You can include "partials" in your view results - separate templates that can be called from inside your view or your layout (or even other partials).
 * ```haxe
 * myViewResult.addPartial("login", "forms/loginForm");
 * myViewResult.addPartial("signup", "forms/signupForm.html", TemplatingEngines.erazor);
 * myViewResult.addPartials([
 * "login" => "forms/loginForm.html",
 * "signup" => "forms/signupForm.html"
 * ], TemplatingEngines.haxe);
 * myViewResult.addPartialString("btn", "<a href='::link::' class='btn'>::name::</a>", TemplatingEngines.haxe);
 * ViewResult.globalPartials['menu'] = TFromEngine("menu.html", TemplatingEngines.erazor);
 * ```
 * The partials will be loaded when the ViewResult is executed, and made available as a helper in your template, so you call a partial in the same way you call a helper.
 * For example, using erazor:
 * ```html
 * <div>
 * <div class="btn-toolbar">
 * @btn({ name: "Home", link: "/" })
 * @btn({ name: "Logout", link: "/logout/" })
 * </div>
 * <div>
 * @loginForm()
 * @signupForm()
 * </div>
 * </div>
 * ```
 * When each partial renders, it will render with `TemplateData` that includes:
 * - Everything available to the main view and layout.
 * - Any data passed to the partial.
 * See, for example, the "btn" partial in the examples.
 * The data that is passed to the partial is added with `TemplateData.setObject()`.
 * - The data itself, passed as a variable named `__current__`.
 * This can be useful if the given argument is not an object or class instance, but a String or Array.
 * Each partial will also render with all of the same helpers and partials as the main view and layout.
 * This means that partials can render other sub-partials, as many levels deep as required.
 * ### Virtual URLs
 * We will use `ContentResult.replaceVirtualLinks` to replace virtual URIs in HTML `src`, `href` and `action` attributes.
 * ```html
 * <!-- So this template: -->
 * <a href="~/login/">Login</a>
 * <!-- Might become (depending on how your app is set up): -->
 * <a href="/path/to/app/index.php?q=/login/">Login</a>
 * ```
 */
class ViewResult extends ActionResult {
	/**
	 * @var StringMap
	 * Global helpers that should be made available to every ViewResult.
	 */
	static public $globalHelpers;
	/**
	 * @var StringMap
	 * Global partials that should be made available to every ViewResult.
	 */
	static public $globalPartials;
	/**
	 * @var object
	 * Global values that should be made available to every ViewResult.
	 */
	static public $globalValues;


	/**
	 * @var object
	 * The data to pass to the template during `executeResult`.
	 * This will be combined with the `helpers` and `globalData` before being passed to the templates `execute` function.
	 * This is set during the constructor, and you can add to it using the `setVar` and `setVars` helper methods.
	 */
	public $data;
	/**
	 * @var FutureObject
	 * A `Future` that will eventually hold the final compiled output for the `ViewResult`.
	 */
	public $finalOutput;
	/**
	 * @var FutureTrigger
	 */
	public $finalOutputTrigger;
	/**
	 * @var StringMap
	 * Any helpers (dynamic functions) to pass to the template when it is executed.
	 */
	public $helpers;
	/**
	 * @var TemplateSource
	 * The source used for loading a layout template. Set in `this.withLayout()`, `this.withoutLayout()` `this.usingTemplateString()`, or inferred during `this.executeResult()`.
	 */
	public $layoutSource;
	/**
	 * @var StringMap
	 * Any partials that are to be made available during rendering.
	 * They will be loaded during `renderResult()` and executed as required.
	 */
	public $partials;
	/**
	 * @var TemplateSource
	 * The source used for loading a view template. Set in the constructor or with `this.usingTemplateString()`, or inferred during `this.executeResult()`.
	 */
	public $templateSource;
	/**
	 * @var string
	 * The default folder to assume the templates are in.
	 * Any template that is to be loaded from an engine, and whose path does not begin with a '/', (so is not absolute), will be searched for inside `viewFolder`.
	 * If `viewFolder` is null when `executeResult()` is called, it will be set based on the controller's `@viewFolder` metadata, or based on the controller's name.
	 */
	public $viewFolder;


	/**
	 * Create helpers for each partial.
	 * Add them to the helpers map as we go so they're available to other partials.
	 * 
	 * @param StringMap $partialTemplates
	 * @param object $contextData
	 * @param StringMap $contextHelpers
	 * 
	 * @return void
	 */
	static public function addHelpersForPartials ($partialTemplates, $contextData, $contextHelpers) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:671: characters 17-40
		$name = new NativeArrayIterator(array_map("strval", array_keys($partialTemplates->data)));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:671: characters 17-40
		while ($name->hasNext()) {
			unset($partial, $name1);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:671: lines 671-682
			$name1 = $name->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:672: characters 4-41
			$partial = ($partialTemplates->data[$name1] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:673: lines 673-680
			$partialFn = function ($partialData)  use (&$contextData, &$contextHelpers, &$partial, &$name1) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:675: characters 31-49
				$this1 = new HxAnon();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:675: characters 5-50
				$combinedPartialData = $this1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:676: characters 5-49
				TemplateData_Impl_::setObject($combinedPartialData, $contextData);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:677: characters 5-49
				TemplateData_Impl_::setObject($combinedPartialData, $partialData);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:678: characters 5-58
				TemplateData_Impl_::set($combinedPartialData, "__current__", $partialData);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:679: characters 5-109
				return OutcomeTools::sure(ViewResult::executeTemplate("Partial[" . ($name1??'null') . "]", Outcome::Success($partial), $combinedPartialData, $contextHelpers));
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:681: characters 4-36
			$v = TemplateHelper_Impl_::from1($partialFn);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:681: characters 4-36
			$contextHelpers->data[$name1] = $v;

		}
	}


	/**
	 * @param TemplateSource $layoutSource
	 * @param string $viewFolder
	 * 
	 * @return TemplateSource
	 */
	static public function addViewFolderToPath ($layoutSource, $viewFolder) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:611: lines 611-620
		if ($layoutSource->index === 1) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:612: characters 26-32
			$engine = $layoutSource->params[1];
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:612: characters 21-25
			$path = $layoutSource->params[0];
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:617: characters 35-49
			$path = (\StringTools::startsWith($path, "/") ? HxString::substr($path, 1) : "" . ($viewFolder??'null') . "/" . ($path??'null'));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:618: characters 5-32
			return TemplateSource::TFromEngine($path, $engine);
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:619: characters 12-24
			return $layoutSource;
		}
	}


	/**
	 * A shortcut to create a new ViewResult.
	 * This is useful when you are waiting for a Future: `return getFutureContent() >> ViewResult.create;`
	 * 
	 * @param object $data
	 * 
	 * @return ViewResult
	 */
	static public function create ($data) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:261: characters 77-81
		$obj = new HxAnon();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:261: characters 77-81
		$this1 = ($obj !== null ? $obj : new HxAnon());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:261: characters 54-83
		return new ViewResult(TemplateData_Impl_::setObject($this1, $data));
	}


	/**
	 * @param string $reason
	 * @param mixed $data
	 * @param object $pos
	 * 
	 * @return Outcome
	 */
	static public function error ($reason, $data, $pos = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:701: characters 3-67
		return Outcome::Failure(HttpError::internalServerError($reason, $data, $pos));
	}


	/**
	 * @param string $section
	 * @param Outcome $tplOutcome
	 * @param object $combinedData
	 * @param StringMap $combinedHelpers
	 * 
	 * @return Outcome
	 */
	static public function executeTemplate ($section, $tplOutcome, $combinedData, $combinedHelpers) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:686: lines 686-697
		switch ($tplOutcome->index) {
			case 0:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:687: characters 18-21
				$tpl = $tplOutcome->params[0];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:688: lines 688-694
				try {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:688: characters 9-68
					return Outcome::Success($tpl($combinedData, $combinedHelpers));
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$e = $__hx__real_e;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:691: characters 7-12
					(Log::$trace)(CallStack::toString(CallStack::exceptionStack()), new HxAnon([
						"fileName" => "ufront/web/result/ViewResult.hx",
						"lineNumber" => 691,
						"className" => "ufront.web.result.ViewResult",
						"methodName" => "executeTemplate",
					]));
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:693: characters 6-66
					return ViewResult::error("Unable to execute " . ($section??'null') . " template: " . (\Std::string($e)??'null'), $e, new HxAnon([
						"fileName" => "ufront/web/result/ViewResult.hx",
						"lineNumber" => 693,
						"className" => "ufront.web.result.ViewResult",
						"methodName" => "executeTemplate",
					]));
				}
				break;
			case 1:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:695: characters 18-21
				$err = $tplOutcome->params[0];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:696: characters 5-66
				return ViewResult::error("Unable to load " . ($section??'null') . " template: " . (\Std::string($err)??'null'), $err, new HxAnon([
					"fileName" => "ufront/web/result/ViewResult.hx",
					"lineNumber" => 696,
					"className" => "ufront.web.result.ViewResult",
					"methodName" => "executeTemplate",
				]));
				break;
		}
	}


	/**
	 * @param \Array_hx $mapSets
	 * 
	 * @return StringMap
	 */
	static public function getCombinedMap ($mapSets) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:532: characters 3-32
		$combinedMaps = new StringMap();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:533: lines 533-537
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:533: lines 533-537
		while ($_g < $mapSets->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:533: characters 9-12
			$set = ($mapSets->arr[$_g] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:533: lines 533-537
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:534: characters 17-27
			$key = new NativeArrayIterator(array_map("strval", array_keys($set->data)));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:534: characters 17-27
			while ($key->hasNext()) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:534: lines 534-536
				$key1 = $key->next();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:535: characters 5-33
				$v = ($set->data[$key1] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:535: characters 5-33
				$combinedMaps->data[$key1] = $v;
			}

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:538: characters 3-22
		return $combinedMaps;
	}


	/**
	 * @param ActionContext $actionContext
	 * 
	 * @return string
	 */
	static public function getViewFolder ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:542: characters 3-65
		$controllerCls = \Type::getClass($actionContext->controller);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:543: characters 3-65
		$viewFolderMeta = Boot::dynamicField(Meta::getType($controllerCls), 'viewFolder');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:544: characters 3-25
		$viewFolder = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:545: lines 545-556
		if (($viewFolderMeta !== null) && ($viewFolderMeta->length > 0)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:546: characters 4-37
			$viewFolder = "" . (\Std::string(($viewFolderMeta->arr[0] ?? null))??'null');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:547: characters 4-51
			$viewFolder = Path::removeTrailingSlashes($viewFolder);
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:551: characters 25-98
			$_this = \Type::getClassName(\Type::getClass($actionContext->controller));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:551: characters 25-104
			$_this1 = \Array_hx::wrap(explode(".", $_this));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:551: characters 25-104
			if ($_this1->length > 0) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:551: characters 25-104
				$_this1->length--;
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:551: characters 4-105
			$controllerName = array_pop($_this1->arr);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:552: characters 4-86
			$controllerName = (strtolower((0 >= strlen($controllerName) ? "" : $controllerName[0]))??'null') . (HxString::substr($controllerName, 1)??'null');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:553: lines 553-554
			if (\StringTools::endsWith($controllerName, "Controller")) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:554: characters 5-74
				$controllerName = HxString::substr($controllerName, 0, strlen($controllerName) - 10);
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:555: characters 4-31
			$viewFolder = $controllerName;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:557: characters 3-20
		return $viewFolder;
	}


	/**
	 * @param ActionContext $actionContext
	 * 
	 * @return TemplateSource
	 */
	static public function inferLayoutFromContext ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:584: characters 3-32
		$layoutPath = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:587: characters 3-65
		$controllerCls = \Type::getClass($actionContext->controller);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:588: characters 3-49
		$classMeta = Meta::getType($controllerCls);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:589: characters 3-52
		$fieldsMeta = Meta::getFields($controllerCls);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:590: characters 3-99
		$actionFieldMeta = \Reflect::field($fieldsMeta, $actionContext->action);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:591: lines 591-605
		if (($actionFieldMeta !== null) && (Boot::dynamicField($actionFieldMeta, 'layout') !== null) && (Boot::dynamicField($actionFieldMeta, 'layout')->length > 0)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:592: characters 4-45
			$layoutPath = "" . (\Std::string((Boot::dynamicField($actionFieldMeta, 'layout')->arr[0] ?? null))??'null');
		} else if ((Boot::dynamicField($classMeta, 'layout') !== null) && (Boot::dynamicField($classMeta, 'layout')->length > 0)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:595: characters 4-39
			$layoutPath = "" . (\Std::string((Boot::dynamicField($classMeta, 'layout')->arr[0] ?? null))??'null');
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:599: lines 599-604
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:600: characters 5-88
				$layoutPath = $actionContext->httpContext->injector->getValueForType("String", "defaultLayout");
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:601: lines 601-603
				if (($layoutPath !== null) && (\StringTools::startsWith($layoutPath, "/") === false)) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:602: characters 6-33
					$layoutPath = "/" . ($layoutPath??'null');
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e = $__hx__real_e;
							}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:607: characters 10-67
		if ($layoutPath !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:607: characters 31-59
			return TemplateSource::TFromEngine($layoutPath, null);
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:607: characters 62-67
			return TemplateSource::TNone();
		}
	}


	/**
	 * @param ActionContext $actionContext
	 * 
	 * @return TemplateSource
	 */
	static public function inferViewPathFromContext ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:561: characters 3-23
		$viewPath = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:564: characters 3-65
		$controllerCls = \Type::getClass($actionContext->controller);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:565: characters 3-52
		$fieldsMeta = Meta::getFields($controllerCls);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:566: characters 3-99
		$actionFieldMeta = \Reflect::field($fieldsMeta, $actionContext->action);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:567: lines 567-578
		if (($actionFieldMeta !== null) && (Boot::dynamicField($actionFieldMeta, 'template') !== null) && (Boot::dynamicField($actionFieldMeta, 'template')->length > 0)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:568: characters 4-45
			$viewPath = "" . (\Std::string((Boot::dynamicField($actionFieldMeta, 'template')->arr[0] ?? null))??'null');
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:572: characters 4-38
			$action = $actionContext->action;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:573: characters 4-47
			$startsWithDo = \StringTools::startsWith($action, "do");
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:574: characters 4-97
			$thirdCharUpperCase = (strlen($action) > 2) && (((2 >= strlen($action) ? "" : $action[2])) === strtoupper((2 >= strlen($action) ? "" : $action[2])));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:575: lines 575-576
			if ($startsWithDo && $thirdCharUpperCase) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:576: characters 5-30
				$action = HxString::substr($action, 2);
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:577: characters 4-64
			$viewPath = (strtolower((0 >= strlen($action) ? "" : $action[0]))??'null') . (HxString::substr($action, 1)??'null');
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:580: characters 3-39
		return TemplateSource::TFromEngine($viewPath, null);
	}


	/**
	 * @param \Array_hx $partialSources
	 * @param UFViewEngine $engine
	 * 
	 * @return FutureObject
	 */
	static public function loadPartialTemplates ($partialSources, $engine) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:638: characters 3-60
		$allPartialSources = ViewResult::getCombinedMap($partialSources);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:639: characters 3-39
		$allPartialTemplates = new StringMap();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:640: characters 3-33
		$partialErrors = new StringMap();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:641: characters 3-30
		$allPartialFutures = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:642: characters 17-41
		$name = new NativeArrayIterator(array_map("strval", array_keys($allPartialSources->data)));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:642: characters 17-41
		while ($name->hasNext()) {
			unset($source, $name1);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:642: lines 642-651
			$name1 = $name->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:643: characters 4-41
			$source = ($allPartialSources->data[$name1] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:644: characters 4-60
			$surprise = ViewResult::loadTemplateFromSource($source, $engine);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:645: lines 645-649
			$surprise->handle(function ($outcome)  use (&$source, &$allPartialTemplates, &$name1, &$partialErrors) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:645: lines 645-649
				switch ($outcome->index) {
					case 0:
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:646: characters 18-21
						$tpl = $outcome->params[0];
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:646: lines 646-647
						if ($tpl !== null) {
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:646: characters 39-70
							$allPartialTemplates->data[$name1] = $tpl;
						} else {
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:647: characters 22-145
							$v = HttpError::internalServerError("Partial " . ($name1??'null') . " must be either TFromString or TFromEngine, was " . (\Std::string($source)??'null'), null, new HxAnon([
								"fileName" => "ufront/web/result/ViewResult.hx",
								"lineNumber" => 647,
								"className" => "ufront.web.result.ViewResult",
								"methodName" => "loadPartialTemplates",
							]));
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:647: characters 22-145
							$partialErrors->data[$name1] = $v;
						}
						break;
					case 1:
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:648: characters 18-21
						$err = $outcome->params[0];
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:648: characters 24-49
						$partialErrors->data[$name1] = $err;
						break;
				}
			});
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:650: characters 4-38
			$allPartialFutures->arr[$allPartialFutures->length] = $surprise;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:650: characters 4-38
			++$allPartialFutures->length;

		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:652: lines 652-663
		$ret = Future_Impl_::ofMany($allPartialFutures)->map(function ($_)  use (&$allPartialTemplates, &$partialErrors) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:653: characters 4-53
			$numberOfErrors = \Lambda::count($partialErrors);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:654: lines 654-662
			switch ($numberOfErrors) {
				case 0:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:655: characters 13-43
					return Outcome::Success($allPartialTemplates);
					break;
				case 1:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:657: characters 16-44
					$_g = new \Array_hx();
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:657: characters 27-40
					$e = new NativeArrayIterator($partialErrors->data);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:657: characters 27-40
					while ($e->hasNext()) {
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:657: characters 17-43
						$e1 = $e->next();
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:657: characters 42-43
						$_g->arr[$_g->length] = $e1;
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:657: characters 42-43
						++$_g->length;
					}

					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:657: characters 6-48
					$err1 = ($_g->arr[0] ?? null);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:658: characters 6-20
					return Outcome::Failure($err1);
					break;
				default:
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:660: characters 25-66
					$_g1 = new \Array_hx();
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:660: characters 39-59
					$name2 = new NativeArrayIterator(array_map("strval", array_keys($partialErrors->data)));
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:660: characters 39-59
					while ($name2->hasNext()) {
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:660: characters 26-65
						$name3 = $name2->next();
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:660: characters 61-65
						$_g1->arr[$_g1->length] = $name3;
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:660: characters 61-65
						++$_g1->length;
					}

					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:660: characters 6-67
					$partialNames = $_g1;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:661: characters 6-85
					return ViewResult::error("Partials " . (\Std::string($partialNames)??'null') . " failed to load: " . ($partialErrors->toString()??'null'), $partialErrors, new HxAnon([
						"fileName" => "ufront/web/result/ViewResult.hx",
						"lineNumber" => 661,
						"className" => "ufront.web.result.ViewResult",
						"methodName" => "loadPartialTemplates",
					]));
					break;
			}
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:652: lines 652-663
		return $ret->gather();
	}


	/**
	 * @param TemplateSource $source
	 * @param UFViewEngine $engine
	 * 
	 * @return FutureObject
	 */
	static public function loadTemplateFromSource ($source, $engine) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:624: lines 624-634
		switch ($source->index) {
			case 0:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:625: characters 25-41
				$templatingEngine = $source->params[1];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:625: characters 21-24
				$str = $source->params[0];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:626: lines 626-631
				try {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:626: characters 9-62
					return new SyncFuture(new LazyConst(Outcome::Success($templatingEngine->factory($str))));
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$e = $__hx__real_e;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:628: characters 6-67
					$engine1 = "Templating Engine: \"" . ($templatingEngine->type??'null') . "\"";
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:629: characters 6-49
					$template = "String template: \"" . ($str??'null') . "\"";
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:630: characters 6-76
					return new SyncFuture(new LazyConst(ViewResult::error("Failed to parse template.", "" . ($engine1??'null') . "\x0A" . ($template??'null'), new HxAnon([
						"fileName" => "ufront/web/result/ViewResult.hx",
						"lineNumber" => 630,
						"className" => "ufront.web.result.ViewResult",
						"methodName" => "loadTemplateFromSource",
					]))));
				}
				break;
			case 1:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:632: characters 26-42
				$templatingEngine1 = $source->params[1];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:632: characters 21-25
				$path = $source->params[0];
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:632: characters 45-89
				return $engine->getTemplate($path, $templatingEngine1);
				break;
			case 2:
			case 3:
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:633: characters 26-54
				return new SyncFuture(new LazyConst(Outcome::Success(null)));
				break;
		}
	}


	/**
	 * Create a new ViewResult, with the specified data.
	 * @param data (optional) Some initial template data to set. If not supplied, an empty {} object will be used.
	 * @param viewPath (optional) A specific view path to use. If not supplied, it will be inferred based on the `ActionContext` in `this.executeResult()`.
	 * @param templatingEngine (optional) A specific templating engine to use for the view. If not supplied, it will be inferred based on the `viewPath` in `this.executeResult()`.
	 * 
	 * @param object $data
	 * @param string $viewPath
	 * @param object $templatingEngine
	 * 
	 * @return void
	 */
	public function __construct ($data = null, $viewPath = null, $templatingEngine = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:333: characters 15-39
		$tmp = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:333: characters 15-39
		if ($data !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:333: characters 15-39
			$tmp = $data;
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:333: characters 37-39
			$obj = new HxAnon();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:333: characters 37-39
			$this1 = ($obj !== null ? $obj : new HxAnon());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:333: characters 15-39
			$tmp = TemplateData_Impl_::setObject($this1, new HxAnon());
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:333: characters 3-39
		$this->data = $tmp;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:334: characters 3-27
		$this->helpers = new StringMap();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:335: characters 3-28
		$this->partials = new StringMap();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:336: characters 3-93
		$this->templateSource = ($viewPath !== null ? TemplateSource::TFromEngine($viewPath, $templatingEngine) : TemplateSource::TUnknown());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:337: characters 3-31
		$this->layoutSource = TemplateSource::TUnknown();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:338: characters 3-45
		$this->finalOutputTrigger = new FutureTrigger();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:339: characters 3-40
		$this->finalOutput = $this->finalOutputTrigger;
	}


	/**
	 * Add a helper to be used in rendering the result.
	 * 
	 * @param string $name
	 * @param object $helper
	 * 
	 * @return ViewResult
	 */
	public function addHelper ($name, $helper) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:396: characters 3-25
		$this->helpers->data[$name] = $helper;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:397: characters 3-14
		return $this;
	}


	/**
	 * Add multiple helpers to be used in rendering the result.
	 * 
	 * @param StringMap $helpers
	 * 
	 * @return ViewResult
	 */
	public function addHelpers ($helpers) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:402: characters 17-31
		$name = new NativeArrayIterator(array_map("strval", array_keys($helpers->data)));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:402: characters 17-31
		while ($name->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:402: lines 402-404
			$name1 = $name->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:403: characters 4-36
			$this->addHelper($name1, ($helpers->data[$name1] ?? null));
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:405: characters 3-14
		return $this;
	}


	/**
	 * Add a partial template file to be available while rendering the result.
	 * 
	 * @param string $name
	 * @param string $partialPath
	 * @param object $templatingEngine
	 * 
	 * @return ViewResult
	 */
	public function addPartial ($name, $partialPath, $templatingEngine = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:410: characters 3-64
		$v = TemplateSource::TFromEngine($partialPath, $templatingEngine);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:410: characters 3-64
		$this->partials->data[$name] = $v;

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:411: characters 3-14
		return $this;
	}


	/**
	 * Add a partial template string to be available while rendering the result.
	 * 
	 * @param string $name
	 * @param string $partialTemplate
	 * @param object $templatingEngine
	 * 
	 * @return ViewResult
	 */
	public function addPartialString ($name, $partialTemplate, $templatingEngine) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:416: characters 3-68
		$v = TemplateSource::TFromString($partialTemplate, $templatingEngine);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:416: characters 3-68
		$this->partials->data[$name] = $v;

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:417: characters 3-14
		return $this;
	}


	/**
	 * Add multiple partial template strings to be available while rendering the result.
	 * 
	 * @param StringMap $partials
	 * @param object $templatingEngine
	 * 
	 * @return ViewResult
	 */
	public function addPartialStrings ($partials, $templatingEngine) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:430: characters 17-32
		$name = new NativeArrayIterator(array_map("strval", array_keys($partials->data)));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:430: characters 17-32
		while ($name->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:430: lines 430-432
			$name1 = $name->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:431: characters 4-62
			$this->addPartialString($name1, ($partials->data[$name1] ?? null), $templatingEngine);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:433: characters 3-14
		return $this;
	}


	/**
	 * Add multiple partial template files to be available while rendering the result.
	 * 
	 * @param StringMap $partials
	 * @param object $templatingEngine
	 * 
	 * @return ViewResult
	 */
	public function addPartials ($partials, $templatingEngine = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:422: characters 17-32
		$name = new NativeArrayIterator(array_map("strval", array_keys($partials->data)));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:422: characters 17-32
		while ($name->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:422: lines 422-424
			$name1 = $name->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:423: characters 4-56
			$this->addPartial($name1, ($partials->data[$name1] ?? null), $templatingEngine);
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:425: characters 3-14
		return $this;
	}


	/**
	 * Execute the given ViewResult and write the response to the output.
	 * - If the layout or view has not been set, figure out which one to use. (See the documentation at the top of this class for details).
	 * - If `viewFolder` is null, it will be set based on the controller's `@viewFolder` metadata or based on the controller's name.
	 * - Run `renderResult()` with a `UFViewEngine` from our injector, and with the controller's `baseUri` property included in the default data.
	 * - When the final render of the ViewResult is ready, replace any relative relative URLs using `ContentResult.replaceVirtualLinks()`.
	 * - Write the final response to the client using `writeResponse()`. By default this will output it as `text/html`. You can also override `writeResponse()` in a sub class, as we do in `PartialViewResult`.
	 * 
	 * @param ActionContext $actionContext
	 * 
	 * @return FutureObject
	 */
	public function executeResult ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:445: lines 445-470
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:446: characters 8-20
		$_g = $this->layoutSource;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:446: lines 446-447
		if ($_g->index === 3) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:447: characters 4-58
			$this->layoutSource = ViewResult::inferLayoutFromContext($actionContext);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:448: characters 8-22
		$_g1 = $this->templateSource;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:448: lines 448-449
		if ($_g1->index === 3) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:449: characters 4-62
			$this->templateSource = ViewResult::inferViewPathFromContext($actionContext);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:450: lines 450-451
		if ($this->viewFolder === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:451: characters 4-47
			$this->viewFolder = ViewResult::getViewFolder($actionContext);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:452: characters 3-31
		$viewEngine = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:453: lines 453-457
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:454: characters 4-76
			$viewEngine = $actionContext->httpContext->injector->getValueForType("ufront.view.UFViewEngine", null);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:456: characters 4-184
			return SurpriseTools::asSurpriseError($e, "Failed to find a UFViewEngine in ViewResult.executeResult(), please make sure that one is made available in your application's injector", new HxAnon([
				"fileName" => "ufront/web/result/ViewResult.hx",
				"lineNumber" => 456,
				"className" => "ufront.web.result.ViewResult",
				"methodName" => "executeResult",
			]));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:459: characters 21-39
		$this1 = new HxAnon();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:459: characters 3-40
		$defaultData = $this1;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:460: characters 20-72
		$value = $actionContext->controller;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:460: characters 3-73
		$controller = (($value instanceof Controller) ? $value : null);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:461: lines 461-462
		if ($controller !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:462: characters 4-52
			TemplateData_Impl_::set($defaultData, "baseUri", $controller->baseUri);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:464: lines 464-469
		return Future_Impl_::_tryMap($this->renderResult($viewEngine, $defaultData), function ($finalOut)  use (&$_gthis, &$actionContext) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:465: characters 4-75
			$finalOut = ContentResult::replaceVirtualLinks($actionContext, $finalOut);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:466: characters 4-44
			$_gthis->writeResponse($finalOut, $actionContext);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:467: characters 4-47
			$_gthis->finalOutputTrigger->trigger($finalOut);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:468: characters 4-16
			return Noise::Noise();
		});
	}


	/**
	 * Render the current ViewResult and get the resulting String.
	 * The view and layout templates will both be loaded from the given `UFViewEngine`.
	 * They will be executed with:
	 * - partials from `ViewResult.globalPartials` and `this.partials`
	 * - helpers from `ViewResult.globalHelpers` and `this.helpers`
	 * - data from `this.defaultData`, `ViewResult.globalData` and `this.data`
	 * with the latter taking precedence over the former.
	 * The view will be rendered first, and then it's output will be available in the layout as the `viewContent` variable.
	 * This can be used separately from `executeResult()` if you want to render a ViewResult outside of a regular HTTP context.
	 * For example, if you wished to render a view and a layout to send a HTML email from the command line.
	 * 
	 * @param UFViewEngine $viewEngine
	 * @param object $defaultData
	 * 
	 * @return FutureObject
	 */
	public function renderResult ($viewEngine, $defaultData = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:489: lines 489-524
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:490: characters 8-20
		$_g = $this->layoutSource;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:490: lines 490-491
		if ($_g->index === 3) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:491: characters 4-103
			return SurpriseTools::asSurpriseError(null, "No layout template source was set on the ViewResult", new HxAnon([
				"fileName" => "ufront/web/result/ViewResult.hx",
				"lineNumber" => 491,
				"className" => "ufront.web.result.ViewResult",
				"methodName" => "renderResult",
			]));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:492: characters 8-22
		$_g1 = $this->templateSource;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:492: lines 492-493
		if ($_g1->index === 3) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:493: characters 4-101
			return SurpriseTools::asSurpriseError(null, "No view template source was set on the ViewResult", new HxAnon([
				"fileName" => "ufront/web/result/ViewResult.hx",
				"lineNumber" => 493,
				"className" => "ufront.web.result.ViewResult",
				"methodName" => "renderResult",
			]));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:494: lines 494-495
		if ($defaultData === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:495: characters 4-20
			$obj = new HxAnon();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:495: characters 4-20
			$this1 = ($obj !== null ? $obj : new HxAnon());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:495: characters 4-15
			$defaultData = TemplateData_Impl_::setObject($this1, new HxAnon());
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:496: lines 496-499
		if ($this->viewFolder !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:497: characters 4-18
			$this->templateSource = ViewResult::addViewFolderToPath($this->templateSource, $this->viewFolder);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:498: characters 4-16
			$this->layoutSource = ViewResult::addViewFolderToPath($this->layoutSource, $this->viewFolder);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:500: characters 3-76
		$templateReady = ViewResult::loadTemplateFromSource($this->templateSource, $viewEngine);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:501: characters 3-72
		$layoutReady = ViewResult::loadTemplateFromSource($this->layoutSource, $viewEngine);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:502: characters 3-85
		$partialsReady = ViewResult::loadPartialTemplates(\Array_hx::wrap([
			ViewResult::$globalPartials,
			$this->partials,
		]), $viewEngine);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:93: characters 4-68
		$combinedFuture = Future_Impl_::ofMany(\Array_hx::wrap([
			$templateReady,
			$layoutReady,
			$partialsReady,
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:79: lines 79-83
		$handle = function ($cb)  use (&$combinedFuture) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:80: lines 80-82
			$combinedFuture->handle(function ($values)  use (&$cb) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:81: characters 5-30
				$cb(($values->arr[0] ?? null), ($values->arr[1] ?? null), ($values->arr[2] ?? null));
			});
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:86: lines 86-90
		$map = function ($cb1)  use (&$combinedFuture) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:87: lines 87-89
			$ret = $combinedFuture->map(function ($values1)  use (&$cb1) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:88: characters 5-37
				return $cb1(($values1->arr[0] ?? null), ($values1->arr[1] ?? null), ($values1->arr[2] ?? null));
			});
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:87: lines 87-89
			return $ret->gather();
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:97: characters 4-32
		$inlobj_handle = $handle;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/core/AsyncTools.hx:97: characters 4-32
		$inlobj_map = $map;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:504: lines 504-523
		return $inlobj_map(function ($viewTemplate, $layoutTemplate, $partialTemplates)  use (&$e, &$_gthis, &$defaultData) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:507: lines 507-522
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:508: characters 6-84
				$combinedData = TemplateData_Impl_::fromMany(\Array_hx::wrap([
					$defaultData,
					ViewResult::$globalValues,
					$_gthis->data,
				]));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:509: characters 6-71
				$combinedHelpers = ViewResult::getCombinedMap(\Array_hx::wrap([
					ViewResult::$globalHelpers,
					$_gthis->helpers,
				]));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:510: characters 6-85
				ViewResult::addHelpersForPartials(OutcomeTools::sure($partialTemplates), $combinedData, $combinedHelpers);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:513: characters 6-98
				$viewOut = OutcomeTools::sure(ViewResult::executeTemplate("view", $viewTemplate, $combinedData, $combinedHelpers));
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:514: lines 514-520
				if (($layoutTemplate->index === 0) && ($layoutTemplate->params[0] === null)) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:515: characters 7-32
					return Outcome::Success($viewOut);
				} else {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:518: characters 7-132
					$layoutOut = OutcomeTools::sure(ViewResult::executeTemplate("layout", $layoutTemplate, TemplateData_Impl_::set($combinedData, "viewContent", $viewOut), $combinedHelpers));
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:519: characters 7-34
					return Outcome::Success($layoutOut);
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if ($__hx__real_e instanceof TypedError) {
					$e = $__hx__real_e;
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:522: characters 21-40
					return Outcome::Failure($e);
				} else  throw $__hx__caught_e;
			}
		});
	}


	/**
	 * Add a `key=>value` pair to our TemplateData
	 * 
	 * @param string $key
	 * @param mixed $val
	 * 
	 * @return ViewResult
	 */
	public function setVar ($key, $val) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:383: characters 3-23
		TemplateData_Impl_::array_set($this->data, $key, $val);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:384: characters 3-14
		return $this;
	}


	/**
	 * Add an object or map with key=>value pairs to our TemplateData
	 * 
	 * @param StringMap $map
	 * @param object $obj
	 * 
	 * @return ViewResult
	 */
	public function setVars ($map = null, $obj = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:389: characters 3-41
		if ($map !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:389: characters 18-41
			TemplateData_Impl_::setMap($this->data, $map);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:390: characters 3-44
		if ($obj !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:390: characters 18-44
			TemplateData_Impl_::setObject($this->data, $obj);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:391: characters 3-14
		return $this;
	}


	/**
	 * Use a static string as the templates, rather than loading from a UFViewEngine.
	 * If `template` or `layout` is not supplied or null, the usual rules will apply for loading a view using the UFViewEngine.
	 * @param template The template string for the view.
	 * @param layout (optional) The template string for the layout. If not supplied, the layout will be unaffected.
	 * @param templatingEngine (optional) The templating engine to render the given view and layout with. If not specified, `TemplatingEngine.haxe` will be used.
	 * 
	 * @param string $template
	 * @param string $layout
	 * @param object $templatingEngine
	 * 
	 * @return ViewResult
	 */
	public function usingTemplateString ($template, $layout = null, $templatingEngine = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:369: lines 369-370
		if ($templatingEngine === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:370: characters 4-45
			$templatingEngine = TemplatingEngines::get_haxe();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:372: lines 372-373
		if ($template !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:373: characters 4-67
			$this->templateSource = TemplateSource::TFromString($template, $templatingEngine);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:375: lines 375-376
		if ($layout !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:376: characters 4-63
			$this->layoutSource = TemplateSource::TFromString($layout, $templatingEngine);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:378: characters 3-14
		return $this;
	}


	/**
	 * Specify a layout to wrap this view.
	 * @param layoutPath
	 * @param templatingEngine (optional) A templating engine to use with this layout. If none is specified, the first templating engine matching the layoutPath's extension will be used.
	 * 
	 * @param string $layoutPath
	 * @param object $templatingEngine
	 * 
	 * @return ViewResult
	 */
	public function withLayout ($layoutPath, $templatingEngine = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:349: characters 3-66
		$this->layoutSource = TemplateSource::TFromEngine($layoutPath, $templatingEngine);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:350: characters 3-14
		return $this;
	}


	/**
	 * Prevent a default layout from wrapping this view - this view will appear standalone, not wrapped by a layout.
	 * 
	 * @return ViewResult
	 */
	public function withoutLayout () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:355: characters 3-28
		$this->layoutSource = TemplateSource::TNone();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:356: characters 3-14
		return $this;
	}


	/**
	 * @param string $response
	 * @param ActionContext $actionContext
	 * 
	 * @return void
	 */
	public function writeResponse ($response, $actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:527: characters 3-63
		$actionContext->httpContext->response->set_contentType("text/html");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ViewResult.hx:528: characters 3-55
		$actionContext->httpContext->response->write($response);
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


$obj = new HxAnon();
$this1 = ($obj !== null ? $obj : new HxAnon());
self::$globalValues = TemplateData_Impl_::setObject($this1, new HxAnon());
self::$globalHelpers = new StringMap();
self::$globalPartials = new StringMap();
	}
}


Boot::registerClass(ViewResult::class, 'ufront.web.result.ViewResult');
ViewResult::__hx__init();

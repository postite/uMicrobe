<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx
 */

namespace ufront\web\result;

use \ufront\core\SurpriseTools;
use \ufront\web\context\ActionContext;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \sys\io\File;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \ufront\web\HttpError;

/**
 * Sends the contents of a file to the response.
 */
class FilePathResult extends FileResult {
	/**
	 * @var string
	 * Gets or sets the path of the file that is sent to the response.
	 */
	public $fileName;


	/**
	 * @param fileName - Absolute path to the file to be sent in response.  If null, no content is written to the response.
	 * @param contentType - Internet Media Type to use.  If null, it will be inferred from the extension of 'fileName' (only image types supported at the moment).  If this fails, it will remain null, and no header will be added.  In this situation the client tries to correctly guess the type of the file.
	 * @param fileDownloadName - file name to display to the client.  Default is null.  If non-null value is supplied, the file will be forced as a download to the client.
	 * 
	 * @param string $fileName
	 * @param string $contentType
	 * @param string $fileDownloadName
	 * 
	 * @return void
	 */
	public function __construct ($fileName = null, $contentType = null, $fileDownloadName = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:24: characters 3-41
		parent::__construct($contentType, $fileDownloadName);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:25: characters 3-27
		$this->fileName = $fileName;
	}


	/**
	 * @param ActionContext $actionContext
	 * 
	 * @return FutureObject
	 */
	public function executeResult ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:29: characters 3-39
		parent::executeResult($actionContext);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:31: lines 31-42
		if (null !== $this->fileName) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:32: lines 32-33
			if (!file_exists($this->fileName)) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:33: characters 6-11
				throw new HxException(HttpError::pageNotFound(new HxAnon([
					"fileName" => "ufront/web/result/FilePathResult.hx",
					"lineNumber" => 33,
					"className" => "ufront.web.result.FilePathResult",
					"methodName" => "executeResult",
				])));
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:34: lines 34-41
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:35: characters 6-44
				$bytes = File::getBytes($this->fileName);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:36: characters 6-77
				$actionContext->httpContext->response->writeBytes($bytes, 0, $bytes->length);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:37: characters 6-36
				return SurpriseTools::success();
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:40: characters 6-11
				throw new HxException(HttpError::internalServerError("Failed to read file " . ($this->fileName??'null') . " in FilePathResult: " . (\Std::string($e)??'null'), $e, new HxAnon([
					"fileName" => "ufront/web/result/FilePathResult.hx",
					"lineNumber" => 40,
					"className" => "ufront.web.result.FilePathResult",
					"methodName" => "executeResult",
				])));
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/FilePathResult.hx:43: characters 4-34
		return SurpriseTools::success();
	}
}


Boot::registerClass(FilePathResult::class, 'ufront.web.result.FilePathResult');

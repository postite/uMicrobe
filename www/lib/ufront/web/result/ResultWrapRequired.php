<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/ResultWrapRequired.hx
 */

namespace ufront\web\result;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * A collection of flags describing operations that are required to wrap any controller return type into a `FutureActionOutcome`.
 * In our `Controller.execute()` methods, we return a consistent `Future<Outcome<ActionResult,tink.core.Error>>` type, despite the return type of the method/action executed.
 * This is used by the `Controller` build macro, and the `Controller.execute()` method in conjunction with `haxe.EnumFlags` to know which wrapping operations are required on a given result.
 */
class ResultWrapRequired extends HxEnum {
	/**
	 * The return type was synchronous, and must be wrapped in a `Future`.
	 * 
	 * @return ResultWrapRequired
	 */
	static public function WRFuture () {
		static $inst = null;
		if (!$inst) $inst = new ResultWrapRequired('WRFuture', 0, []);
		return $inst;
	}


	/**
	 * The return type was not an `Outcome`, and must be wrapped in either `Outcome.Success` or `Outcome.Failure`.
	 * 
	 * @return ResultWrapRequired
	 */
	static public function WROutcome () {
		static $inst = null;
		if (!$inst) $inst = new ResultWrapRequired('WROutcome', 1, []);
		return $inst;
	}


	/**
	 * The return type was not an `ActionResult` (or on the failure case, a `tink.core.Error`).
	 * It must be wrapped into the appropriate object.
	 * 
	 * @return ResultWrapRequired
	 */
	static public function WRResultOrError () {
		static $inst = null;
		if (!$inst) $inst = new ResultWrapRequired('WRResultOrError', 2, []);
		return $inst;
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			0 => 'WRFuture',
			1 => 'WROutcome',
			2 => 'WRResultOrError',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'WRFuture' => 0,
			'WROutcome' => 0,
			'WRResultOrError' => 0,
		];
	}
}


Boot::registerClass(ResultWrapRequired::class, 'ufront.web.result.ResultWrapRequired');

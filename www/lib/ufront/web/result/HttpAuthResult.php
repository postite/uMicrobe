<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx
 */

namespace ufront\web\result;

use \ufront\core\SurpriseTools;
use \tink\core\Outcome;
use \ufront\web\context\ActionContext;
use \ufront\web\context\HttpContext;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\_Lazy\LazyConst;

/**
 * A result that requires a certain username and password to be provided before executing an action.
 * Recommended usage:
 * ```haxe
 * @:route("/admin/")
 * public function adminArea() {
 * return HttpAuthResult.requireAuth( context, "admin", "its-a-secret", "Please Log In", "Bad Username or Password", function() {
 * executeSubController( AdminController );
 * });
 * };
 * ```
 */
class HttpAuthResult extends ActionResult {
	/**
	 * @var string
	 */
	public $failureMessage;
	/**
	 * @var string
	 */
	public $message;


	/**
	 * @param username The expected username.
	 * @param password The expected password.
	 * @param message (optional) The message to show in the popup box. Default is "Please login";
	 * @param failureMessage (optional) The HTML to show in the browser if the login is cancelled. Default is to re-use `message`.s
	 * @param successFn The function to execute if authentication is correct. Must return a `FutureActionOutcome`, such as from using `executeSubController( AdminController )`.
	 * @return A FutureActionOutcome, either the result of `fn()` or a `HttpAuthResult` that displays a login box.
	 * 
	 * @param HttpContext $context
	 * @param string $username
	 * @param string $password
	 * @param string $message
	 * @param string $failureMessage
	 * @param \Closure $successFn
	 * 
	 * @return FutureObject
	 */
	static public function requireAuth ($context, $username, $password, $message = null, $failureMessage = null, $successFn) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:38: characters 3-44
		$auth = $context->request->get_authorization();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:39: lines 39-45
		if (($auth !== null) && ($auth->user === $username) && ($auth->pass === $password)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:40: characters 4-22
			return $successFn();
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:43: characters 4-73
			$result = new HttpAuthResult($message, $failureMessage);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:44: characters 11-41
			return new SyncFuture(new LazyConst(Outcome::Success($result)));
		}
	}


	/**
	 * @param string $message
	 * @param string $failureMessage
	 * 
	 * @return void
	 */
	public function __construct ($message, $failureMessage) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:49: characters 3-25
		$this->message = $message;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:50: characters 3-72
		$this->failureMessage = ($failureMessage !== null ? $failureMessage : $message);
	}


	/**
	 * @param ActionContext $actionContext
	 * 
	 * @return FutureObject
	 */
	public function executeResult ($actionContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:54: characters 3-70
		$actionContext->httpContext->response->requireAuthentication($this->message);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:55: characters 3-61
		$actionContext->httpContext->response->write($this->failureMessage);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/result/HttpAuthResult.hx:56: characters 3-33
		return SurpriseTools::success();
	}
}


Boot::registerClass(HttpAuthResult::class, 'ufront.web.result.HttpAuthResult');

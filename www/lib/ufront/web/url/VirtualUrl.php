<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx
 */

namespace ufront\web\url;

use \php\Boot;

/**
 * A `VirtualUrl` is similar to its super-class `PartialUrl`, except that it keeps track of if the URL is intended to be "Virtual" or "Physical".
 * - A "Physical" URL means that the path is actually a physical file and is available through the web server, and does not require routing through Ufront.
 * It is suitable for physical assets, such as stylesheets and javascript files.
 * - A "Virtual" URL means that the path is not a physical file, and must be loaded through Ufront (through your `index.n` file or similar).
 * It is suitable for any page generated by Ufront.
 * Each URL is considered "virtual" by default, but is marked `isPhysical` if:
 * - The URL begins with a `~`, for example: `~/js/client.js` if considered physical, while `/js/client.js` is considered virtual.
 * - The function call to `VirtualUrl.parse()` (or `HttpContext.generateUri()`) passes an argument to specify `isPhysical=true`.
 */
class VirtualUrl extends PartialUrl {
	/**
	 * @var bool
	 * Did the parsed URL begin with a `~` segment, so is it intended to be relative to the app path?
	 */
	public $isPhysical;


	/**
	 * Process a URL string and feed it into the given `VirtualUrl` object.
	 * 
	 * @param VirtualUrl $u
	 * @param string $url
	 * 
	 * @return void
	 */
	static public function feed ($u, $url) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:35: characters 3-28
		PartialUrl::feed($u, $url);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:36: lines 36-41
		if (($u->segments->arr[0] ?? null) === "~") {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:37: characters 4-22
			$_this = $u->segments;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:37: characters 4-22
			if ($_this->length > 0) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:37: characters 4-22
				$_this->length--;
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:37: characters 4-22
			array_shift($_this->arr);

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:38: lines 38-39
			if (($u->segments->length === 1) && (($u->segments->arr[0] ?? null) === "")) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:39: characters 5-21
				$_this1 = $u->segments;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:39: characters 5-21
				if ($_this1->length > 0) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:39: characters 5-21
					$_this1->length--;
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:39: characters 5-21
				array_pop($_this1->arr);
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:40: characters 4-23
			$u->isPhysical = true;
		}
	}


	/**
	 * Parse a URL into a `VirtualUrl` object, being careful to check for a leading "~" segment.
	 * 
	 * @param string $url
	 * @param bool $isPhysical
	 * 
	 * @return VirtualUrl
	 */
	static public function parse ($url, $isPhysical = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:27: lines 27-31
		if ($isPhysical === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:27: lines 27-31
			$isPhysical = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:28: characters 3-40
		$u = new VirtualUrl($isPhysical);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:29: characters 3-17
		VirtualUrl::feed($u, $url);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:30: characters 3-11
		return $u;
	}


	/**
	 * @param bool $isPhysical
	 * 
	 * @return void
	 */
	public function __construct ($isPhysical = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:21: lines 21-24
		if ($isPhysical === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:21: lines 21-24
			$isPhysical = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:22: characters 3-10
		parent::__construct();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/VirtualUrl.hx:23: characters 3-31
		$this->isPhysical = $isPhysical;
	}
}


Boot::registerClass(VirtualUrl::class, 'ufront.web.url.VirtualUrl');

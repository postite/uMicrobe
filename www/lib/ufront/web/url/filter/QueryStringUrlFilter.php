<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx
 */

namespace ufront\web\url\filter;

use \ufront\web\url\VirtualUrl;
use \php\Boot;
use \ufront\web\url\PartialUrl;
use \php\_Boot\HxAnon;

/**
 * A `UFUrlFilter` to add or remove a front script and query parameter from the URL segments.
 * To be used if neither URL rewriting nor `PathInfo` is being used, but rather simple parameters.
 * For example this would filter URLs between a normalized state of `index.n?q=/some/path/` and a clean state of `/some/path/`.
 */
class QueryStringUrlFilter implements UFUrlFilter {
	/**
	 * @var string
	 * The name of the script file to filter. Defaults to `index.n` on Neko or `index.php` on PHP.
	 */
	public $frontScript;
	/**
	 * @var string
	 * Parameter name that stores the path. Default is `q`, as in `index.php?q=/some/path/`.
	 */
	public $paramName;
	/**
	 * @var bool
	 * If the URI is for the application root, should we use "index.php" (`false`) or "" (`true`). Default is `true`.
	 */
	public $useCleanRoot;


	/**
	 * Construct a new Filter based on the given frontScript name and parameter name
	 * @param paramName (optional) Set the `paramName`. Otherwise use the default ("q").
	 * @param frontScript (optional) Set the `frontScript`, otherwise use the default for the platform.
	 * @param useCleanRoot (optional) Set the value for `useCleanRoot`. The default value is `true`.
	 * 
	 * @param string $paramName
	 * @param string $frontScript
	 * @param bool $useCleanRoot
	 * 
	 * @return void
	 */
	public function __construct ($paramName = "q", $frontScript = null, $useCleanRoot = true) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:30: lines 30-41
		if ($paramName === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:30: lines 30-41
			$paramName = "q";
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:30: lines 30-41
		if ($useCleanRoot === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:30: lines 30-41
			$useCleanRoot = true;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:31: lines 31-33
		if ($frontScript === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:32: lines 32-33
			$frontScript = "index.php";
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:38: characters 3-33
		$this->frontScript = $frontScript;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:39: characters 3-29
		$this->paramName = $paramName;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:40: characters 3-35
		$this->useCleanRoot = $useCleanRoot;
	}


	/**
	 * Remove `this.frontScript` and `this.paramName` from the URL.
	 * 
	 * @param PartialUrl $url
	 * 
	 * @return void
	 */
	public function filterIn ($url) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:44: lines 44-53
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:45: lines 45-52
		if (($url->segments->arr[0] ?? null) === $this->frontScript) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:46: characters 4-77
			$param = \Lambda::find($url->query, function ($p)  use (&$_gthis) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:46: characters 51-75
				return $p->name === $_gthis->paramName;
			});
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:47: lines 47-51
			if ($param !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:48: characters 5-86
				$value = ($param->encoded ? urldecode($param->value) : $param->value);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:49: characters 5-60
				$url->segments = PartialUrl::parse($param->value)->segments;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:50: characters 5-30
				$url->query->remove($param);
			}
		}
	}


	/**
	 * Add `this.frontScript` and `this.paramName` to the URL.
	 * 
	 * @param VirtualUrl $url
	 * 
	 * @return void
	 */
	public function filterOut ($url) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:57: lines 57-64
		if (!($url->isPhysical || (($url->segments->length === 0) && $this->useCleanRoot))) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:61: characters 4-46
			$path = "/" . ($url->segments->join("/")??'null');
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:62: characters 4-32
			$url->segments = \Array_hx::wrap([$this->frontScript]);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:63: characters 4-65
			$_this = $url->query;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:63: characters 4-65
			$_this->arr[$_this->length] = new HxAnon([
				"name" => $this->paramName,
				"value" => $path,
				"encoded" => true,
			]);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/QueryStringUrlFilter.hx:63: characters 4-65
			++$_this->length;

		}
	}
}


Boot::registerClass(QueryStringUrlFilter::class, 'ufront.web.url.filter.QueryStringUrlFilter');

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx
 */

namespace ufront\web\url\filter;

use \ufront\web\url\VirtualUrl;
use \php\Boot;
use \ufront\web\url\PartialUrl;

/**
 * A `UFUrlFilter` to add or remove a front script (such as `index.php`) from the URL segments.
 * To be used if URL rewriting is not being used, but the web server is passing a `PATH_INFO` environment variable to our script.
 * For example this would filter URLs between a normalized state of `index.n/some/path/` and a clean state of `/some/path/`.
 */
class PathInfoUrlFilter implements UFUrlFilter {
	/**
	 * @var string
	 * The name of the script file to filter. Defaults to `index.n` on Neko or `index.php` on PHP.
	 */
	public $frontScript;
	/**
	 * @var bool
	 * If the URI is for the application root, should we use "index.php" (`false`) or "" (`true`). Default is `true`.
	 */
	public $useCleanRoot;


	/**
	 * Construct a new Filter based on the given `frontScript` name.
	 * @param frontScript (optional) Set the `frontScript`, otherwise use the default for the platform.
	 * @param useCleanRoot (optional) Set the value for `useCleanRoot`. The default value is `true`.
	 * 
	 * @param string $frontScript
	 * @param bool $useCleanRoot
	 * 
	 * @return void
	 */
	public function __construct ($frontScript = null, $useCleanRoot = true) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:26: lines 26-36
		if ($useCleanRoot === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:26: lines 26-36
			$useCleanRoot = true;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:27: lines 27-29
		if ($frontScript === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:28: lines 28-29
			$frontScript = "index.php";
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:34: characters 3-33
		$this->frontScript = $frontScript;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:35: characters 3-35
		$this->useCleanRoot = $useCleanRoot;
	}


	/**
	 * Remove `this.frontScript` from front of URL segments.
	 * 
	 * @param PartialUrl $url
	 * 
	 * @return void
	 */
	public function filterIn ($url) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:40: lines 40-41
		if (($url->segments->arr[0] ?? null) === $this->frontScript) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:41: characters 4-24
			$_this = $url->segments;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:41: characters 4-24
			if ($_this->length > 0) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:41: characters 4-24
				$_this->length--;
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:41: characters 4-24
			array_shift($_this->arr);
		}
	}


	/**
	 * Add `this.frontScript` to URL segments.
	 * 
	 * @param VirtualUrl $url
	 * 
	 * @return void
	 */
	public function filterOut ($url) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:46: lines 46-51
		if (!($url->isPhysical || (($url->segments->length === 0) && $this->useCleanRoot))) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:50: characters 4-39
			$_this = $url->segments;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/url/filter/PathInfoUrlFilter.hx:50: characters 4-39
			$_this->length = array_unshift($_this->arr, $this->frontScript);
		}
	}
}


Boot::registerClass(PathInfoUrlFilter::class, 'ufront.web.url.filter.PathInfoUrlFilter');

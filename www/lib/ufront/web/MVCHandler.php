<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx
 */

namespace ufront\web;

use \ufront\log\MessageType;
use \tink\core\Outcome;
use \ufront\web\context\HttpContext;
use \php\Boot;
use \php\_Boot\HxException;
use \ufront\app\UFRequestHandler;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\_Future\Future_Impl_;
use \tink\core\Noise;
use \haxe\CallStack;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;

/**
 * Execute an MVC web request.
 * - An index `Controller`, and possibly various sub controllers, will be used for routing and performing the current action.
 * - The `ActionResult` returned by the given action will also be executed, and written to the response.
 * @author Jason O'Neil
 */
class MVCHandler implements UFRequestHandler {
	/**
	 * @var Class
	 * The index `Controller` which is used to match requests to controllers / actions.
	 * This controller may sub-dispatch to other controllers.
	 * The controller will be instantiated using the dependency injector for that request.
	 */
	public $indexController;


	/**
	 * @param Class $indexController
	 * 
	 * @return void
	 */
	public function __construct ($indexController) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:40: characters 3-41
		$this->indexController = $indexController;
	}


	/**
	 * @param HttpContext $context
	 * 
	 * @return FutureObject
	 */
	public function executeResult ($context) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:65: lines 65-71
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:66: characters 5-78
			return $context->actionContext->actionResult->executeResult($context->actionContext);
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:68: characters 5-97
			$p = new HxAnon([
				"methodName" => "executeResult",
				"lineNumber" => -1,
				"fileName" => "",
				"customParams" => \Array_hx::wrap(["actionContext"]),
				"className" => \Type::getClassName(\Type::getClass($context->actionContext)),
			]);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:69: characters 15-152
			$msg = "Caught error in MVCHandler.executeResult while executing " . ($p->className??'null') . "." . ($p->methodName??'null') . "(" . ($p->customParams->join(",")??'null') . ")";
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:69: characters 15-152
			$_this = $context->messages;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:69: characters 15-152
			$_this->arr[$_this->length] = new HxAnon([
				"msg" => $msg,
				"pos" => new HxAnon([
					"fileName" => "ufront/web/MVCHandler.hx",
					"lineNumber" => 69,
					"className" => "ufront.web.MVCHandler",
					"methodName" => "executeResult",
				]),
				"type" => MessageType::MError(),
			]);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:69: characters 15-152
			++$_this->length;

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:70: characters 5-46
			return new SyncFuture(new LazyConst(Outcome::Failure(HttpError::wrap($e, null, new HxAnon([
				"fileName" => "ufront/web/MVCHandler.hx",
				"lineNumber" => 70,
				"className" => "ufront.web.MVCHandler",
				"methodName" => "executeResult",
			])))));
		}
	}


	/**
	 * Execute the current request using `this.indexController` and execute the returned `ActionResult`.
	 * 
	 * @param HttpContext $ctx
	 * 
	 * @return FutureObject
	 */
	public function handleRequest ($ctx) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:44: lines 44-48
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:45: lines 45-47
		return Future_Impl_::_tryFailingFlatMap($this->processRequest($ctx), function ($r)  use (&$_gthis, &$ctx) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:47: characters 23-50
			return $_gthis->executeResult($ctx);
		});
	}


	/**
	 * @param HttpContext $context
	 * 
	 * @return FutureObject
	 */
	public function processRequest ($context) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:51: characters 3-39
		$context->actionContext->handler = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:52: characters 3-79
		$controller = $context->injector->_instantiate($this->indexController);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:53: lines 53-59
		$resultFuture = Future_Impl_::_tryMap($controller->execute(), function ($result)  use (&$context) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:56: characters 5-48
			$context->actionContext->actionResult = $result;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:57: characters 5-17
			return Noise::Noise();
		});
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:60: characters 3-22
		return $resultFuture;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/MVCHandler.hx:74: characters 29-59
		return "ufront.web.MVCHandler";
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(MVCHandler::class, 'ufront.web.MVCHandler');

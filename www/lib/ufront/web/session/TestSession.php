<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx
 */

namespace ufront\web\session;

use \tink\core\Outcome;
use \haxe\ds\StringMap;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \php\_NativeArray\NativeArrayIterator;
use \ufront\core\Uuid;
use \tink\core\Noise;
use \tink\core\_Lazy\LazyConst;

/**
 * A session implementation that just uses a map, and is discarded at the end of the request.
 * This is useful for writing unit tests etc.
 */
class TestSession implements UFHttpSession {
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @var StringMap
	 */
	public $map;


	/**
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:18: characters 3-18
		$this->map = new StringMap();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:19: characters 3-21
		$this->id = Uuid::create();
	}


	/**
	 * @return void
	 */
	public function clear () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:42: characters 44-54
		$key = new NativeArrayIterator(array_map("strval", array_keys($this->map->data)));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:42: characters 44-54
		while ($key->hasNext()) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:42: characters 31-74
			$key1 = $key->next();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:42: characters 57-74
			$this->map->remove($key1);
		}
	}


	/**
	 * @return void
	 */
	public function close () {
	}


	/**
	 * @return FutureObject
	 */
	public function commit () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:26: characters 56-85
		return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
	}


	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	public function exists ($name) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:38: characters 52-70
		return array_key_exists($name, $this->map->data);
	}


	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function get ($name) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:34: characters 52-61
		return ($this->map->data[$name] ?? null);
	}


	/**
	 * @return string
	 */
	public function get_id () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:48: characters 20-29
		return $this->id;
	}


	/**
	 * @return FutureObject
	 */
	public function init () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:24: characters 54-83
		return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
	}


	/**
	 * @return bool
	 */
	public function isActive () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:30: characters 34-45
		return true;
	}


	/**
	 * @return bool
	 */
	public function isReady () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:32: characters 33-44
		return true;
	}


	/**
	 * @return void
	 */
	public function regenerateID () {
	}


	/**
	 * @param string $name
	 * 
	 * @return void
	 */
	public function remove ($name) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:40: characters 43-61
		$this->map->remove($name);
	}


	/**
	 * @param string $name
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function set ($name, $value) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:36: characters 57-74
		$v = $value;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/TestSession.hx:36: characters 57-74
		$this->map->data[$name] = $v;
	}


	/**
	 * @param int $e
	 * 
	 * @return void
	 */
	public function setExpiry ($e) {
	}


	/**
	 * @return void
	 */
	public function triggerCommit () {
	}
}


Boot::registerClass(TestSession::class, 'ufront.web.session.TestSession');
Boot::registerGetters('ufront\\web\\session\\TestSession', [
	'id' => true
]);

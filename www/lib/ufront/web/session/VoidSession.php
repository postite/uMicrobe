<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/VoidSession.hx
 */

namespace ufront\web\session;

use \tink\core\Outcome;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\Noise;
use \tink\core\_Lazy\LazyConst;

/**
 * A session implementation that doesn't actually save session state.
 * In fact, it forgets everything the moment you ask it.
 * Use this when you do not want a session implementation, but also do not want to get null related errors in your code.
 * For example, when unit testing.
 */
class VoidSession implements UFHttpSession {
	/**
	 * @var string
	 */
	public $id;


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @return void
	 */
	public function clear () {
	}


	/**
	 * @return void
	 */
	public function close () {
	}


	/**
	 * @return FutureObject
	 */
	public function commit () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/VoidSession.hx:23: characters 56-85
		return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
	}


	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	public function exists ($name) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/VoidSession.hx:35: characters 45-57
		return false;
	}


	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public function get ($name) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/VoidSession.hx:31: characters 45-56
		return null;
	}


	/**
	 * @return string
	 */
	public function get_id () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/VoidSession.hx:45: characters 20-31
		return null;
	}


	/**
	 * @return FutureObject
	 */
	public function init () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/VoidSession.hx:21: characters 54-83
		return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
	}


	/**
	 * @return bool
	 */
	public function isActive () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/VoidSession.hx:27: characters 34-46
		return false;
	}


	/**
	 * @return bool
	 */
	public function isReady () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/session/VoidSession.hx:29: characters 33-45
		return false;
	}


	/**
	 * @return void
	 */
	public function regenerateID () {
	}


	/**
	 * @param string $name
	 * 
	 * @return void
	 */
	public function remove ($name) {
	}


	/**
	 * @param string $name
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function set ($name, $value) {
	}


	/**
	 * @param int $e
	 * 
	 * @return void
	 */
	public function setExpiry ($e) {
	}


	/**
	 * @return void
	 */
	public function triggerCommit () {
	}
}


Boot::registerClass(VoidSession::class, 'ufront.web.session.VoidSession');
Boot::registerGetters('ufront\\web\\session\\VoidSession', [
	'id' => true
]);

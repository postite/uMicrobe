<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx
 */

namespace ufront\web;

use \php\Boot;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

/**
 * UserAgent information detected from the version string.
 * You can access a pre-filled version for the current request using `HttpRequest.userAgent`.
 * You can parse a User-Agent string (from your HTTP headers or logs) using `UserAgent.fromString`.
 * This class is fairly outdated, so usefulness may vary.  For example, iOS is listed as a known OS, but Android isn't.
 * @author Franco Ponticelli
 * __Pull requests to update this class with modern user agent data are welcome.__
 */
class UserAgent {
	/**
	 * @var \Array_hx
	 */
	static public $dataBrowser;
	/**
	 * @var \Array_hx
	 */
	static public $dataOS;


	/**
	 * @var string
	 * The name of the client's browser.
	 */
	public $browser;
	/**
	 * @var int
	 * The major version of the client's browser.
	 */
	public $majorVersion;
	/**
	 * @var int
	 * The minor version of the client's browser.
	 */
	public $minorVersion;
	/**
	 * @var string
	 * The name of the client's platform / operating system.
	 */
	public $platform;
	/**
	 * @var string
	 * The version string of the client's browser.
	 */
	public $version;


	/**
	 * @param string $searchString
	 * @param string $s
	 * 
	 * @return object
	 */
	static public function extractVersion ($searchString, $s) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:101: characters 3-41
		$index = HxString::indexOf($s, $searchString);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:102: lines 102-103
		if ($index < 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:103: characters 4-15
			return null;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:104: characters 3-36
		$re = new \EReg("(\\d+)\\.(\\d+)[^ ();]*", "");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:105: lines 105-106
		if (!$re->match(HxString::substr($s, $index + strlen($searchString) + 1))) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:106: characters 4-15
			return null;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:108: characters 13-26
		$tmp = $re->matched(0);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:109: characters 18-47
		$tmp1 = \Std::parseInt($re->matched(1));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:107: lines 107-111
		return new HxAnon([
			"version" => $tmp,
			"majorVersion" => $tmp1,
			"minorVersion" => \Std::parseInt($re->matched(2)),
		]);
	}


	/**
	 * Parse a User-Agent string into a `UserAgent` object.
	 * 
	 * @param string $s
	 * 
	 * @return UserAgent
	 */
	static public function fromString ($s) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:80: characters 3-60
		$ua = new UserAgent("unknown", "", 0, 0, "unknown");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:82: characters 3-45
		$info = UserAgent::searchString(UserAgent::$dataBrowser, $s);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:83: lines 83-91
		if ($info !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:84: characters 4-25
			$ua->browser = $info->app;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:85: characters 4-58
			$version = UserAgent::extractVersion($info->versionString, $s);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:86: lines 86-90
			if (null !== $version) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:87: characters 5-33
				$ua->version = $version->version;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:88: characters 5-43
				$ua->majorVersion = $version->majorVersion;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:89: characters 5-43
				$ua->minorVersion = $version->minorVersion;
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:92: characters 3-40
		$info1 = UserAgent::searchString(UserAgent::$dataOS, $s);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:93: lines 93-95
		if ($info1 !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:94: characters 4-26
			$ua->platform = $info1->app;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:97: characters 3-12
		return $ua;
	}


	/**
	 * @param \Array_hx $data
	 * @param string $s
	 * 
	 * @return object
	 */
	static public function searchString ($data, $s) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:115: lines 115-122
		$_g = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:115: lines 115-122
		while ($_g < $data->length) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:115: characters 8-9
			$d = ($data->arr[$_g] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:115: lines 115-122
			$_g = $_g + 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:116: lines 116-121
			if (HxString::indexOf($s, Boot::dynamicField($d, 'subString')) >= 0) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:117: lines 117-120
				return new HxAnon([
					"app" => Boot::dynamicField($d, 'identity'),
					"versionString" => (Boot::dynamicField($d, 'versionSearch') === null ? Boot::dynamicField($d, 'identity') : Boot::dynamicField($d, 'versionSearch')),
				]);
			}
		}

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:123: characters 3-14
		return null;
	}


	/**
	 * Create a new UserAgent with the given parameters.
	 * If you have a User-Agent String, you can use `UserAgent.fromString()` to generate a complete `UserAgent` object.
	 * 
	 * @param string $browser
	 * @param string $version
	 * @param int $majorVersion
	 * @param int $minorVersion
	 * @param string $platform
	 * 
	 * @return void
	 */
	public function __construct ($browser, $version, $majorVersion, $minorVersion, $platform) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:62: characters 3-25
		$this->browser = $browser;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:63: characters 3-25
		$this->version = $version;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:64: characters 3-35
		$this->majorVersion = $majorVersion;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:65: characters 3-35
		$this->minorVersion = $minorVersion;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:66: characters 3-27
		$this->platform = $platform;
	}


	/**
	 * Return a String with a summary of the current User-Agent.
	 * 
	 * @return string
	 */
	public function toString () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/UserAgent.hx:73: characters 3-78
		return "" . ($this->browser??'null') . " v." . ($this->majorVersion??'null') . "." . ($this->minorVersion??'null') . " (" . ($this->version??'null') . ") on " . ($this->platform??'null');
	}


	public function __toString() {
		return $this->toString();
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$dataBrowser = \Array_hx::wrap([
	new HxAnon([
		"subString" => "Chrome",
		"identity" => "Chrome",
	]),
	new HxAnon([
		"subString" => "OmniWeb",
		"versionSearch" => "OmniWeb/",
		"identity" => "OmniWeb",
	]),
	new HxAnon([
		"subString" => "Apple",
		"identity" => "Safari",
		"versionSearch" => "Version",
	]),
	new HxAnon([
		"subString" => "Opera",
		"versionSearch" => "Version",
		"identity" => "Opera",
	]),
	new HxAnon([
		"subString" => "iCab",
		"identity" => "iCab",
	]),
	new HxAnon([
		"subString" => "KDE",
		"identity" => "Konqueror",
	]),
	new HxAnon([
		"subString" => "Firefox",
		"identity" => "Firefox",
	]),
	new HxAnon([
		"subString" => "Camino",
		"identity" => "Camino",
	]),
	new HxAnon([
		"subString" => "Netscape",
		"identity" => "Netscape",
	]),
	new HxAnon([
		"subString" => "MSIE",
		"identity" => "Explorer",
		"versionSearch" => "MSIE",
	]),
	new HxAnon([
		"subString" => "Gecko",
		"identity" => "Mozilla",
		"versionSearch" => "rv",
	]),
	new HxAnon([
		"subString" => "Mozilla",
		"identity" => "Netscape",
		"versionSearch" => "Mozilla",
	]),
]);
self::$dataOS = \Array_hx::wrap([
	new HxAnon([
		"subString" => "Win",
		"identity" => "Windows",
	]),
	new HxAnon([
		"subString" => "Mac",
		"identity" => "Mac",
	]),
	new HxAnon([
		"subString" => "iPhone",
		"identity" => "iPhone/iPod",
	]),
	new HxAnon([
		"subString" => "Linux",
		"identity" => "Linux",
	]),
]);
	}
}


Boot::registerClass(UserAgent::class, 'ufront.web.UserAgent');
UserAgent::__hx__init();

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx
 */

namespace ufront\web\upload;

use \haxe\io\Eof;
use \haxe\io\Path;
use \ufront\core\SurpriseTools;
use \tink\core\FutureTrigger;
use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \sys\io\File;
use \tink\core\Noise;
use \haxe\CallStack;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;
use \ufront\web\HttpError;

/**
 * A `FileUpload` implementation that allows you to operate on an upload that has been saved to a temporary file.
 * `TmpFileUpload` is designed to work with `TmpFileUploadMiddleware`.
 * This middleware currently does not support reading `contentType`.
 * It is currently only implemented on `sys` platforms.
 */
class TmpFileUpload extends BaseUpload implements UFFileUpload {
	/**
	 * @var string
	 * The path to the temporary file where the upload is being stored
	 */
	public $tmpFileName;


	/**
	 * Create a new `TempFileUploadSync`.
	 * It should already be saved to a temporary file by `TmpFileUploadMiddleware` when this object is created.
	 * Please note that `originalFileName` will be sanitised using `haxe.io.Path.withoutDirectory()`.
	 * 
	 * @param string $tmpFileName
	 * @param string $postName
	 * @param string $originalFileName
	 * @param int $size
	 * @param string $contentType
	 * 
	 * @return void
	 */
	public function __construct ($tmpFileName, $postName, $originalFileName, $size, $contentType = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:36: characters 3-76
		parent::__construct($postName, Path::withoutDirectory($originalFileName), $size, $contentType);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:37: characters 3-33
		$this->tmpFileName = $tmpFileName;
	}


	/**
	 * Delete the temporary file.
	 * After doing this, other functions that rely on the temporary file will no longer work.
	 * 
	 * @return Outcome
	 */
	public function deleteTemporaryFile () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:165: lines 165-169
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:166: characters 5-41
			unlink($this->tmpFileName);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:167: characters 5-28
			return Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:169: characters 24-104
			return Outcome::Failure(HttpError::wrap($e, "Error during TmpFileUpload.deleteTmpFile()", new HxAnon([
				"fileName" => "ufront/web/upload/TmpFileUpload.hx",
				"lineNumber" => 169,
				"className" => "ufront.web.upload.TmpFileUpload",
				"methodName" => "deleteTemporaryFile",
			])));
		}
	}


	/**
	 * Get the complete `Bytes` of the current upload.
	 * 
	 * @return FutureObject
	 */
	public function getBytes () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:42: lines 42-43
		if ($this->attachedUpload !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:43: characters 4-41
			return $this->attachedUpload->getBytes();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:46: lines 46-49
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:47: characters 12-60
			return new SyncFuture(new LazyConst(Outcome::Success(File::getBytes($this->tmpFileName))));
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:49: characters 31-110
			return new SyncFuture(new LazyConst(Outcome::Failure(HttpError::wrap($e, "Error during TmpFileUpload.getBytes()", new HxAnon([
				"fileName" => "ufront/web/upload/TmpFileUpload.hx",
				"lineNumber" => 49,
				"className" => "ufront.web.upload.TmpFileUpload",
				"methodName" => "getBytes",
			])))));
		}
	}


	/**
	 * Get the current upload as a `String`.
	 * Please note that `sys` platforms do ignore the "encoding" parameter, and will use the system default.
	 * 
	 * @param string $encoding
	 * 
	 * @return FutureObject
	 */
	public function getString ($encoding = "UTF-8") {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:59: lines 59-71
		if ($encoding === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:59: lines 59-71
			$encoding = "UTF-8";
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:60: lines 60-61
		if ($this->attachedUpload !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:61: characters 4-52
			return $this->attachedUpload->getString($encoding);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:64: lines 64-67
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:65: characters 12-62
			return new SyncFuture(new LazyConst(Outcome::Success(File::getContent($this->tmpFileName))));
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:67: characters 31-111
			return new SyncFuture(new LazyConst(Outcome::Failure(HttpError::wrap($e, "Error during TmpFileUpload.getString()", new HxAnon([
				"fileName" => "ufront/web/upload/TmpFileUpload.hx",
				"lineNumber" => 67,
				"className" => "ufront.web.upload.TmpFileUpload",
				"methodName" => "getString",
			])))));
		}
	}


	/**
	 * A method for streaming data to a specified method.
	 * Will read the temporary file from the disk, one part at a time.
	 * Each part that is read will be passed to the "onData" function.
	 * Once `onData`'s future is resolved, the next part will be written.
	 * @param onData - method to execute for each set, eg. `function onData(data:Bytes, pos:Int, length:Int):Surprise<Noise,Error>`
	 * @param partSize - the maximum amount of data to stream in each part.  Default is 8KB for PHP, 16KB for other targets.
	 * @return a future to notify you once all the data has been processed, or if an error occured at any point.
	 * 
	 * @param \Closure $onData
	 * @param int $partSize
	 * 
	 * @return FutureObject
	 */
	public function process ($onData, $partSize = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:105: lines 105-106
		if ($this->attachedUpload !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:106: characters 4-58
			return $this->attachedUpload->process($onData, $partSize);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:109: lines 109-152
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:110: lines 110-114
			if ($partSize === null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:111: characters 14-29
				$partSize = 8192;
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:115: characters 5-40
			$doneTrigger = new FutureTrigger();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:117: characters 5-39
			$fh = File::read($this->tmpFileName);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:118: characters 5-17
			$pos = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:119: lines 119-147
			$readNext = null;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:119: lines 119-147
			$readNext = function ()  use (&$pos, &$doneTrigger, &$e1, &$onData, &$partSize, &$fh, &$readNext) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:120: characters 6-25
				$finale = false;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:121: characters 6-41
				$surprise = null;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:122: lines 122-133
				try {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:123: characters 7-40
					$bytes = $fh->read($partSize);
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:124: characters 7-52
					$surprise = $onData($bytes, $pos, $bytes->length);
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					if ($__hx__real_e instanceof Eof) {
						$e = $__hx__real_e;
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:127: characters 7-20
						$finale = true;
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:128: characters 7-42
						$bytes1 = $fh->readAll($partSize);
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:129: characters 7-52
						$surprise = $onData($bytes1, $pos, $bytes1->length);
					} else {
						$e1 = $__hx__real_e;
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:132: characters 18-94
						$surprise = new SyncFuture(new LazyConst(Outcome::Failure(HttpError::wrap($e1, "Error during TmpFileUpload.process", new HxAnon([
							"fileName" => "ufront/web/upload/TmpFileUpload.hx",
							"lineNumber" => 132,
							"className" => "ufront.web.upload.TmpFileUpload",
							"methodName" => "process",
						])))));
					}
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:134: lines 134-145
				$surprise->handle(function ($outcome)  use (&$pos, &$doneTrigger, &$finale, &$partSize, &$readNext) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:134: lines 134-145
					switch ($outcome->index) {
						case 0:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:136: lines 136-142
							if ($finale === false) {
								#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:137: characters 9-24
								$pos = $pos + $partSize;
								#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:138: characters 9-19
								$readNext();
							} else {
								#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:141: characters 9-46
								$doneTrigger->trigger(Outcome::Success(Noise::Noise()));
							}
							break;
						case 1:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:143: characters 20-23
							$err = $outcome->params[0];
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:144: characters 8-43
							$doneTrigger->trigger(Outcome::Failure($err));
							break;
					}
				});
			};
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:119: lines 119-147
			$readNext1 = $readNext;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:148: characters 5-15
			$readNext1();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:150: characters 5-34
			return $doneTrigger;
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e2 = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:152: characters 31-109
			return new SyncFuture(new LazyConst(Outcome::Failure(HttpError::wrap($e2, "Error during TmpFileUpload.process()", new HxAnon([
				"fileName" => "ufront/web/upload/TmpFileUpload.hx",
				"lineNumber" => 152,
				"className" => "ufront.web.upload.TmpFileUpload",
				"methodName" => "process",
			])))));
		}
	}


	/**
	 * Write the current upload to a file on the filesystem.
	 * 
	 * @param string $newFilePath
	 * 
	 * @return FutureObject
	 */
	public function writeToFile ($newFilePath) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:77: lines 77-78
		if ($this->attachedUpload !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:78: characters 4-57
			return $this->attachedUpload->writeToFile($newFilePath);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:81: lines 81-87
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:82: characters 5-45
			$directory = Path::directory($newFilePath);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:83: characters 5-83
			if (!file_exists($directory)) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:83: characters 44-83
				if (!is_dir($directory)) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:83: characters 44-83
					mkdir($directory, 493, true);
				}
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:84: characters 5-42
			File::copy($this->tmpFileName, $newFilePath);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:85: characters 5-35
			return SurpriseTools::success();
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/TmpFileUpload.hx:87: characters 31-113
			return new SyncFuture(new LazyConst(Outcome::Failure(HttpError::wrap($e, "Error during TmpFileUpload.writeToFile()", new HxAnon([
				"fileName" => "ufront/web/upload/TmpFileUpload.hx",
				"lineNumber" => 87,
				"className" => "ufront.web.upload.TmpFileUpload",
				"methodName" => "writeToFile",
			])))));
		}
	}
}


Boot::registerClass(TmpFileUpload::class, 'ufront.web.upload.TmpFileUpload');

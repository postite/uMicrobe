<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/UFFileUpload.hx
 */

namespace ufront\web\upload;

use \php\Boot;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxAnon;

/**
 * An interface for working with uploaded files.
 * Each platform can respond to file uploads differently.
 * For example, PHP stores temp files for each request, mod_neko has a callback for processing multitype data, and NodeJS will have it's own async methods.
 * If you are using a cloud based storage container, your processes will be different again.
 * This interface aims to provide a safe abstraction for working with uploaded files, no matter which platform or technology.
 */
interface UFFileUpload {
	/**
	 * Get the complete `Bytes` of the current upload.
	 * 
	 * @return FutureObject
	 */
	public function getBytes () ;


	/**
	 * Get the complete `String` of the current upload.
	 * Optionally specify an encoding to use.
	 * Please note not all platforms or implementations support setting the encoding, so please use with care.
	 * 
	 * @param string $encoding
	 * 
	 * @return FutureObject
	 */
	public function getString ($encoding = null) ;


	/**
	 * A method for streaming data to a specified method.
	 * @param onData - method to execute for each set, eg. `function onData(data:Bytes, pos:Int, length:Int):Surprise<Noise,Error>`
	 * @param partSize - the maximum amount of data to stream in each part.  Optional, default depends on FileUpload implementation.
	 * 
	 * @param \Closure $onData
	 * @param int $partSize
	 * 
	 * @return FutureObject
	 */
	public function process ($onData, $partSize = null) ;


	/**
	 * Write the current upload to a file on the filesystem.
	 * This may not be supported on some platforms (such as client-side JS), in which case it will return an error.
	 * 
	 * @param string $filePath
	 * 
	 * @return FutureObject
	 */
	public function writeToFile ($filePath) ;
}


Boot::registerClass(UFFileUpload::class, 'ufront.web.upload.UFFileUpload');
Boot::registerMeta(UFFileUpload::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx
 */

namespace ufront\web\upload;

use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxAnon;
use \ufront\web\HttpError;

/**
 * A `FileUpload` implementation that allows you to operate on an upload client side using HTML5 APIs.
 * See `js.html.File`, `js.html.FileReader`, `js.html.FileList` and <http://www.html5rocks.com/en/tutorials/file/dndfiles/> for more information.
 */
class BrowserFileUpload extends BaseUpload implements UFFileUpload {
	/**
	 * @param string $postName
	 * @param string $originalFileName
	 * @param int $size
	 * @param string $contentType
	 * 
	 * @return void
	 */
	public function __construct ($postName, $originalFileName, $size, $contentType = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:18: lines 18-151
		parent::__construct($postName, $originalFileName, $size, $contentType);
	}


	/**
	 * Get the complete `Bytes` of the current upload.
	 * 
	 * @return FutureObject
	 */
	public function getBytes () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:34: lines 34-35
		if ($this->attachedUpload !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:35: characters 4-41
			return $this->attachedUpload->getBytes();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:50: characters 11-16
		throw new HxException("BrowserFileUpload.getBytes() was used on a target other than JS");
	}


	/**
	 * Get the complete `String` of the current upload.
	 * Optionally specify an encoding to use, the default is UTF-8.
	 * 
	 * @param string $encoding
	 * 
	 * @return FutureObject
	 */
	public function getString ($encoding = "UTF-8") {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:58: lines 58-76
		if ($encoding === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:58: lines 58-76
			$encoding = "UTF-8";
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:59: lines 59-60
		if ($this->attachedUpload !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:60: characters 4-52
			return $this->attachedUpload->getString($encoding);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:74: characters 11-16
		throw new HxException("BrowserFileUpload.getString() was used on a target other than JS");
	}


	/**
	 * A method for streaming data to a specified method.
	 * This will use `js.html.File.slice()` to read one `js.html.Blob` at a time and process it.
	 * Each part that is read will be passed to the "onData" function.
	 * Once `onData`'s future is resolved, the next part will be written.
	 * @param onData - method to execute for each set, eg. `function onData(data:Bytes, pos:Int, length:Int):Surprise<Noise,Error>`
	 * @param partSize - the maximum amount of data to stream in each part.  Default is 16KB.
	 * @return a future to notify you once all the data has been processed, or if an error occured at any point.
	 * 
	 * @param \Closure $onData
	 * @param int $partSize
	 * 
	 * @return FutureObject
	 */
	public function process ($onData, $partSize = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:100: lines 100-101
		if ($this->attachedUpload !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:101: characters 4-58
			return $this->attachedUpload->process($onData, $partSize);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:148: characters 11-16
		throw new HxException("BrowserFileUpload.process() was used on a target other than JS");
	}


	/**
	 * Not implemented, will throw an error.
	 * 
	 * @param string $newFilePath
	 * 
	 * @return FutureObject
	 */
	public function writeToFile ($newFilePath) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:82: lines 82-83
		if ($this->attachedUpload !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:83: characters 4-57
			return $this->attachedUpload->writeToFile($newFilePath);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/upload/BrowserFileUpload.hx:85: characters 10-15
		throw new HxException(HttpError::notImplemented(new HxAnon([
			"fileName" => "ufront/web/upload/BrowserFileUpload.hx",
			"lineNumber" => 85,
			"className" => "ufront.web.upload.BrowserFileUpload",
			"methodName" => "writeToFile",
		])));
	}
}


Boot::registerClass(BrowserFileUpload::class, 'ufront.web.upload.BrowserFileUpload');

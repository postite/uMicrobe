<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx
 */

namespace ufront\web;

use \ufront\core\SurpriseTools;
use \php\_Boot\HxClosure;
use \ufront\log\MessageType;
use \ufront\web\context\HttpContext;
use \php\Boot;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \ufront\web\context\RequestCompletion;
use \ufront\app\UFErrorHandler;

/**
 * A `UFErrorHandler` module which displays an error page for the client when uncaught failures or errors are encountered.
 * It will display the error message in a simple template, and set the appropriate HTTP response code.
 * The template can be modified by using your own implementations of `this.renderErrorForContent()` and `this.renderErrorPage()`.
 * If `showStack` is true a stack-trace will also be shown. This is true by default if compiled with `-debug`.
 */
class ErrorPageHandler implements UFErrorHandler {
	/**
	 * @var bool
	 * A flag dictating whether errors should be caught and displayed (`true`) or simply passed through unprocessed (`false`).
	 * The only reason you would disable this is for debugging or unit testing.
	 * The default value is `true`.
	 */
	public $catchErrors;
	/**
	 * @var \Closure
	 * Render the given error message into a String (usually HTML) to be used in `renderErrorPage()`.
	 * This method provides HTML for the error message content, to be inserted into your usual site layout.
	 * This function is dynamic, so you can set it to a custom function if you wish to use a different error template.
	 * It is recommended that this method have as few dependencies as possible.
	 * For example, avoid using templating engines as any errors encountered in the error handler can be difficult to debug.
	 * It is also expected that this method should be synchronous.
	 * If you require loading something asynchronously it will be easiest to create a new `UFErrorHandler`.
	 * The default template looks like:
	 * ```
	 * <summary class="error-summary">
	 * <h1 class="error-message">${error.toString()}</h1>
	 * </summary>
	 * <details class="error-details">
	 * <p class="error-data">${error.data}</p>
	 * <p class="error-pos">${error.pos}</p>
	 * <p class="error-exception-stack">${exceptionStackFromError}</p>
	 * <p class="error-call-stack">${callStackFromError}</p>
	 * </details>
	 * ```
	 */
	public $renderErrorContent;
	/**
	 * @var \Closure
	 * Render the given error title and error content (from `renderErrorContent`) into a page to be sent to the browser.
	 * This method takes two arguments: a window title, and content representing the error page.
	 * It then renders a full HTML page with these variables inserted.
	 * This function is dynamic, so you can set a custom function if you wish to supply a different template.
	 * It is recommended that this method have as few dependencies as possible.
	 * For example, avoid using templating engines as any errors that occur during the error handler can be difficult to debug.
	 * It is also expected that this method should be synchronous.
	 * If you require loading something asynchronously it will be easiest to create a new `UFErrorHandler`.
	 * The default template uses an inline `<style>` element for CSS, a "jumbotron" style component and a giant sad-face.
	 * It took 1000 designers 1000 days to craft this work of art.
	 */
	public $renderErrorPage;
	/**
	 * @var bool
	 * A flag dictating whether the error page should show the stack trace.
	 * If compiled with `-debug`, this is true by default. Otherwise this is false by default.
	 */
	public $showStack;


	/**
	 * Turns an `Array<StackItem>` into an `Array<String>`, ready to print.
	 * 
	 * @param \Array_hx $stack
	 * 
	 * @return \Array_hx
	 */
	static public function errorStackItems ($stack) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:150: characters 4-15
		if ($stack->length > 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:150: characters 4-15
			$stack->length--;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:150: characters 4-15
		array_pop($stack->arr);

		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:151: characters 4-9
		$stack = $stack->slice(2);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:154: characters 13-54
		$_this = CallStack::toString($stack);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:154: characters 3-55
		$arr = \Array_hx::wrap(explode("\x0A", $_this));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:156: characters 3-13
		return $arr;
	}


	/**
	 * @return void
	 */
	public function __construct () {
		if (!$this->__hx__default__renderErrorContent) {
			$this->__hx__default__renderErrorContent = new HxClosure($this, 'renderErrorContent');
			if ($this->renderErrorContent === null) $this->renderErrorContent = $this->__hx__default__renderErrorContent;
		}
		if (!$this->__hx__default__renderErrorPage) {
			$this->__hx__default__renderErrorPage = new HxClosure($this, 'renderErrorPage');
			if ($this->renderErrorPage === null) $this->renderErrorPage = $this->__hx__default__renderErrorPage;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:33: characters 35-39
		$this->showStack = true;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:27: characters 32-36
		$this->catchErrors = true;
	}


	/**
	 * Process the given error and display an appropriate error page.
	 * 
	 * @param TypedError $httpError
	 * @param HttpContext $ctx
	 * 
	 * @return FutureObject
	 */
	public function handleError ($httpError, $ctx) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:42: characters 3-87
		$inner = (($httpError !== null) && ($httpError->data !== null) ? " (" . (\Std::string($httpError->data)??'null') . ")" : "");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:43: characters 3-91
		$callStack = ($this->showStack ? " " . (CallStack::toString(CallStack::exceptionStack())??'null') : "");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:44: characters 3-68
		$msg = "Handling error: " . (\Std::string($httpError)??'null') . ($inner??'null') . ($callStack??'null');
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:44: characters 3-68
		$_this = $ctx->messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:44: characters 3-68
		$_this->arr[$_this->length] = new HxAnon([
			"msg" => $msg,
			"pos" => new HxAnon([
				"fileName" => "ufront/web/ErrorPageHandler.hx",
				"lineNumber" => 44,
				"className" => "ufront.web.ErrorPageHandler",
				"methodName" => "handleError",
			]),
			"type" => MessageType::MError(),
		]);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:44: characters 3-68
		++$_this->length;


		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:46: lines 46-53
		if (($ctx->completion & (1 << Boot::dynamicField(RequestCompletion::CRequestHandlersComplete(), 'index'))) === 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:48: characters 4-24
			$ctx->response->clear();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:49: characters 4-40
			$ctx->response->status = $httpError->code;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:50: characters 4-42
			$ctx->response->set_contentType("text/html");
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:51: characters 4-58
			$ctx->response->write($this->renderError($httpError, $this->showStack));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:52: characters 4-7
			$ctx1 = $ctx;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:52: characters 4-50
			$ctx1->completion = $ctx1->completion | (1 << Boot::dynamicField(RequestCompletion::CRequestHandlersComplete(), 'index'));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:56: characters 3-42
		if (!$this->catchErrors) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:56: characters 21-42
			$httpError->throwSelf();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:58: characters 3-33
		return SurpriseTools::success();
	}


	/**
	 * Renders the error content and places it in the error page.
	 * To change the look of your error messages, set a custom function for `this.renderErrorContent()` and `this.renderErrorPage()`.
	 * 
	 * @param TypedError $error
	 * @param bool $showStack
	 * 
	 * @return string
	 */
	public function renderError ($error, $showStack = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:138: characters 3-56
		$content = $this->renderErrorContent($error, $showStack);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:139: characters 3-51
		return $this->renderErrorPage($error->message, $content);
	}


	/**
	 * Render the given error message into a String (usually HTML) to be used in `renderErrorPage()`.
	 * This method provides HTML for the error message content, to be inserted into your usual site layout.
	 * This function is dynamic, so you can set it to a custom function if you wish to use a different error template.
	 * It is recommended that this method have as few dependencies as possible.
	 * For example, avoid using templating engines as any errors encountered in the error handler can be difficult to debug.
	 * It is also expected that this method should be synchronous.
	 * If you require loading something asynchronously it will be easiest to create a new `UFErrorHandler`.
	 * The default template looks like:
	 * ```
	 * <summary class="error-summary">
	 * <h1 class="error-message">${error.toString()}</h1>
	 * </summary>
	 * <details class="error-details">
	 * <p class="error-data">${error.data}</p>
	 * <p class="error-pos">${error.pos}</p>
	 * <p class="error-exception-stack">${exceptionStackFromError}</p>
	 * <p class="error-call-stack">${callStackFromError}</p>
	 * </details>
	 * ```
	 * 
	 * @param TypedError $error
	 * @param bool $showStack
	 * 
	 * @return string
	 */
	public function renderErrorContent ($error, $showStack = false)
	{
		if ($this->renderErrorContent !== $this->__hx__default__renderErrorContent) return call_user_func_array($this->renderErrorContent, func_get_args());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:91: characters 3-81
		$inner = (null !== $error->data ? "<p class=\"error-data\">" . (\Std::string($error->data)??'null') . "</p>" : "");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:92: characters 3-82
		$pos = ($showStack ? "<p class=\"error-pos\">&gt; " . ($error->printPos()??'null') . "</p>" : "");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:94: characters 3-75
		$exceptionStackItems = ErrorPageHandler::errorStackItems(CallStack::exceptionStack());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:96: lines 96-101
		$exceptionStack = ($showStack && ($exceptionStackItems->length > 0) ? "<div class=\"error-exception-stack\"><h3>Exception Stack:</h3>\x0A\x09\x09\x09\x09\x09<pre><code>" . ($exceptionStackItems->join("\x0A")??'null') . "</pre></code>\x0A\x09\x09\x09\x09</div>" : "");
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:103: lines 103-106
		$content = "\x0A\x09\x09\x09<summary class=\"error-summary\"><h1 class=\"error-message\">" . ($error->message??'null') . "</h1></summary>\x0A\x09\x09\x09<details class=\"error-details\"> " . ($inner??'null') . " " . ($pos??'null') . " " . ($exceptionStack??'null') . "</details>\x0A\x09\x09";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:108: characters 3-17
		return $content;
	}
	protected $__hx__default__renderErrorContent;


	/**
	 * Render the given error title and error content (from `renderErrorContent`) into a page to be sent to the browser.
	 * This method takes two arguments: a window title, and content representing the error page.
	 * It then renders a full HTML page with these variables inserted.
	 * This function is dynamic, so you can set a custom function if you wish to supply a different template.
	 * It is recommended that this method have as few dependencies as possible.
	 * For example, avoid using templating engines as any errors that occur during the error handler can be difficult to debug.
	 * It is also expected that this method should be synchronous.
	 * If you require loading something asynchronously it will be easiest to create a new `UFErrorHandler`.
	 * The default template uses an inline `<style>` element for CSS, a "jumbotron" style component and a giant sad-face.
	 * It took 1000 designers 1000 days to craft this work of art.
	 * 
	 * @param string $title
	 * @param string $content
	 * 
	 * @return string
	 */
	public function renderErrorPage ($title, $content)
	{
		if ($this->renderErrorPage !== $this->__hx__default__renderErrorPage) return call_user_func_array($this->renderErrorPage, func_get_args());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/ErrorPageHandler.hx:129: characters 3-68
		return "<!DOCTYPE html>\x0A<html>\x0A<head>\x0A\x09<title>" . ($title??'null') . "</title>\x0A\x09<style>\x0A\x09\x09body {\x0A\x09\x09\x09font-family: sans-serif;\x0A\x09\x09}\x0A\x09\x09.container {\x0A\x09\x09\x09max-width: 800px;\x0A\x09\x09\x09margin: 30px auto;\x0A\x09\x09}\x0A\x09\x09.jumbotron {\x0A\x09\x09\x09padding: 30px;\x0A\x09\x09\x09border-radius: 30px;\x0A\x09\x09\x09background-color: rgb(230,230,230);\x0A\x09\x09}\x0A\x09\x09p[frown] {\x0A\x09\x09\x09text-align: center;\x0A\x09\x09}\x0A\x09\x09p[frown] span { \x0A\x09\x09\x09transform: rotate(90deg);\x0A\x09\x09\x09display: inline-block;\x0A\x09\x09\x09color: #bbb;\x0A\x09\x09\x09font-size: 3em;\x0A\x09\x09}\x0A\x09</style>\x0A</head>\x0A<body>\x0A\x09<div class=\"container\">\x0A\x09\x09<div class=\"jumbotron\">\x0A\x09\x09\x09<p frown><span>:(</span></p>\x0A\x09\x09\x09" . ($content??'null') . "\x0A\x09\x09</div>\x0A\x09</div>\x0A</body>\x0A</html>\x0A";
	}
	protected $__hx__default__renderErrorPage;
}


Boot::registerClass(ErrorPageHandler::class, 'ufront.web.ErrorPageHandler');

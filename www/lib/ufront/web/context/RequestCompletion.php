<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx
 */

namespace ufront\web\context;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * An enum describing which stages of the request have been completed.
 * This is used with `HttpContext.completion`, to help our apps know which stages of the request still need to be executed, and which are completed (or can be skipped).
 */
class RequestCompletion extends HxEnum {
	/**
	 * The Error Handlers have run and completed successfully.
	 * 
	 * @return RequestCompletion
	 */
	static public function CErrorHandlersComplete () {
		static $inst = null;
		if (!$inst) $inst = new RequestCompletion('CErrorHandlersComplete', 6, []);
		return $inst;
	}


	/**
	 * The Error Handlers have been triggered, if any further error are encountered do not attempt to handle them.
	 * 
	 * @return RequestCompletion
	 */
	static public function CErrorHandlersTriggered () {
		static $inst = null;
		if (!$inst) $inst = new RequestCompletion('CErrorHandlersTriggered', 5, []);
		return $inst;
	}


	/**
	 * The "Flush" stage is complete, the `HttpResponse` does not need to be flushed.
	 * 
	 * @return RequestCompletion
	 */
	static public function CFlushComplete () {
		static $inst = null;
		if (!$inst) $inst = new RequestCompletion('CFlushComplete', 4, []);
		return $inst;
	}


	/**
	 * The "Logging" stage is complete, no further `UFLogHandler` modules need to run.
	 * 
	 * @return RequestCompletion
	 */
	static public function CLogHandlersComplete () {
		static $inst = null;
		if (!$inst) $inst = new RequestCompletion('CLogHandlersComplete', 3, []);
		return $inst;
	}


	/**
	 * The "Request Handler" stage is complete, no further `UFRequestHandler` modules need to run.
	 * 
	 * @return RequestCompletion
	 */
	static public function CRequestHandlersComplete () {
		static $inst = null;
		if (!$inst) $inst = new RequestCompletion('CRequestHandlersComplete', 1, []);
		return $inst;
	}


	/**
	 * The "Request Middleware" stage is complete, no further `UFRequestMiddleware` modules need to run.
	 * 
	 * @return RequestCompletion
	 */
	static public function CRequestMiddlewareComplete () {
		static $inst = null;
		if (!$inst) $inst = new RequestCompletion('CRequestMiddlewareComplete', 0, []);
		return $inst;
	}


	/**
	 * The "Response Middleware" stage is complete, no further `UFResponseMiddleware` modules need to run.
	 * 
	 * @return RequestCompletion
	 */
	static public function CResponseMiddlewareComplete () {
		static $inst = null;
		if (!$inst) $inst = new RequestCompletion('CResponseMiddlewareComplete', 2, []);
		return $inst;
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			6 => 'CErrorHandlersComplete',
			5 => 'CErrorHandlersTriggered',
			4 => 'CFlushComplete',
			3 => 'CLogHandlersComplete',
			1 => 'CRequestHandlersComplete',
			0 => 'CRequestMiddlewareComplete',
			2 => 'CResponseMiddlewareComplete',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'CErrorHandlersComplete' => 0,
			'CErrorHandlersTriggered' => 0,
			'CFlushComplete' => 0,
			'CLogHandlersComplete' => 0,
			'CRequestHandlersComplete' => 0,
			'CRequestMiddlewareComplete' => 0,
			'CResponseMiddlewareComplete' => 0,
		];
	}
}


Boot::registerClass(RequestCompletion::class, 'ufront.web.context.RequestCompletion');

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx
 */

namespace ufront\web\context;

use \php\Boot;
use \ufront\app\UFRequestHandler;
use \php\_Boot\HxAnon;
use \ufront\web\HttpError;
use \ufront\web\result\ActionResult;

/**
 * A context holding information about which action was taken during the request, and what the result was.
 * An `ActionContext` keeps track of:
 * - Which `UFRequestHandler` handled the request.
 * - Which `Controller` (or API or other object) did the main request processing.
 * - Which "action" was executed on the above controller.
 * - Which arguments were passed to the above action.
 * - What the result of the given action was.
 * One of the main uses is in the `ActionResult` classes.
 * These take an `ActionContext` and use it to write a response to the client, based on the information in this context.
 * It is also helpful for logging and for unit testing - so we can be sure our requests are going to the right places, and being handled in the way we expect.
 */
class ActionContext {
	/**
	 * @var string
	 * The name of the action or method that was used in this request.
	 * This will be `null` until the request is handled.
	 */
	public $action;
	/**
	 * @var ActionResult
	 * The `ActionResult` that came from processing the request.
	 * This will be `null` until the request is handled.
	 */
	public $actionResult;
	/**
	 * @var \Array_hx
	 * The array of arguments used for the current action or method in this request.
	 * This will be `null` until the request is handled.
	 */
	public $args;
	/**
	 * @var object
	 * The controller that was used in this request.
	 * Please note this will not always be a `Controller` object.
	 * For example, a `RemotingHandler` would insert the `UFApi` that was acted upon as the controller here.
	 * This will be `null` until the request is handled.
	 */
	public $controller;
	/**
	 * @var UFRequestHandler
	 * The `UFRequestHandler` that was used in this request.
	 * This will be `null` until the request is handled.
	 */
	public $handler;
	/**
	 * @var HttpContext
	 * A link to the full `HttpContext` this ActionContext is associated with.
	 */
	public $httpContext;
	/**
	 * @var \Array_hx
	 * An array containing all the "parts" of the current Uri, split by "/".
	 * The first time you access this, it will load it from `httpContext.getRequestUri().split("/")`.
	 * Note: this array may be modified as the request is handled.
	 * For example, if dispatching to a sub-controller, the controller may remove certain parts and leave only parts relevant to the sub controller.
	 * If you need access to the original `uriParts`, you should split the `httpContext.getRequestUri()` yourself to be sure.
	 */
	public $uriParts;


	/**
	 * Create a new ActionContext, to be associated with the given `HttpContext`.
	 * 
	 * @param HttpContext $httpContext
	 * 
	 * @return void
	 */
	public function __construct ($httpContext) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:80: characters 3-54
		HttpError::throwIfNull($httpContext, "httpContext", new HxAnon([
			"fileName" => "ufront/web/context/ActionContext.hx",
			"lineNumber" => 80,
			"className" => "ufront.web.context.ActionContext",
			"methodName" => "new",
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:81: characters 3-33
		$this->httpContext = $httpContext;
	}


	/**
	 * @return \Array_hx
	 */
	public function get_uriParts () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:85: lines 85-89
		if ($this->uriParts === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:86: characters 15-55
			$_this = $this->httpContext->getRequestUri();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:86: characters 4-55
			$this->uriParts = \Array_hx::wrap(explode("/", $_this));
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:87: characters 4-64
			if (($this->uriParts->length > 0) && (($this->uriParts->arr[0] ?? null) === "")) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:87: characters 48-64
				$_this1 = $this->uriParts;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:87: characters 48-64
				if ($_this1->length > 0) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:87: characters 48-64
					$_this1->length--;
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:87: characters 48-64
				array_shift($_this1->arr);
			}
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:88: characters 4-78
			if (($this->uriParts->length > 0) && (($this->uriParts->arr[$this->uriParts->length - 1] ?? null) === "")) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:88: characters 64-78
				$_this2 = $this->uriParts;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:88: characters 64-78
				if ($_this2->length > 0) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:88: characters 64-78
					$_this2->length--;
				}
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:88: characters 64-78
				array_pop($_this2->arr);
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:90: characters 3-18
		return $this->uriParts;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/ActionContext.hx:93: characters 29-80
		return "ActionContext(" . (\Std::string($this->controller)??'null') . ", " . ($this->action??'null') . ", " . (\Std::string($this->args)??'null') . ")";
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(ActionContext::class, 'ufront.web.context.ActionContext');
Boot::registerGetters('ufront\\web\\context\\ActionContext', [
	'uriParts' => true
]);

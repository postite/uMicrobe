<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx
 */

namespace ufront\web\context;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \ufront\web\UserAgent;
use \tink\core\_Future\FutureObject;
use \sys\ufront\web\context\HttpRequest as ContextHttpRequest;
use \ufront\core\_MultiValueMap\MultiValueMap_Impl_;
use \php\_Boot\HxAnon;
use \ufront\web\HttpError;

/**
 * A description of the current HTTP request coming from the client.
 * A HttpRequest object holds all the information about the current request coming from the client.
 * This includes:
 * - The URI of this request. See `this.uri`.
 * - The HTTP method of the current request . See `this.httpMethod`.
 * - The IP address of the client making the request . See `this.clientIP`.
 * - The host name of the current server . See `this.hostName`.
 * - The directory on the web server that the script is running from. See `this.scriptDirectory`.
 * - The username and password included in this request . See `this.authorization`.
 * - The query (or "GET") parameters included in the current request. See `this.query`.
 * - The raw string of query parameters. See `this.queryString`.
 * - The post parameters included in the current request. See `this.post`.
 * - The raw string of post parameters. See `this.postString`.
 * - The cookies included in this request. See `this.cookies`.
 * - A map of all parameters in the request, whether they are from `query`, `post` or `cookies`. See `this.params`.
 * - The HTTP headers sent as aprt of the client's request. See `this.clientHeaders`.
 * - A user agent object that attempts to make sense of the user agent string. See `this.userAgent`.
 * - The file uploads included in this request. See `this.files`.
 * - Is the current request a multipart request (form upload)? See `this.isMultipart()`.
 * - Attempt to process the upload data included in this request. See `this.parseMultipart()`.
 * __Array Parameters__
 * HTML forms and HTTP requests allow you to have multiple values for the same name.
 * `HttpRequest` uses `MultiValueMap` to allow you to access either a single value or a collection of values for a given name easily.
 * There are some platform differences to take note of:
 * - For PHP, multiple values in HTTP requests are only supported if the parameter name ends with `[]`.
 * - Because of the PHP limitation, other platforms (neko etc) ignore a `[]` at the end of a parameter name.
 * - When trying to access the values of an input such as `<select name="people[]">...</select>` you should use `HttpRequest.params["people"]`, not including the trailing `[]` in the parameter name.
 * - Complex lists, such as the following, are not supported: `<input name="person[1][firstName]" />`, only simple "[]" is supported: `<input name="person[]">`
 * __Platform Implementations__
 * This base class is mostly abstract methods, each platform must implement the key details.
 * You can use `HttpRequest.create()` to create the appropriate sub-class for most platforms.
 * With NodeJS however, where you should use:
 * ```
 * new nodejs.ufront.web.HttpRequest(req); // An express.Request object.
 * ```
 * Please see the docs for each platform implementation for any specific details:
 * - `neko.ufront.web.context.HttpRequest`
 * - `php.ufront.web.context.HttpRequest`
 * - `js.ufront.web.context.HttpRequest`
 * - `nodejs.ufront.web.context.HttpRequest`
 */
class HttpRequest {
	/**
	 * @var object
	 * Gives the username and password supplied by the `Authorization` client header.
	 * If no `Authorization` header was specified, it will return null.
	 * If `Authorization` header was specified, but it did not have exactly two parameters, it will throw an exception.
	 * To trigger the login box to open on the browser, use `HttpResponse.requireAuthentication("Please login")`.
	 */
	public $authorization;
	/**
	 * @var StringMap
	 * The HTTP headers supplied by the client in this request.
	 */
	public $clientHeaders;
	/**
	 * @var string
	 * The Client's IP address.
	 */
	public $clientIP;
	/**
	 * @var StringMap
	 * The Cookies that were included with this request.
	 */
	public $cookies;
	/**
	 * @var StringMap
	 * File uploads that were part of a POST / multipart request.
	 * Please note this is not populated automatically, you must use some request middleware to process the multipart data and populate the `files` field with appropriate `UFFileUpload` objects.
	 */
	public $files;
	/**
	 * @var string
	 * The host name of the current server.
	 */
	public $hostName;
	/**
	 * @var string
	 * The HTTP method used for the request.
	 * Usually "get" or "post", but can be other things.
	 * Case sensitivity depends on the environement.
	 */
	public $httpMethod;
	/**
	 * @var StringMap
	 * A `MultiValueMap` of all the parameters supplied in this request.
	 * The parameters are collected in the following order:
	 * - cookies
	 * - query-string parameters
	 * - post values
	 * with the latter taking precedence over the former.
	 * For example, if both a cookie and a post variable define a parameter `name`, calling `request.params["name"]` will show the POST value.
	 * In that example, if you would like to access all the various values of `name`, you can use `request.params.getAll("name")` or separately access `request.cookies["name"]` or `request.post["name"]`.
	 */
	public $params;
	/**
	 * @var StringMap
	 * The POST parameters for this request.
	 * If there are no POST parameters, or this is a GET request, this will return an empty map.
	 * These values have been URL decoded.
	 * > **Note:** If the request is a multipart request, and `parseMultipart` has not been called, it will be called to fetch all the post data from the various parts.
	 * > Because `parseMultipart` can only be called once, this will prevent you from being able to process any file uploads.
	 * >
	 * > If you need access to file uploads, please ensure `parseMultipart` is called before `post` is accessed.
	 * > This can be achieved easily by using upload middleware at the start of your request to check for any uploads.
	 * >
	 * > If any files were uploaded, they will appear in the "post" values with their parameter name, and the value will contain the original filename of the upload.
	 */
	public $post;
	/**
	 * @var string
	 * The raw post string in a POST request.
	 * This value has not been URL decoded.
	 * Will return an empty String if there are no POST parameters.
	 */
	public $postString;
	/**
	 * @var StringMap
	 * The query parameters included in this request for this request.
	 * These are the parameters supplied in the URL, following the `?` character.
	 * These values have been URL decoded.
	 */
	public $query;
	/**
	 * @var string
	 * The raw query string in a GET request.
	 * This is the part of the URL following a `?` character and before a `#` character.
	 * This value has not been URL decoded.
	 * Will return an empty String if there are no GET parameters.
	 */
	public $queryString;
	/**
	 * @var string
	 * The path of the currently executing script.
	 * This is the path to your `index` file, not to the current class or controller.
	 * It will usually be an absolute path, but depending on the environment it may be relative.
	 * This path will always include a trailing slash.
	 */
	public $scriptDirectory;
	/**
	 * @var string
	 * The Uri requested in this HTTP request.
	 * This value has been URL decoded.
	 * This is the URI before any URL filters have been applied.
	 * See `HttpContext.getRequestUri()` for a filtered version of the URI.
	 */
	public $uri;
	/**
	 * @var UserAgent
	 * Information about the User-Agent that made this request, based on the "User-Agent" HTTP header.
	 * Please see `UserAgent` for more information.
	 */
	public $userAgent;


	/**
	 * Create a `HttpRequest` using the platform specific implementation.
	 * Currently supports PHP, Neko and client JS.
	 * 
	 * @return HttpRequest
	 */
	static public function create () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:72: lines 72-73
		return new ContextHttpRequest();
	}


	/**
	 * @return object
	 */
	public function get_authorization () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:243: characters 67-72
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 243,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_authorization",
		])));
	}


	/**
	 * @return StringMap
	 */
	public function get_clientHeaders () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:197: characters 75-80
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 197,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_clientHeaders",
		])));
	}


	/**
	 * @return string
	 */
	public function get_clientIP () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:180: characters 40-45
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 180,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_clientIP",
		])));
	}


	/**
	 * @return StringMap
	 */
	public function get_cookies () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:168: characters 54-59
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 168,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_cookies",
		])));
	}


	/**
	 * @return StringMap
	 */
	public function get_files () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:158: lines 158-160
		if (null === $this->files) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:159: characters 12-31
			$this1 = new StringMap();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:159: characters 4-31
			$this->files = $this1;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:161: characters 3-15
		return $this->files;
	}


	/**
	 * @return string
	 */
	public function get_hostName () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:174: characters 40-45
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 174,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_hostName",
		])));
	}


	/**
	 * @return string
	 */
	public function get_httpMethod () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:219: characters 42-47
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 219,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_httpMethod",
		])));
	}


	/**
	 * @return StringMap
	 */
	public function get_params () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:96: lines 96-98
		if (null === $this->params) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:97: characters 37-44
			$tmp = $this->get_cookies();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:97: characters 45-50
			$tmp1 = $this->get_query();
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:97: characters 4-58
			$this->params = MultiValueMap_Impl_::combine(\Array_hx::wrap([
				$tmp,
				$tmp1,
				$this->get_post(),
			]));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:99: characters 3-16
		return $this->params;
	}


	/**
	 * @return StringMap
	 */
	public function get_post () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:149: characters 51-56
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 149,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_post",
		])));
	}


	/**
	 * @return string
	 */
	public function get_postString () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:121: characters 42-47
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 121,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_postString",
		])));
	}


	/**
	 * @return StringMap
	 */
	public function get_query () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:131: characters 52-57
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 131,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_query",
		])));
	}


	/**
	 * @return string
	 */
	public function get_queryString () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:111: characters 43-48
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 111,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_queryString",
		])));
	}


	/**
	 * @return string
	 */
	public function get_scriptDirectory () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:231: characters 47-52
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 231,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_scriptDirectory",
		])));
	}


	/**
	 * @return string
	 */
	public function get_uri () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:191: characters 35-40
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 191,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "get_uri",
		])));
	}


	/**
	 * @return UserAgent
	 */
	public function get_userAgent () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:206: lines 206-207
		if ($this->userAgent === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:207: characters 4-71
			$this->userAgent = UserAgent::fromString(MultiValueMap_Impl_::get($this->get_clientHeaders(), strtolower("User-Agent")));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:208: characters 3-19
		return $this->userAgent;
	}


	/**
	 * Check if the current request is a `multipart/form-data` request.
	 * This is a shortcut for: `clientHeaders["Content-Type"].startsWith("multipart/form-data")`.
	 * 
	 * @return bool
	 */
	public function isMultipart () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:251: characters 10-46
		$this1 = $this->get_clientHeaders();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:251: characters 10-113
		if (array_key_exists(strtolower("Content-Type"), $this1->data)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:251: characters 50-113
			return \StringTools::startsWith(MultiValueMap_Impl_::get($this->get_clientHeaders(), strtolower("Content-Type")), "multipart/form-data");
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:251: characters 10-113
			return false;
		}
	}


	/**
	 * Parse the multipart data of this request.
	 * > **Note:** If you merely wish to access file uploads, it is probably better to use an existing `RequestMiddleware` that parses multipart data and gives access to the uploads through `HttpRequest.files`.
	 * > Calling `parseMultipart()` manually is mostly intended for people developing new file-upload middleware.
	 * If a POST request contains multipart data, `parseMultipart` must be called in order to have access to both the POST parameters and to uploaded files.
	 * Accessing `HttpRequest.post` on a multipart request will call `parseMultipart()` but not process any file uploads.
	 * Because of this, it is recommended that you use a `RequestMiddleware` very early in your request, before `HttpRequest.post` is ever called, so that you can parse your file uploads, even if you do not handle them until later.
	 * In each platform's implementation of `parseMultipart()`, it will take care of parsing post variables to `HttpRequest.post`, and then call the `onPart`, `onData` (multiple times) and `onEndPart` for each file upload.
	 * You should only call `parseMultipart()` a maximum of once per request, and an exception will be thrown if you attempt to call it more than once.
	 * If this method is called on a request which was not multipart encoded, the result is unspecified.
	 * It is safe to assume that only one of the callbacks will be running at a time, and that they will run in order for each file.
	 * Even though the method signiatures here require returning a `Future`, these will be ignored on some platforms, such as neko.
	 * Check the documentation on the specific `HttpRequest` implementation for details.
	 * @param onPart (optional) - called once at the start of each new file. See `OnPartCallback`.
	 * @param onData (optional) - called multiple times (in order) for each file. See `OnDataCallback`.
	 * @param onEndPart (optional) - called after all data for a part has been received. See `OnEndPartCallback`.
	 * 
	 * @param \Closure $onPart
	 * @param \Closure $onData
	 * @param \Closure $onEndPart
	 * 
	 * @return FutureObject
	 */
	public function parseMultipart ($onPart = null, $onData = null, $onEndPart = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpRequest.hx:280: characters 142-147
		throw new HxException(HttpError::abstractMethod(new HxAnon([
			"fileName" => "ufront/web/context/HttpRequest.hx",
			"lineNumber" => 280,
			"className" => "ufront.web.context.HttpRequest",
			"methodName" => "parseMultipart",
		])));
	}
}


Boot::registerClass(HttpRequest::class, 'ufront.web.context.HttpRequest');
Boot::registerGetters('ufront\\web\\context\\HttpRequest', [
	'authorization' => true,
	'scriptDirectory' => true,
	'httpMethod' => true,
	'userAgent' => true,
	'clientHeaders' => true,
	'uri' => true,
	'clientIP' => true,
	'hostName' => true,
	'cookies' => true,
	'files' => true,
	'post' => true,
	'query' => true,
	'postString' => true,
	'queryString' => true,
	'params' => true
]);

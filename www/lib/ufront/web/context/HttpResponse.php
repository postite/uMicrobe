<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx
 */

namespace ufront\web\context;

use \haxe\Unserializer;
use \sys\ufront\web\context\HttpResponse as ContextHttpResponse;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \ufront\core\OrderedStringMap;
use \haxe\io\Bytes;
use \ufront\web\HttpCookie;
use \php\_Boot\HxAnon;
use \haxe\io\Error;
use \haxe\Serializer;
use \ufront\web\HttpError;

/**
 * The response that will be sent to the browser
 * Please see the docs for each platform implementation for any specific details:
 * - `neko.ufront.web.context.HttpResponse`
 * - `php.ufront.web.context.HttpResponse`
 * - `js.ufront.web.context.HttpResponse`
 * - `nodejs.ufront.web.context.HttpResponse`
 */
class HttpResponse {
	/**
	 * @var string
	 */
	const CONTENT_TYPE = "Content-type";
	/**
	 * @var string
	 */
	const DEFAULT_CHARSET = "utf-8";
	/**
	 * @var string
	 */
	const DEFAULT_CONTENT_TYPE = "text/html";
	/**
	 * @var int
	 */
	const DEFAULT_STATUS = 200;
	/**
	 * @var int
	 */
	const FOUND = 302;
	/**
	 * @var int
	 */
	const INTERNAL_SERVER_ERROR = 500;
	/**
	 * @var string
	 */
	const LOCATION = "Location";
	/**
	 * @var int
	 */
	const MOVED_PERMANENTLY = 301;
	/**
	 * @var int
	 */
	const NOT_FOUND = 404;
	/**
	 * @var int
	 */
	const UNAUTHORIZED = 401;


	/**
	 * @var \StringBuf
	 */
	public $_buff;
	/**
	 * @var StringMap
	 */
	public $_cookies;
	/**
	 * @var bool
	 */
	public $_flushedContent;
	/**
	 * @var bool
	 */
	public $_flushedCookies;
	/**
	 * @var bool
	 */
	public $_flushedHeaders;
	/**
	 * @var bool
	 */
	public $_flushedStatus;
	/**
	 * @var OrderedStringMap
	 */
	public $_headers;
	/**
	 * @var string
	 * Get or set the `charset` used in the HTTP "Content-type" header (when the type is `text/*`).
	 * The default value is `utf-8`.
	 */
	public $charset;
	/**
	 * @var int
	 * The HTTP response status code.
	 * The default value is `200`.
	 */
	public $status;


	/**
	 * Create a `HttpResponse` using the platform specific implementation.
	 * Currently PHP, Neko and Client JS are supported.
	 * For NodeJS, please use:
	 * ```
	 * new nodejs.ufront.web.HttpResponse(res); // An express.Response object.
	 * ```
	 * Other platforms will get the default implementation, which will mostly work, except for `this.flush()`, which is what actually writes the HTTP response output.
	 * Calling `this.flush()` on a non-supported platform will throw an error.
	 * 
	 * @return HttpResponse
	 */
	static public function create () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:36: lines 36-37
		return new ContextHttpResponse();
	}


	/**
	 * Create a new (blank) `HttpResponse`.
	 * Please note, you should generally use a platform specific `HttpResponse` implementation.
	 * 
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:99: characters 3-10
		$this->clear();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:100: characters 3-25
		$this->_flushedStatus = false;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:101: characters 3-26
		$this->_flushedCookies = false;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:102: characters 3-26
		$this->_flushedHeaders = false;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:103: characters 3-26
		$this->_flushedContent = false;
	}


	/**
	 * Reset the HttpResponse to a blank state.
	 * This will clear the headers, cookies and content, and reset `this.contentType`, `this.charset` and `this.status`.
	 * 
	 * @return void
	 */
	public function clear () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:149: characters 3-17
		$this->clearCookies();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:150: characters 3-17
		$this->clearHeaders();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:151: characters 3-17
		$this->clearContent();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:152: characters 3-21
		$this->set_contentType(null);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:153: characters 3-28
		$this->charset = "utf-8";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:154: characters 3-26
		$this->status = 200;
	}


	/**
	 * Clear the content set in this response so far.
	 * 
	 * @return void
	 */
	public function clearContent () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:168: characters 3-26
		$this->_buff = new \StringBuf();
	}


	/**
	 * Clear any cookies set in this response so far.
	 * 
	 * @return void
	 */
	public function clearCookies () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:161: characters 3-29
		$this->_cookies = new StringMap();
	}


	/**
	 * Clear the HTTP headers set in this response so far.
	 * 
	 * @return void
	 */
	public function clearHeaders () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:181: characters 3-36
		$this->_headers = new OrderedStringMap();
	}


	/**
	 * Write the output to the client response.
	 * This includes writing the cookies, the HTTP headers and then the content.
	 * Once it has been flushed, no futher HTTP headers can be set, and the content cannot be cleared - it is already sent to the client.
	 * Therefore you should try to only call `flush()` at the end of your request.
	 * This is managed automatically if you are using `HttpApplication`, `UfrontApplication` etc.
	 * This is an abstract method, it is implemented differently on each platform.
	 * It will throw a `NotImplemented` error if you are not using a platform-specific implementation.
	 * 
	 * @return void
	 */
	public function flush () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:141: characters 33-38
		throw new HxException(HttpError::notImplemented(new HxAnon([
			"fileName" => "ufront/web/context/HttpResponse.hx",
			"lineNumber" => 141,
			"className" => "ufront.web.context.HttpResponse",
			"methodName" => "flush",
		])));
	}


	/**
	 * Get the current content output (`String`) of this response.
	 * 
	 * @return string
	 */
	public function getBuffer () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:235: characters 3-26
		return $this->_buff->b;
	}


	/**
	 * Get the `StringMap` of Cookies set in this response
	 * 
	 * @return StringMap
	 */
	public function getCookies () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:242: characters 3-18
		return $this->_cookies;
	}


	/**
	 * Get the `OrderedStringMap` of HTTP headers set in this response.
	 * An `OrderedStringMap` is basically the same as a `StringMap`, but it preserves the order of the items (headers in this case).
	 * 
	 * @return OrderedStringMap
	 */
	public function getHeaders () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:251: characters 3-18
		return $this->_headers;
	}


	/**
	 * @return string
	 */
	public function get_contentType () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:350: characters 3-38
		return $this->_headers->get("Content-type");
	}


	/**
	 * @return string
	 */
	public function get_redirectLocation () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:362: characters 3-34
		return $this->_headers->get("Location");
	}


	/**
	 * @param Serializer $s
	 * 
	 * @return void
	 */
	public function hxSerialize ($s) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:328: characters 3-34
		$s->serialize($this->_buff->b);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:329: characters 3-26
		$s->serialize($this->_headers);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:330: characters 3-26
		$s->serialize($this->_cookies);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:331: characters 3-32
		$s->serialize($this->_flushedStatus);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:332: characters 3-33
		$s->serialize($this->_flushedCookies);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:333: characters 3-33
		$s->serialize($this->_flushedHeaders);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:334: characters 3-33
		$s->serialize($this->_flushedContent);
	}


	/**
	 * @param Unserializer $u
	 * 
	 * @return void
	 */
	public function hxUnserialize ($u) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:339: characters 3-26
		$this->_buff = new \StringBuf();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:340: characters 3-31
		$this->_buff->add($u->unserialize());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:341: characters 3-29
		$this->_headers = $u->unserialize();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:342: characters 3-29
		$this->_cookies = $u->unserialize();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:343: characters 3-35
		$this->_flushedStatus = $u->unserialize();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:344: characters 3-36
		$this->_flushedCookies = $u->unserialize();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:345: characters 3-36
		$this->_flushedHeaders = $u->unserialize();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:346: characters 3-36
		$this->_flushedContent = $u->unserialize();
	}


	/**
	 * A shortcut to tell whether the current status indicates this response is a permanent redirect (`true`) or not (`false`)
	 * 
	 * @return bool
	 */
	public function isPermanentRedirect () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:323: characters 3-37
		return $this->status === 301;
	}


	/**
	 * A shortcut to tell whether the current status indicates this response is a redirect (`true`) or not (`false`).
	 * 
	 * @return bool
	 */
	public function isRedirect () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:316: characters 3-39
		return (int)(floor($this->status / 100)) === 3;
	}


	/**
	 * Set the HTTP Response Code to `MOVED_PERMANENTLY` (301) and set the `redirectLocation`, which will set the `Location` HTTP header.
	 * If URL is null, the `Location` header will be removed.
	 * 
	 * @param string $url
	 * 
	 * @return void
	 */
	public function permanentRedirect ($url) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:308: characters 3-29
		$this->status = 301;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:309: characters 3-25
		$this->set_redirectLocation($url);
	}


	/**
	 * Prevent the response from flushing.
	 * This is useful if some code has written to the output manually, (using `Sys.print` or similar), rather than writing to the response.
	 * 
	 * @return void
	 */
	public function preventFlush () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:112: characters 3-24
		$this->_flushedStatus = true;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:113: characters 3-25
		$this->_flushedCookies = true;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:114: characters 3-25
		$this->_flushedHeaders = true;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:115: characters 3-25
		$this->_flushedContent = true;
	}


	/**
	 * Prevent the response from flushing the content.
	 * Headers, cookies and the status will still be written.
	 * This is useful on the client-side for custom ActionResults that perform partial-diffing of the dom and only update certain nodes.
	 * 
	 * @return void
	 */
	public function preventFlushContent () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:125: characters 3-25
		$this->_flushedContent = true;
	}


	/**
	 * Set the HTTP Response Code to `FOUND` (302) and set the `redirectLocation`, which will set the `Location` HTTP header.
	 * If URL is null, the `Location` header will be removed.
	 * 
	 * @param string $url
	 * 
	 * @return void
	 */
	public function redirect ($url) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:260: characters 3-17
		$this->status = 302;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:261: characters 3-25
		$this->set_redirectLocation($url);
	}


	/**
	 * Ask the browser to retrieve a username/password from the user.
	 * This is a shortcut for `setUnauthorized()` and `setHeader("WWW-Authenticate", "Basic realm="+message)`.
	 * 
	 * @param string $message
	 * 
	 * @return void
	 */
	public function requireAuthentication ($message) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:284: characters 3-20
		$this->setUnauthorized();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:285: characters 3-60
		$this->setHeader("WWW-Authenticate", "Basic realm=\"" . ($message??'null') . "\"");
	}


	/**
	 * Set a HTTP Cookie on the response.
	 * 
	 * @param HttpCookie $cookie
	 * 
	 * @return void
	 */
	public function setCookie ($cookie) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:228: characters 3-38
		$this->_cookies->data[$cookie->name] = $cookie;
	}


	/**
	 * Set a HTTP header on the response.
	 * 
	 * @param string $name
	 * @param string $value
	 * 
	 * @return void
	 */
	public function setHeader ($name, $value) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:219: characters 3-32
		HttpError::throwIfNull($name, null, new HxAnon([
			"fileName" => "ufront/web/context/HttpResponse.hx",
			"lineNumber" => 219,
			"className" => "ufront.web.context.HttpResponse",
			"methodName" => "setHeader",
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:220: characters 3-33
		HttpError::throwIfNull($value, null, new HxAnon([
			"fileName" => "ufront/web/context/HttpResponse.hx",
			"lineNumber" => 220,
			"className" => "ufront.web.context.HttpResponse",
			"methodName" => "setHeader",
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:221: characters 3-30
		$this->_headers->set($name, $value);
	}


	/**
	 * Set the HTTP Response Code to `INTERNAL_SERVER_ERROR` (500).
	 * 
	 * @return void
	 */
	public function setInternalError () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:299: characters 3-33
		$this->status = 500;
	}


	/**
	 * Set the HTTP Response Code to `NOT_FOUND` (404).
	 * 
	 * @return void
	 */
	public function setNotFound () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:292: characters 3-21
		$this->status = 404;
	}


	/**
	 * Set the HTTP Response Code to `DEFAULT_STATUS` (200).
	 * 
	 * @return void
	 */
	public function setOk () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:268: characters 3-26
		$this->status = 200;
	}


	/**
	 * Set the HTTP Response Code to `UNAUTHORIZED` (401).
	 * 
	 * @return void
	 */
	public function setUnauthorized () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:275: characters 3-24
		$this->status = 401;
	}


	/**
	 * @param string $v
	 * 
	 * @return string
	 */
	public function set_contentType ($v) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:354: lines 354-357
		if (null === $v) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:355: characters 4-54
			$this->_headers->set("Content-type", "text/html");
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:357: characters 4-35
			$this->_headers->set("Content-type", $v);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:358: characters 3-11
		return $v;
	}


	/**
	 * @param string $v
	 * 
	 * @return string
	 */
	public function set_redirectLocation ($v) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:366: lines 366-369
		if (null === $v) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:367: characters 4-31
			$this->_headers->remove("Location");
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:369: characters 4-31
			$this->_headers->set("Location", $v);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:370: characters 3-11
		return $v;
	}


	/**
	 * Write a string to the HTTP response.
	 * 
	 * @param string $s
	 * 
	 * @return void
	 */
	public function write ($s) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:188: lines 188-189
		if (null !== $s) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:189: characters 4-18
			$this->_buff->add($s);
		}
	}


	/**
	 * Write a number of bytes to the HTTP response.
	 * 
	 * @param Bytes $b
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return void
	 */
	public function writeBytes ($b, $pos, $len) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:210: characters 3-8
		$tmp = $this->_buff;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:210: characters 14-35
		$tmp1 = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:210: characters 14-35
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $b->length)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:210: characters 14-35
			throw new HxException(Error::OutsideBounds());
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:210: characters 14-35
			$tmp1 = substr($b->b->s, $pos, $len);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:210: characters 3-37
		$tmp->add($tmp1);
	}


	/**
	 * Write a single character to the HTTP response.
	 * 
	 * @param int $c
	 * 
	 * @return void
	 */
	public function writeChar ($c) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:196: characters 3-21
		$_this = $this->_buff;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpResponse.hx:196: characters 3-21
		$_this->b = ($_this->b??'null') . (chr($c)??'null');
	}
}


Boot::registerClass(HttpResponse::class, 'ufront.web.context.HttpResponse');
Boot::registerGetters('ufront\\web\\context\\HttpResponse', [
	'redirectLocation' => true,
	'contentType' => true
]);
Boot::registerSetters('ufront\\web\\context\\HttpResponse', [
	'redirectLocation' => true,
	'contentType' => true
]);

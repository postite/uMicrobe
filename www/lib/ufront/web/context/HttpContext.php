<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx
 */

namespace ufront\web\context;

use \ufront\web\url\VirtualUrl;
use \ufront\auth\NobodyAuthHandler;
use \haxe\io\Path;
use \ufront\log\MessageType;
use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \ufront\web\url\PartialUrl;
use \minject\Injector;
use \tink\core\Noise;
use \ufront\auth\UFAuthUser;
use \ufront\log\MessageList;
use \ufront\web\session\VoidSession;
use \haxe\CallStack;
use \ufront\auth\UFAuthHandler;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;
use \ufront\web\session\UFHttpSession;
use \ufront\web\HttpError;

/**
 * A context object holding all the information relevant to the current request.
 * A single `HttpApplication` object can serve multiple requests, but each request is given a `HttpContext` holding together all the parts of the request.
 * This `HttpContext` is used throughout the request lifecycle and different parts of the application - being available in controllers, middleware, request handlers, error handlers and more.
 */
class HttpContext {
	/**
	 * @var string
	 */
	public $_contentDir;
	/**
	 * @var string
	 */
	public $_relativeContentDir;
	/**
	 * @var string
	 */
	public $_requestUri;
	/**
	 * @var ActionContext
	 * The `ActionContext` used in processing the request.
	 * This holds information about which action the current request is taking, and what result it returned.
	 * See `ActionContext` for more details.
	 * There is one `ActionContext` for each `HttpContext`, and it is created during the `HttpContext` constructor.
	 */
	public $actionContext;
	/**
	 * @var UFAuthHandler
	 * The current auth handler.
	 * If this is not set during the constructor, then a `UFAuthHandler` will be injected.
	 * If that fails, a `NobodyAuthHandler` will be used.
	 */
	public $auth;
	/**
	 * @var int
	 * The completion progress of the current request. Setting these values will affect the flow of the request.
	 * For example, if a middleware restores a response from a cached entry matching the current request, it may want to skip the `RequestHandler` and any `ResponseMiddleware`:
	 * ```haxe
	 * // Skip remaining request middleware, and the request handler (this will then skip to the response middleware)
	 * ctx.completion.set( CRequestMiddlewareComplete );
	 * ctx.completion.set( CRequestHandlerComplete );
	 * ```
	 * Another example is if you have a controller or some code that writes directly to the output, not the response object, in which case you want to skip the log, flush, middleware etc.
	 * (This is the case with the `dbadmin` tool.)
	 * ```haxe
	 * ctx.completion.set( CRequestHandlerComplete );
	 * ctx.completion.set( CResponseMiddlewareComplete );
	 * ctx.completion.set( CLogComplete );
	 * ctx.completion.set( CFlushComplete );
	 * ```
	 * These values are updated by `HttpApplication` and various middleware and handlers, or you can update them manually.
	 */
	public $completion;
	/**
	 * @var string
	 * Get the path of the content directory.
	 * This is a directory that ufront has write-access to, and should preferably not be available for general Http access.
	 * It can be used to store sessions, log files, cache, uploaded files etc.
	 * The value is essentially `${request.scriptDirectory}/$relativeContentDir/`, where `relativeContentDir` is the value that was supplied to the constructor.
	 * If using `ufront.application.UfrontApplication`, this value can be set with the `contentDirectory` setting in your `ufront.web.Configuration` initialization settings.
	 * The trailing slash is always included.
	 */
	public $contentDirectory;
	/**
	 * @var UFAuthUser
	 * The current user.
	 * This is a shortcut for `auth.currentUser`, but with extra null checking.
	 */
	public $currentUser;
	/**
	 * @var string
	 * The current user ID.
	 * This is a shortcut for `auth.currentUser.id`, but with extra null checking.
	 */
	public $currentUserID;
	/**
	 * @var Injector
	 * An dependency injector for the current request.
	 * By default, mappings are provided for the following classes:
	 * - `ufront.web.context.HttpContext`
	 * - `ufront.web.context.HttpRequest`
	 * - `ufront.web.context.HttpResponse`
	 * - `ufront.web.context.ActionContext`
	 * - `ufront.log.MessageList`
	 * - `ufront.web.session.UFHttpSession` (and the implementation class used for the session).
	 * - `ufront.auth.UFAuthHandler` (and the implementation class used for the auth handler).
	 * When used in a HttpApplication, each call to `execute` will set the application's injector as this context's parent injector.
	 * This means all mappings at the application level will be available in the request injector too.
	 */
	public $injector;
	/**
	 * @var \Array_hx
	 * A collection of messages that were traced during this request.
	 */
	public $messages;
	/**
	 * @var HttpRequest
	 * The current `HttpRequest`.
	 */
	public $request;
	/**
	 * @var HttpResponse
	 * The current `HttpResponse`.
	 */
	public $response;
	/**
	 * @var UFHttpSession
	 * The current session.
	 * If this is not set during the constructor, then a `UFHttpSession` will be injected.
	 * If that fails, a `VoidSession` will be used.
	 */
	public $session;
	/**
	 * @var string
	 * The current session ID.
	 * This is a shortcut for `session.id`, but with extra null checking.
	 */
	public $sessionID;
	/**
	 * @var \Array_hx
	 * The URL filters to be used for `this.getRequestUri()` and `this.generateUri()`.
	 * This value is set during the constructor.
	 * If you wish to change the filters after the request has begun, it is recommended you use `this.setUrlFilters()`.
	 * This will ensure that the uri for `getRequestUri` is not cached with the old filters.
	 */
	public $urlFilters;


	/**
	 * Create a HttpContext for the current environment.
	 * If request and response are not supplied, they will created.
	 * The rest of the parameters are passed directly to the `HttpContext` constructor.
	 * On NodeJS please use `HttpContext.createNodeJsContext()` instead.
	 * 
	 * @param HttpRequest $request
	 * @param HttpResponse $response
	 * @param Injector $appInjector
	 * @param UFHttpSession $session
	 * @param UFAuthHandler $auth
	 * @param \Array_hx $urlFilters
	 * @param string $relativeContentDir
	 * 
	 * @return HttpContext
	 */
	static public function createContext ($request = null, $response = null, $appInjector = null, $session = null, $auth = null, $urlFilters = null, $relativeContentDir = "uf-content") {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:39: lines 39-43
		if ($relativeContentDir === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:39: lines 39-43
			$relativeContentDir = "uf-content";
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:40: characters 4-54
		if (null === $request) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:40: characters 24-54
			$request = HttpRequest::create();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:41: characters 4-57
		if (null === $response) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:41: characters 25-57
			$response = HttpResponse::create();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:42: characters 4-107
		return new HttpContext($request, $response, $appInjector, $session, $auth, $urlFilters, $relativeContentDir);
	}


	/**
	 * Create a HttpContext object using the supplied objects.
	 * For creating a context for each platform see `createContext` and `createNodeJSContext`.
	 * During the constructor, several items are initiated:
	 * - All of the parameters passed to the constructor are used.
	 * - `this.actionContext` is setup with a new `ActionContext`.
	 * - `this.injector` is setup, either as a child of the supplied `appInjector`, or as a brand new injector.
	 * - If the session is not supplied, an attempt will be made to inject a `UFHttpSession`. If that fails, a `VoidSession` will be used.
	 * - If the auth handler is not supplied, an attempt will be made to inject a `UFAuthHandler`. If that fails, a `NobodyAuthHandler` will be used.
	 * - Most of the parts of our context are mapped into the request injector. See the documentation of `this.injector` for more details.
	 * @param request (required) The current `HttpRequest`.
	 * @param response (required) The current `HttpResponse`.
	 * @param appInjector (optional) The `HttpApplication.injector`, which will be the parent injector for our request injector.
	 * @param session (optional) An existing session to be used. If not supplied one will be injected.
	 * @param auth (optional) An existing authentication handler to be used. If not supplied, one will be injected.
	 * @param urlFilters (optional) The URL Filters to use on the current request. If null, no filters will be used.
	 * @param relativeContentDir (optional) The path to the content directory, relative to the script directory. The default is "uf-content".
	 * 
	 * @param HttpRequest $request
	 * @param HttpResponse $response
	 * @param Injector $appInjector
	 * @param UFHttpSession $session
	 * @param UFAuthHandler $auth
	 * @param \Array_hx $urlFilters
	 * @param string $relativeContentDir
	 * 
	 * @return void
	 */
	public function __construct ($request, $response, $appInjector = null, $session = null, $auth = null, $urlFilters = null, $relativeContentDir = "uf-content") {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:213: lines 213-248
		if ($relativeContentDir === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:213: lines 213-248
			$relativeContentDir = "uf-content";
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:214: characters 3-36
		HttpError::throwIfNull($response, null, new HxAnon([
			"fileName" => "ufront/web/context/HttpContext.hx",
			"lineNumber" => 214,
			"className" => "ufront.web.context.HttpContext",
			"methodName" => "new",
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:215: characters 3-35
		HttpError::throwIfNull($request, null, new HxAnon([
			"fileName" => "ufront/web/context/HttpContext.hx",
			"lineNumber" => 215,
			"className" => "ufront.web.context.HttpContext",
			"methodName" => "new",
		]));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:217: characters 3-25
		$this->request = $request;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:218: characters 3-27
		$this->response = $response;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:219: characters 3-59
		$this->urlFilters = ($urlFilters !== null ? $urlFilters : new \Array_hx());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:220: characters 3-48
		$this->_relativeContentDir = $relativeContentDir;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:221: characters 3-49
		$this->actionContext = new ActionContext($this);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:222: characters 3-21
		$this->messages = new \Array_hx();
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:223: characters 21-55
		$this1 = 0;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:223: characters 3-55
		$this->completion = $this1;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:225: characters 3-91
		$this->injector = ($appInjector !== null ? $appInjector->createChildInjector() : new Injector());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:226: characters 3-46
		$this->injector->mapType("ufront.web.context.HttpContext", null, null)->toValue($this);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:227: characters 3-49
		$this->injector->mapType("ufront.web.context.HttpRequest", null, null)->toValue($request);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:228: characters 3-51
		$this->injector->mapType("ufront.web.context.HttpResponse", null, null)->toValue($response);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:229: characters 3-57
		$this->injector->mapType("ufront.web.context.ActionContext", null, null)->toValue($this->actionContext);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:230: characters 3-67
		$this->injector->mapType("ufront.log.MessageList", null, null)->toValue(new MessageList($this->messages));
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:231: characters 3-47
		$this->injector->mapType("minject.Injector", null, null)->toValue($this->injector);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:233: characters 3-46
		if ($session !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:233: characters 24-46
			$this->session = $session;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:234: lines 234-236
		if ($this->session === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:235: lines 235-236
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:235: characters 8-57
				$this->session = $this->injector->getValueForType("ufront.web.session.UFHttpSession", null);
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:236: characters 21-147
				$msg = "Failed to load UFHttpSession: " . (\Std::string($e)??'null') . ". Using VoidSession instead." . (CallStack::toString(CallStack::exceptionStack())??'null');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:236: characters 21-147
				$_this = $this->messages;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:236: characters 21-147
				$_this->arr[$_this->length] = new HxAnon([
					"msg" => $msg,
					"pos" => new HxAnon([
						"fileName" => "ufront/web/context/HttpContext.hx",
						"lineNumber" => 236,
						"className" => "ufront.web.context.HttpContext",
						"methodName" => "new",
					]),
					"type" => MessageType::MLog(),
				]);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:236: characters 21-147
				++$_this->length;

			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:237: characters 3-61
		if ($this->session === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:237: characters 29-61
			$this->session = new VoidSession();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:238: characters 3-56
		$this->injector->mapType("ufront.web.session.UFHttpSession", null, null)->toValue($this->session);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:239: characters 3-68
		$this->injector->mapRuntimeTypeOf($this->session)->toValue($this->session);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:241: characters 3-37
		if ($auth !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:241: characters 21-37
			$this->auth = $auth;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:242: lines 242-244
		if ($this->auth === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:243: lines 243-244
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:243: characters 8-54
				$this->auth = $this->injector->getValueForType("ufront.auth.UFAuthHandler", null);
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e1 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:244: characters 21-153
				$msg1 = "Failed to load UFAuthHandler: " . (\Std::string($e1)??'null') . ". Using NobodyAuthHandler instead." . (CallStack::toString(CallStack::exceptionStack())??'null');
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:244: characters 21-153
				$_this1 = $this->messages;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:244: characters 21-153
				$_this1->arr[$_this1->length] = new HxAnon([
					"msg" => $msg1,
					"pos" => new HxAnon([
						"fileName" => "ufront/web/context/HttpContext.hx",
						"lineNumber" => 244,
						"className" => "ufront.web.context.HttpContext",
						"methodName" => "new",
					]),
					"type" => MessageType::MLog(),
				]);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:244: characters 21-153
				++$_this1->length;

			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:245: characters 3-61
		if ($this->auth === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:245: characters 26-61
			$this->auth = new NobodyAuthHandler();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:246: characters 3-53
		$this->injector->mapType("ufront.auth.UFAuthHandler", null, null)->toValue($this->auth);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:247: characters 3-62
		$this->injector->mapRuntimeTypeOf($this->auth)->toValue($this->auth);
	}


	/**
	 * Commit the session data, if there is any.
	 * @return A future letting you know when the session commit has been completed succesfully, or if an error was encountered.
	 * 
	 * @return FutureObject
	 */
	public function commitSession () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:300: lines 300-301
		if ($this->session !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:300: characters 25-41
			return $this->session->commit();
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:301: characters 9-38
			return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
		}
	}


	/**
	 * Takes a normalized ("clean") URI and applies filters to make it work with the server environment.
	 * For example, if you use `PathInfoUrlFilter` this could turn `/home/` into `index.n?path=/home/`.
	 * This is useful so your code contains the simple URIs, but at runtime they are transformed into the correct form depending on the environment.
	 * 
	 * @param string $uri
	 * @param bool $isPhysical
	 * 
	 * @return string
	 */
	public function generateUri ($uri, $isPhysical = false) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:274: lines 274-280
		if ($isPhysical === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:274: lines 274-280
			$isPhysical = false;
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:275: characters 3-52
		$uriOut = VirtualUrl::parse($uri, $isPhysical);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:276: characters 3-33
		$i = $this->urlFilters->length - 1;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:277: lines 277-278
		while ($i >= 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:278: characters 15-18
			$i = $i - 1;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:278: characters 4-39
			($this->urlFilters->arr[$i + 1] ?? null)->filterOut($uriOut);
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:279: characters 3-27
		return $uriOut->toString();
	}


	/**
	 * Gets the filtered request URI.
	 * It uses the supplied `HttpRequest.uri`, but applies any of our `this.urlFilters` to transform the raw URI into a normalized state.
	 * For example, if you use `PathInfoUrlFilter` to filter `index.n?path=/home/`, this would return the normalized URI `/home/`.
	 * 
	 * @return string
	 */
	public function getRequestUri () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:258: lines 258-263
		if (null === $this->_requestUri) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:259: characters 4-46
			$url = PartialUrl::parse($this->request->get_uri());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:260: lines 260-261
			$_g = 0;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:260: lines 260-261
			$_g1 = $this->urlFilters;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:260: lines 260-261
			while ($_g < $_g1->length) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:260: characters 9-15
				$filter = ($_g1->arr[$_g] ?? null);
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:260: lines 260-261
				$_g = $_g + 1;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:261: characters 5-27
				$filter->filterIn($url);
			}

			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:262: characters 4-32
			$this->_requestUri = $url->toString();
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:264: characters 3-21
		return $this->_requestUri;
	}


	/**
	 * @return string
	 */
	public function get_contentDirectory () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:364: lines 364-369
		if ($this->_contentDir === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:365: lines 365-368
			if ($this->request->get_scriptDirectory() !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:366: characters 5-112
				$this->_contentDir = (Path::addTrailingSlash($this->request->get_scriptDirectory())??'null') . (Path::addTrailingSlash($this->_relativeContentDir)??'null');
			} else {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:368: characters 5-63
				$this->_contentDir = Path::addTrailingSlash($this->_relativeContentDir);
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:370: characters 3-21
		return $this->_contentDir;
	}


	/**
	 * @return UFAuthUser
	 */
	public function get_currentUser () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:356: characters 10-48
		if (null !== $this->auth) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:356: characters 25-41
			return $this->auth->get_currentUser();
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:356: characters 44-48
			return null;
		}
	}


	/**
	 * @return string
	 */
	public function get_currentUserID () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:360: characters 10-81
		if (($this->auth !== null) && ($this->auth->get_currentUser() !== null)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:360: characters 51-74
			return $this->auth->get_currentUser()->get_userID();
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:360: characters 77-81
			return null;
		}
	}


	/**
	 * @return string
	 */
	public function get_sessionID () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:352: characters 10-45
		if (null !== $this->session) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:352: characters 28-38
			return $this->session->get_id();
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:352: characters 41-45
			return null;
		}
	}


	/**
	 * Sets the URL filters.
	 * It is recommended to keep the URL filters stable through a request, so try to set them as early as possible.
	 * They can be set during the constructor.
	 * 
	 * @param \Array_hx $filters
	 * 
	 * @return void
	 */
	public function setUrlFilters ($filters) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:289: characters 3-48
		$this->urlFilters = ($filters !== null ? $filters : new \Array_hx());
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:290: characters 3-21
		$this->_requestUri = null;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:348: characters 3-23
		return "HttpContext";
	}


	/**
	 * Create a Error message on the current request.
	 * Similar to ufTrace, except that the message is noted to be a Error, which may be displayed differently by the tracing module.
	 * Please note this does not throw or catch errors, it merely outputs a message to the log and marks that message as an error.
	 * It may be sensible to use it in your error handling code, but not _as_ your error handling code.
	 * 
	 * @param mixed $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	public function ufError ($msg, $pos = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:344: characters 3-53
		$_this = $this->messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:344: characters 3-53
		$_this->arr[$_this->length] = new HxAnon([
			"msg" => $msg,
			"pos" => $pos,
			"type" => MessageType::MError(),
		]);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:344: characters 3-53
		++$_this->length;
	}


	/**
	 * Create a Log message on the current request.
	 * Similar to ufTrace, except that the message is noted to be a Log, which may be displayed differently by the tracing module.
	 * 
	 * @param mixed $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	public function ufLog ($msg, $pos = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:323: characters 3-51
		$_this = $this->messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:323: characters 3-51
		$_this->arr[$_this->length] = new HxAnon([
			"msg" => $msg,
			"pos" => $pos,
			"type" => MessageType::MLog(),
		]);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:323: characters 3-51
		++$_this->length;
	}


	/**
	 * A trace statement that will be associated with this HttpContext
	 * Because of the static nature of Haxe's `trace` (it always uses `haxe.Log.trace`, and that does not have access to information about our request), it can be hard to differentiate which traces belong to which requests.
	 * A workaround is to call HttpContext's ufTrace(), store our messages here, and output them at the end of the request.  You can call `httpContext.ufTrace(someValue)` just like you would any other trace, and the traces will be displayed as normal at the end of the request.
	 * Inline shortcuts are provided from `ufront.web.Controller` and `ufront.api.UFApi` so that you can call ufTrace() and it points to this method.
	 * 
	 * @param mixed $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	public function ufTrace ($msg, $pos = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:314: characters 3-53
		$_this = $this->messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:314: characters 3-53
		$_this->arr[$_this->length] = new HxAnon([
			"msg" => $msg,
			"pos" => $pos,
			"type" => MessageType::MTrace(),
		]);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:314: characters 3-53
		++$_this->length;
	}


	/**
	 * Create a Warning message on the current request.
	 * Similar to ufTrace, except that the message is noted to be a Warning, which may be displayed differently by the tracing module.
	 * 
	 * @param mixed $msg
	 * @param object $pos
	 * 
	 * @return void
	 */
	public function ufWarn ($msg, $pos = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:332: characters 3-55
		$_this = $this->messages;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:332: characters 3-55
		$_this->arr[$_this->length] = new HxAnon([
			"msg" => $msg,
			"pos" => $pos,
			"type" => MessageType::MWarning(),
		]);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/web/context/HttpContext.hx:332: characters 3-55
		++$_this->length;
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(HttpContext::class, 'ufront.web.context.HttpContext');
Boot::registerGetters('ufront\\web\\context\\HttpContext', [
	'contentDirectory' => true,
	'currentUserID' => true,
	'currentUser' => true,
	'sessionID' => true
]);

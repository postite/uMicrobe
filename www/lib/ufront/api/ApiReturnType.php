<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/ApiReturnType.hx
 */

namespace ufront\api;

use \php\Boot;
use \php\_Boot\HxEnum;

/**
 * A set of flags that indicates if a `UFApi` returns a `Future`, an `Outcome`, a `Void` or a combination of these.
 */
class ApiReturnType extends HxEnum {
	/**
	 * @return ApiReturnType
	 */
	static public function ARTFuture () {
		static $inst = null;
		if (!$inst) $inst = new ApiReturnType('ARTFuture', 0, []);
		return $inst;
	}


	/**
	 * @return ApiReturnType
	 */
	static public function ARTOutcome () {
		static $inst = null;
		if (!$inst) $inst = new ApiReturnType('ARTOutcome', 1, []);
		return $inst;
	}


	/**
	 * @return ApiReturnType
	 */
	static public function ARTVoid () {
		static $inst = null;
		if (!$inst) $inst = new ApiReturnType('ARTVoid', 2, []);
		return $inst;
	}


	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			0 => 'ARTFuture',
			1 => 'ARTOutcome',
			2 => 'ARTVoid',
		];
	}


	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'ARTFuture' => 0,
			'ARTOutcome' => 0,
			'ARTVoid' => 0,
		];
	}
}


Boot::registerClass(ApiReturnType::class, 'ufront.api.ApiReturnType');

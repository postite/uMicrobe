<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx
 */

namespace ufront\api;

use \php\_Boot\HxException;
use \php\Boot;
use \haxe\rtti\Meta;
use \tink\core\_Callback\Callback_Impl_;
use \ufront\remoting\RemotingError;
use \haxe\CallStack;

/**
 * An asynchronous proxy that calls a server API, using callbacks to wait for the result.
 * #### Transformation:
 * Each public method of the `UFApi` you are proxying will be available in the proxy.
 * Instead of returning a value though, each method will contain two callbacks:
 * - An `onResult:T->Void` callback, to process a succesful request.
 * - An optional `onError:T->Void` callback, to process a failed request.
 * #### Callback typing:
 * The `onResult` and `onError` callbacks for each function will be typed as follows:
 * - A return type of `:Surprise<A,B>` will create a callback of `A->Void`, and an error callback of `RemotingError<B>->Void`.
 * - A return type of `:Future<T>` will create a callback of `T->Void`, and an error callback of `RemotingError<Noise>->Void`.
 * - A return type of `:Outcome<A,B>` will create a callback of `A->Void`, and an error callback of `RemotingError<B>->Void`.
 * - A return type of `:Void` will create a callback of `Noise->Void`, and an error callback of `RemotingError<Noise>->Void`.
 * - A return type of `:T` will create a callback of `T->Void`, and an error callback of `RemotingError<Noise>->Void`.
 * Each callback is typed as `tink.core.Callback`, so both `T->Void` and `Void->Void` callbacks are accepted.
 * #### Client and Server differences:
 * On the client it uses an injected `AsyncConnection` to perform the remoting call.
 * On the server, the original API will be called, and the result will be passed to our callbacks.
 * If the server API is synchronous, the callbacks will also be called synchronously.
 * Using the same Async Callback methods allows identical usage of the API on both the client or the server.
 * #### Injections:
 * The class must have the following injected to be functional:
 * - On the server, `api` - an instance of the original API object.
 * - On the client, `cnx` - an `AsyncConnection` to use for remoting.
 * - Both will be injected if you are using ufront's `Injector`.
 * #### Integration with UFApiContext:
 * If a `UFApiClientContext` is generated, it will automatically create a `UFCallbackApi` for each `UFApi` in the `UFApiContext`.
 * This allows you to quickly generate a single class controlling all remoting access to your client.
 * #### UFCallbackApi and UFAsyncApi:
 * This class is quite similar to `UFAsyncApi`, except it uses callbacks rather than returning a `Surprise`.
 * If your client code is using Ufront, it will probably be easier to use `UFAsyncApi` and call them from your controllers on the client or server.
 * If your client code is not using Ufront, or particularly if it is not written in Haxe, it may be easier to create a `UFClientApiContext` and use the callback style APIs.
 * #### Usage:
 * ```haxe
 * class AsyncLoginApi extends UFCallbackApi<LoginApi> {}
 * var api = new AsyncLoginApi();
 * api.attemptLogin( username, password, function(user:User) {
 * trace( 'You are logged in as $user!');
 * }, function(err:RemotingError<Dynamic>) {
 * trace( 'Error while logging in: $err' );
 * });
 * ```
 * #### Trivia:
 * Extending this class produces an almost identical result to extending `haxe.remoting.AsyncProxy`.
 * However, `AsyncProxy` is documented as "magic", using internal compiler code rather than readable code or macros in the standard library.
 * This makes it hard to reason about, and impossible to customise.
 * The motivation to re-implement it using macros came for 2 reasons:
 * 1. To handle the case of APIs that return a `Future` or a `Surprise`.
 * 2. To avoid creating the `Async${apiName}` class that is auto-generated by Haxe, which was causing naming conflicts in some Ufront projects.
 */
class UFCallbackApi {
	/**
	 * @var mixed
	 * Because of limitations between minject and generics, we cannot simply use `@inject public var api:T` based on a type paremeter.
	 * Instead, we get the build macro to create a `@inject public function injectApi( injector:Injector )` method, specifying the class of our sync Api as a constant.
	 */
	public $api;
	/**
	 * @var string
	 */
	public $className;


	/**
	 * For a given sync `UFApi` class, see if a matching `UFCallbackApi` class is available, and return it.
	 * Returns null if no matching `UFCallbackApi` was found.
	 * This works by looking for `@callbackApi("path.to.AsyncCallbackApi")` metadata on the given `syncApi` class.
	 * This metadata should be generated by `UFCallbackApi`'s build macro.
	 * 
	 * @param Class $syncApi
	 * 
	 * @return Class
	 */
	static public function getCallbackApi ($syncApi) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:199: characters 3-36
		$meta = Meta::getType($syncApi);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:200: lines 200-205
		if (Boot::dynamicField($meta, 'callbackApi') !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:201: characters 4-58
			$asyncCallbackApiName = (Boot::dynamicField($meta, 'callbackApi')->arr[0] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:202: lines 202-204
			if ($asyncCallbackApiName !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:203: characters 5-58
				return \Type::resolveClass($asyncCallbackApiName);
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:206: characters 3-14
		return null;
	}


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param string $method
	 * @param \Array_hx $args
	 * @param int $flags
	 * @param \Closure $onResult
	 * @param \Closure $onError
	 * 
	 * @return void
	 */
	public function _makeApiCall ($method, $args, $flags, $onResult, $onError = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:106: lines 106-188
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:107: lines 107-108
		if ($this->className === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:108: characters 4-56
			$this->className = \Type::getClassName(\Type::getClass($this));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:109: characters 3-68
		$remotingCallString = "" . ($this->className??'null') . "." . ($method??'null') . "(" . ($args->join(",")??'null') . ")";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:111: lines 111-113
		$callApi = function ()  use (&$args, &$method, &$_gthis) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:112: characters 5-70
			return \Reflect::callMethod($_gthis->api, \Reflect::field($_gthis->api, $method), $args);
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:114: lines 114-117
		$processError = function ($e)  use (&$onError, &$remotingCallString) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:115: characters 5-66
			$stack = CallStack::toString(CallStack::exceptionStack());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:116: characters 5-71
			Callback_Impl_::invoke($onError, RemotingError::RServerSideException($remotingCallString, $e, $stack));
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:118: lines 118-120
		if ($onError === null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:119: characters 5-31
			$onError = function ($err) {
			};
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:122: lines 122-164
		if (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTVoid(), 'index'))) !== 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:123: lines 123-127
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:124: characters 6-15
				$callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:125: characters 6-29
				Callback_Impl_::invoke($onResult, null);
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e1 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:127: characters 25-40
				$processError($e1);
			}
		} else if ((($flags & (1 << Boot::dynamicField(ApiReturnType::ARTFuture(), 'index'))) !== 0) && (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTOutcome(), 'index'))) !== 0)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:130: lines 130-137
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:131: characters 6-45
				$surprise = $callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:132: lines 132-135
				$surprise->handle(function ($result)  use (&$onResult, &$onError, &$remotingCallString) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:132: lines 132-135
					switch ($result->index) {
						case 0:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:133: characters 20-24
							$data = $result->params[0];
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:133: characters 27-50
							Callback_Impl_::invoke($onResult, $data);
							break;
						case 1:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:134: characters 20-23
							$err1 = $result->params[0];
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:134: characters 26-79
							Callback_Impl_::invoke($onError, RemotingError::RApiFailure($remotingCallString, $err1));
							break;
					}
				});
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e2 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:137: characters 25-40
				$processError($e2);
			}
		} else if (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTFuture(), 'index'))) !== 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:140: lines 140-146
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:141: characters 6-39
				$future = $callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:142: lines 142-144
				$future->handle(function ($data1)  use (&$onResult) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:143: characters 7-30
					Callback_Impl_::invoke($onResult, $data1);
				});
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e3 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:146: characters 25-40
				$processError($e3);
			}
		} else if (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTOutcome(), 'index'))) !== 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:149: lines 149-156
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:150: characters 6-43
				$outcome = $callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:151: lines 151-154
				switch ($outcome->index) {
					case 0:
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:152: characters 20-24
						$data2 = $outcome->params[0];
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:152: characters 27-50
						Callback_Impl_::invoke($onResult, $data2);
						break;
					case 1:
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:153: characters 20-23
						$err2 = $outcome->params[0];
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:153: characters 26-79
						Callback_Impl_::invoke($onError, RemotingError::RApiFailure($remotingCallString, $err2));
						break;
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e4 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:156: characters 25-40
				$processError($e4);
			}
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:159: lines 159-163
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:160: characters 6-31
				$result1 = $callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:161: characters 6-31
				Callback_Impl_::invoke($onResult, $result1);
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e5 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFCallbackApi.hx:163: characters 25-40
				$processError($e5);
			}
		}
	}
}


Boot::registerClass(UFCallbackApi::class, 'ufront.api.UFCallbackApi');

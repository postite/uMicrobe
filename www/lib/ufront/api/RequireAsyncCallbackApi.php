<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/RequireAsyncCallbackApi.hx
 */

namespace ufront\api;

use \php\Boot;
use \php\_Boot\HxAnon;

/**
 * RequireApiProxy is a marker interface that makes sure an API proxy is built before we reference it.
 * This may be required because in Haxe, "build order" (the order in which classes are built and build macros run) is unspecified.
 * What this means in practice, is that a `UserController` that uses `UserApiProxy`, may be built before `UserApiProxy` has been created - resulting in a compiler error.
 * You can work around this by having `class UserController implements RequireAsyncCallbackApi<UserApi>`, which will ensure `UserApiProxy` is generated in time.
 * You can also require more than one proxy at a time: `class UserController implements RequireAsyncCallbackApi<UserApi,LoginApi>`.
 */
interface RequireAsyncCallbackApi {
}


Boot::registerClass(RequireAsyncCallbackApi::class, 'ufront.api.RequireAsyncCallbackApi');
Boot::registerMeta(RequireAsyncCallbackApi::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));

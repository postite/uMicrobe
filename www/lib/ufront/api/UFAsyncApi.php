<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx
 */

namespace ufront\api;

use \ufront\core\SurpriseTools;
use \tink\core\Outcome;
use \php\_Boot\HxException;
use \php\Boot;
use \haxe\rtti\Meta;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \ufront\remoting\RemotingError;
use \haxe\CallStack;
use \tink\core\_Lazy\LazyConst;
use \ufront\web\HttpError;

/**
 * An asynchronous proxy that calls a server API, using a `Surprise` to wait for the result.
 * #### Transformation:
 * Each public method of the `UFApi` you are proxying will be available in the proxy.
 * Instead of returning a synchronous value though, each method will return a `Surprise`, (a `Future<Outcome>`), which will hold the result of the remoting call, whether it succeeded or failed.
 * #### Return typing:
 * The return type for each function will be typed as follows:
 * - An API return type of `:Surprise<A,B>` will become `:Surprise<A,TypedError<RemotingError<B>>>`.
 * - An API return type of `:Future<T>` will become `:Surprise<T,TypedError<RemotingError<Dynamic>>>`.
 * - An API return type of `:Outcome<A,B>` will become `:Surprise<A,TypedError<RemotingError<B>>>`.
 * - An API return type of `:Void` will become `:Surprise<Noise,TypedError<RemotingError<Dynamic>>>`.
 * - An API return type of `:T` will become `:Surprise<T,TypedError<RemotingError<Dynamic>>>`.
 * #### Client and Server differences:
 * On the client it uses an injected `AsyncConnection` to perform the remoting call.
 * On the server, the original API will be called, and the result will be wrapped in a `Surprise` as described above.
 * If the server API is synchronous, the Surprise will also be resolved (and handled) synchronously.
 * Using the same `Surprise` results allows identical usage of the API on both the client or the server.
 * #### Injections:
 * The class must have the following injected to be functional:
 * - On the server, `api` - an instance of the original API object.
 * - On the client, `cnx` - an `AsyncConnection` to use for remoting.
 * - Both will be injected if you are using ufront's `Injector`.
 * #### UFAsyncApi and UFAsyncCallbackApi:
 * This class is quite similar to `UFAsyncCallbackApi`, except it returns a `Surprise` rather than using callbacks.
 * If your client code is using Ufront, it will probably be easier to use `UFAsyncApi` and call them from your controllers on the client or server.
 * If your client code is not using Ufront, or particularly if it is not written in Haxe, it may be easier to create a `UFClientApiContext` and use the callback style APIs.
 * #### Usage:
 * ```haxe
 * class AsyncLoginApi extends UFAsyncApi<LoginApi> {}
 * @inject public var api:AsyncLoginApi;
 * // The long way:
 * var surprise = api.attemptLogin( username, password );
 * var result = "";
 * surprise.handle(function(outcome) switch outcome {
 * case Success(user): result = 'You are logged in as $user!';
 * case Failure(err): result = 'Failed to log in: $err';
 * }
 * return result;
 * // The short way, using the ">>" operator from tink_core, which allows you to just handle a success:
 * return api.attemptLogin( username, password ) >> function( user ) {
 * return 'You are logged in as $user!';
 * }
 * ```
 */
class UFAsyncApi {
	/**
	 * @var mixed
	 * The `api` is provided by dependency injection.
	 * However, because of limitations between minject and generics, we cannot simply use `@inject public var api:T` based on a type paremeter.
	 * Instead, we get the build macro to create a `@inject public function injectApi( injector:Injector )` method, specifying the class of our sync Api as a constant.
	 */
	public $api;
	/**
	 * @var string
	 */
	public $className;


	/**
	 * For a given sync `UFApi` class, see if a matching `UFAsyncApi` class is available, and return it.
	 * Returns null if no matching `UFAsyncApi` was found.
	 * This works by looking for `@asyncApi("path.to.AsyncApi")` metadata on the given `syncApi` class.
	 * This metadata should be generated by `UFAsyncApi`'s build macro.
	 * 
	 * @param Class $syncApi
	 * 
	 * @return Class
	 */
	static public function getAsyncApi ($syncApi) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:185: characters 3-36
		$meta = Meta::getType($syncApi);
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:186: lines 186-191
		if (Boot::dynamicField($meta, 'asyncApi') !== null) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:187: characters 4-47
			$asyncApiName = (Boot::dynamicField($meta, 'asyncApi')->arr[0] ?? null);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:188: lines 188-190
			if ($asyncApiName !== null) {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:189: characters 5-50
				return \Type::resolveClass($asyncApiName);
			}
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:192: characters 3-14
		return null;
	}


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param string $method
	 * @param \Array_hx $args
	 * @param int $flags
	 * @param object $pos
	 * 
	 * @return FutureObject
	 */
	public function _makeApiCall ($method, $args, $flags, $pos = null) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:94: lines 94-174
		$_gthis = $this;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:95: characters 3-68
		$remotingCallString = "" . ($this->className??'null') . "." . ($method??'null') . "(" . ($args->join(",")??'null') . ")";
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:97: lines 97-99
		$callApi = function ()  use (&$args, &$method, &$_gthis) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:98: characters 5-70
			return \Reflect::callMethod($_gthis->api, \Reflect::field($_gthis->api, $method), $args);
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:100: lines 100-104
		$returnError = function ($e)  use (&$pos, &$remotingCallString) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:101: characters 5-66
			$stack = CallStack::toString(CallStack::exceptionStack());
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:102: characters 5-74
			$remotingError = RemotingError::RServerSideException($remotingCallString, $e, $stack);
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:103: characters 5-73
			return SurpriseTools::asBadSurprise(HttpError::remotingError($remotingError, $pos));
		};
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:106: lines 106-148
		if (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTVoid(), 'index'))) !== 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:107: lines 107-111
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:108: characters 6-15
				$callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:109: characters 13-41
				return new SyncFuture(new LazyConst(Outcome::Success(null)));
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e1 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:111: characters 25-46
				return $returnError($e1);
			}
		} else if ((($flags & (1 << Boot::dynamicField(ApiReturnType::ARTFuture(), 'index'))) !== 0) && (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTOutcome(), 'index'))) !== 0)) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:114: lines 114-121
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:115: characters 6-45
				$surprise = $callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:116: lines 116-119
				$ret = $surprise->map(function ($result)  use (&$pos, &$remotingCallString) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:116: lines 116-119
					switch ($result->index) {
						case 0:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:117: characters 20-24
							$data = $result->params[0];
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:117: characters 27-40
							return Outcome::Success($data);
							break;
						case 1:
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:118: characters 20-23
							$err = $result->params[0];
							#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:118: characters 26-99
							return Outcome::Failure(HttpError::remotingError(RemotingError::RApiFailure($remotingCallString, $err), $pos));
							break;
					}
				});
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:116: lines 116-119
				return $ret->gather();
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e2 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:121: characters 25-46
				return $returnError($e2);
			}
		} else if (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTFuture(), 'index'))) !== 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:124: lines 124-130
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:125: characters 6-39
				$future = $callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:126: lines 126-128
				$ret1 = $future->map(function ($data1) {
					#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:127: characters 7-29
					return Outcome::Success($data1);
				});
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:126: lines 126-128
				return $ret1->gather();
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e3 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:130: characters 25-46
				return $returnError($e3);
			}
		} else if (($flags & (1 << Boot::dynamicField(ApiReturnType::ARTOutcome(), 'index'))) !== 0) {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:133: lines 133-140
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:134: characters 6-43
				$outcome = $callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:135: lines 135-138
				switch ($outcome->index) {
					case 0:
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:136: characters 20-24
						$data2 = $outcome->params[0];
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:136: characters 27-55
						return new SyncFuture(new LazyConst(Outcome::Success($data2)));
						break;
					case 1:
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:137: characters 20-23
						$err1 = $outcome->params[0];
						#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:137: characters 26-114
						return new SyncFuture(new LazyConst(Outcome::Failure(HttpError::remotingError(RemotingError::RApiFailure($remotingCallString, $err1), $pos))));
						break;
				}
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e4 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:140: characters 25-46
				return $returnError($e4);
			}
		} else {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:143: lines 143-147
			try {
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:144: characters 6-31
				$result1 = $callApi();
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:145: characters 13-43
				return new SyncFuture(new LazyConst(Outcome::Success($result1)));
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				$e5 = $__hx__real_e;
				#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/UFAsyncApi.hx:147: characters 25-46
				return $returnError($e5);
			}
		}
	}
}


Boot::registerClass(UFAsyncApi::class, 'ufront.api.UFAsyncApi');

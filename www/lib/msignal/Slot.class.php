<?php

// Generated by Haxe 3.4.7
class msignal_Slot {
	public function __construct($signal, $listener, $once = null, $priority = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("msignal.Slot::new");
		$__hx__spos = $GLOBALS['%s']->length;
		if($priority === null) {
			$priority = 0;
		}
		if($once === null) {
			$once = false;
		}
		$this->signal = $signal;
		$this->set_listener($listener);
		$this->once = $once;
		$this->priority = $priority;
		$this->enabled = true;
		$GLOBALS['%s']->pop();
	}}
	public $listener;
	public $once;
	public $priority;
	public $enabled;
	public $signal;
	public function remove() {
		$GLOBALS['%s']->push("msignal.Slot::remove");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->signal->remove($this->listener);
		$GLOBALS['%s']->pop();
	}
	public function set_listener($value) {
		$GLOBALS['%s']->push("msignal.Slot::set_listener");
		$__hx__spos = $GLOBALS['%s']->length;
		if($value === null) {
			throw new HException("listener cannot be null");
		}
		{
			$tmp = $this->listener = $value;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("set_listener" => "set_listener");
	function __toString() { return 'msignal.Slot'; }
}

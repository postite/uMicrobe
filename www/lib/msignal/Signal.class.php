<?php

// Generated by Haxe 3.4.7
class msignal_Signal {
	public function __construct($valueClasses = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("msignal.Signal::new");
		$__hx__spos = $GLOBALS['%s']->length;
		if($valueClasses === null) {
			$valueClasses = (new _hx_array(array()));
		}
		$this->valueClasses = $valueClasses;
		$this->slots = msignal_SlotList::$NIL;
		$this->priorityBased = false;
		$GLOBALS['%s']->pop();
	}}
	public $valueClasses;
	public $numListeners;
	public $slots;
	public $priorityBased;
	public function add($listener) {
		$GLOBALS['%s']->push("msignal.Signal::add");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->registerListener($listener, null, null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function addOnce($listener) {
		$GLOBALS['%s']->push("msignal.Signal::addOnce");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->registerListener($listener, true, null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function addWithPriority($listener, $priority = null) {
		$GLOBALS['%s']->push("msignal.Signal::addWithPriority");
		$__hx__spos = $GLOBALS['%s']->length;
		if($priority === null) {
			$priority = 0;
		}
		{
			$tmp = $this->registerListener($listener, false, $priority);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function addOnceWithPriority($listener, $priority = null) {
		$GLOBALS['%s']->push("msignal.Signal::addOnceWithPriority");
		$__hx__spos = $GLOBALS['%s']->length;
		if($priority === null) {
			$priority = 0;
		}
		{
			$tmp = $this->registerListener($listener, true, $priority);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function remove($listener) {
		$GLOBALS['%s']->push("msignal.Signal::remove");
		$__hx__spos = $GLOBALS['%s']->length;
		$slot = $this->slots->find($listener);
		if($slot === null) {
			$GLOBALS['%s']->pop();
			return null;
		}
		$this->slots = $this->slots->filterNot($listener);
		{
			$GLOBALS['%s']->pop();
			return $slot;
		}
		$GLOBALS['%s']->pop();
	}
	public function removeAll() {
		$GLOBALS['%s']->push("msignal.Signal::removeAll");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->slots = msignal_SlotList::$NIL;
		$GLOBALS['%s']->pop();
	}
	public function registerListener($listener, $once = null, $priority = null) {
		$GLOBALS['%s']->push("msignal.Signal::registerListener");
		$__hx__spos = $GLOBALS['%s']->length;
		if($priority === null) {
			$priority = 0;
		}
		if($once === null) {
			$once = false;
		}
		if($this->registrationPossible($listener, $once)) {
			$newSlot = $this->createSlot($listener, $once, $priority);
			$tmp = null;
			if(!$this->priorityBased) {
				$tmp = $priority !== 0;
			} else {
				$tmp = false;
			}
			if($tmp) {
				$this->priorityBased = true;
			}
			$tmp1 = null;
			if(!$this->priorityBased) {
				$tmp1 = $priority === 0;
			} else {
				$tmp1 = false;
			}
			if($tmp1) {
				$this->slots = $this->slots->prepend($newSlot);
			} else {
				$this->slots = $this->slots->insertWithPriority($newSlot);
			}
			{
				$GLOBALS['%s']->pop();
				return $newSlot;
			}
		}
		{
			$tmp = $this->slots->find($listener);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function registrationPossible($listener, $once) {
		$GLOBALS['%s']->push("msignal.Signal::registrationPossible");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$this->slots->nonEmpty) {
			$GLOBALS['%s']->pop();
			return true;
		}
		$existingSlot = $this->slots->find($listener);
		if($existingSlot === null) {
			$GLOBALS['%s']->pop();
			return true;
		}
		if($existingSlot->once !== $once) {
			throw new HException("You cannot addOnce() then add() the same listener without removing the relationship first.");
		}
		{
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
	public function createSlot($listener, $once = null, $priority = null) {
		$GLOBALS['%s']->push("msignal.Signal::createSlot");
		$__hx__spos = $GLOBALS['%s']->length;
		if($priority === null) {
			$priority = 0;
		}
		if($once === null) {
			$once = false;
		}
		{
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_numListeners() {
		$GLOBALS['%s']->push("msignal.Signal::get_numListeners");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->slots->get_length();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $__properties__ = array("get_numListeners" => "get_numListeners");
	function __toString() { return 'msignal.Signal'; }
}

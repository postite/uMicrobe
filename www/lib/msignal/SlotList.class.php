<?php

// Generated by Haxe 3.4.7
class msignal_SlotList {
	public function __construct($head, $tail = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("msignal.SlotList::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->nonEmpty = false;
		$tmp = null;
		if($head === null) {
			$tmp = $tail === null;
		} else {
			$tmp = false;
		}
		if($tmp) {
			if(msignal_SlotList::$NIL !== null) {
				throw new HException("Parameters head and tail are null. Use the NIL element instead.");
			}
			$this->nonEmpty = false;
		} else {
			if($head === null) {
				throw new HException("Parameter head cannot be null.");
			} else {
				$this->head = $head;
				$tmp1 = null;
				if($tail === null) {
					$tmp1 = msignal_SlotList::$NIL;
				} else {
					$tmp1 = $tail;
				}
				$this->tail = $tmp1;
				$this->nonEmpty = true;
			}
		}
		$GLOBALS['%s']->pop();
	}}
	public $head;
	public $tail;
	public $nonEmpty;
	public $length;
	public function get_length() {
		$GLOBALS['%s']->push("msignal.SlotList::get_length");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$this->nonEmpty) {
			$GLOBALS['%s']->pop();
			return 0;
		}
		if((is_object($_t = $this->tail) && ($_t instanceof Enum) ? $_t == msignal_SlotList::$NIL : _hx_equal($_t, msignal_SlotList::$NIL))) {
			$GLOBALS['%s']->pop();
			return 1;
		}
		$result = 0;
		$p = $this;
		while($p->nonEmpty) {
			$result = $result + 1;
			$p = $p->tail;
		}
		{
			$GLOBALS['%s']->pop();
			return $result;
		}
		$GLOBALS['%s']->pop();
	}
	public function prepend($slot) {
		$GLOBALS['%s']->push("msignal.SlotList::prepend");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new msignal_SlotList($slot, $this);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function append($slot) {
		$GLOBALS['%s']->push("msignal.SlotList::append");
		$__hx__spos = $GLOBALS['%s']->length;
		if($slot === null) {
			$GLOBALS['%s']->pop();
			return $this;
		}
		if(!$this->nonEmpty) {
			$tmp = new msignal_SlotList($slot, null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		if((is_object($_t = $this->tail) && ($_t instanceof Enum) ? $_t == msignal_SlotList::$NIL : _hx_equal($_t, msignal_SlotList::$NIL))) {
			$tmp = _hx_deref(new msignal_SlotList($slot, null))->prepend($this->head);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$wholeClone = new msignal_SlotList($this->head, null);
		$subClone = $wholeClone;
		$current = $this->tail;
		while($current->nonEmpty) {
			$subClone = $subClone->tail = new msignal_SlotList($current->head, null);
			$current = $current->tail;
		}
		$subClone->tail = new msignal_SlotList($slot, null);
		{
			$GLOBALS['%s']->pop();
			return $wholeClone;
		}
		$GLOBALS['%s']->pop();
	}
	public function insertWithPriority($slot) {
		$GLOBALS['%s']->push("msignal.SlotList::insertWithPriority");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$this->nonEmpty) {
			$tmp = new msignal_SlotList($slot, null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$priority = $slot->priority;
		if($priority >= $this->head->priority) {
			$tmp = $this->prepend($slot);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$wholeClone = new msignal_SlotList($this->head, null);
		$subClone = $wholeClone;
		$current = $this->tail;
		while($current->nonEmpty) {
			if($priority > $current->head->priority) {
				$subClone->tail = $current->prepend($slot);
				{
					$GLOBALS['%s']->pop();
					return $wholeClone;
				}
			}
			$subClone = $subClone->tail = new msignal_SlotList($current->head, null);
			$current = $current->tail;
		}
		$subClone->tail = new msignal_SlotList($slot, null);
		{
			$GLOBALS['%s']->pop();
			return $wholeClone;
		}
		$GLOBALS['%s']->pop();
	}
	public function filterNot($listener) {
		$GLOBALS['%s']->push("msignal.SlotList::filterNot");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		if(!(!$this->nonEmpty)) {
			$tmp = $listener === null;
		} else {
			$tmp = true;
		}
		if($tmp) {
			$GLOBALS['%s']->pop();
			return $this;
		}
		if(Reflect::compareMethods($this->head->listener, $listener)) {
			$tmp2 = $this->tail;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$wholeClone = new msignal_SlotList($this->head, null);
		$subClone = $wholeClone;
		$current = $this->tail;
		while($current->nonEmpty) {
			if(Reflect::compareMethods($current->head->listener, $listener)) {
				$subClone->tail = $current->tail;
				{
					$GLOBALS['%s']->pop();
					return $wholeClone;
				}
			}
			$subClone = $subClone->tail = new msignal_SlotList($current->head, null);
			$current = $current->tail;
		}
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function contains($listener) {
		$GLOBALS['%s']->push("msignal.SlotList::contains");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$this->nonEmpty) {
			$GLOBALS['%s']->pop();
			return false;
		}
		$p = $this;
		while($p->nonEmpty) {
			if(Reflect::compareMethods($p->head->listener, $listener)) {
				$GLOBALS['%s']->pop();
				return true;
			}
			$p = $p->tail;
		}
		{
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
	public function find($listener) {
		$GLOBALS['%s']->push("msignal.SlotList::find");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$this->nonEmpty) {
			$GLOBALS['%s']->pop();
			return null;
		}
		$p = $this;
		while($p->nonEmpty) {
			if(Reflect::compareMethods($p->head->listener, $listener)) {
				$tmp = $p->head;
				$GLOBALS['%s']->pop();
				return $tmp;
				unset($tmp);
			}
			$p = $p->tail;
		}
		{
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $NIL;
	static $__properties__ = array("get_length" => "get_length");
	function __toString() { return 'msignal.SlotList'; }
}
msignal_SlotList::$NIL = new msignal_SlotList(null, null);

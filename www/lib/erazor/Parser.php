<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx
 */

namespace erazor;

use \erazor\_Parser\ParseContext;
use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxDynamicStr;
use \php\_Boot\HxString;
use \erazor\error\ParserError;
use \erazor\_Parser\ParseResult;
use \php\_Boot\HxAnon;

class Parser {
	/**
	 * @var string
	 */
	const at = "@";


	/**
	 * @var string
	 */
	static public $bracketMismatch = "Bracket mismatch! Inside template, non-paired brackets, '{' or '}', should be replaced by @{'{'} and @{'}'}.";


	/**
	 * @var \Array_hx
	 */
	public $bracketStack;
	/**
	 * @var \EReg
	 */
	public $condMatch;
	/**
	 * @var int
	 */
	public $conditionalStack;
	/**
	 * @var ParseContext
	 */
	public $context;
	/**
	 * @var \EReg
	 */
	public $inConditionalMatch;
	/**
	 * @var int
	 */
	public $pos;
	/**
	 * @var \EReg
	 */
	public $variableChar;


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:407: characters 3-38
		$this->condMatch = new \EReg("^@(?:if|for|while)\\b", "");
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:408: characters 3-79
		$this->inConditionalMatch = new \EReg("^(?:\\}[\\s\x0D\x0A]*else if\\b|\\}[\\s\x0D\x0A]*else[\\s\x0D\x0A]*\\{)", "");
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:410: characters 3-30
		$this->variableChar = new \EReg("^[_\\w\\.]\$", "");
	}


	/**
	 * @param string $template
	 * @param \Closure $acceptor
	 * @param bool $throwAtEnd
	 * 
	 * @return string
	 */
	public function accept ($template, $acceptor, $throwAtEnd) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:103: lines 103-105
		return $this->parseString($template, function ($chr)  use (&$acceptor) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:104: characters 11-78
			if ($acceptor($chr)) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:104: characters 27-48
				return ParseResult::keepGoing();
			} else {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:104: characters 51-78
				return ParseResult::doneSkipCurrent();
			}
		}, $throwAtEnd);
	}


	/**
	 * @param string $template
	 * @param string $bracket
	 * 
	 * @return string
	 */
	public function acceptBracket ($template, $bracket) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:129: characters 3-72
		return $this->parseScriptPart($template, $bracket, ($bracket === "(" ? ")" : "]"));
	}


	/**
	 * @param string $template
	 * 
	 * @return string
	 */
	public function acceptIdentifier ($template) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:117: characters 3-20
		$first = true;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:118: characters 3-19
		$self = $this;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:120: lines 120-124
		return $this->accept($template, function ($chr)  use (&$self, &$first) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:121: characters 4-47
			$status = $self->isIdentifier($chr, $first);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:122: characters 4-17
			$first = false;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:123: characters 4-17
			return $status;
		}, false);
	}


	/**
	 * @param string $input
	 * 
	 * @return string
	 */
	public function escapeLiteral ($input) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:339: characters 3-70
		return \StringTools::replace($input, "@" . "@", "@");
	}


	/**
	 * @param string $char
	 * @param bool $first
	 * 
	 * @return bool
	 */
	public function isIdentifier ($char, $first = true) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:110: lines 110-112
		if ($first === null) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:110: lines 110-112
			$first = true;
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:110: lines 110-112
		if ($first) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:111: characters 6-81
			if (!((strcmp($char, "a") >= 0 && strcmp($char, "z") <= 0) || (strcmp($char, "A") >= 0 && strcmp($char, "Z") <= 0))) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:111: characters 70-81
				return $char === "_";
			} else {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:111: characters 6-81
				return true;
			}
		} else if (!((strcmp($char, "a") >= 0 && strcmp($char, "z") <= 0) || (strcmp($char, "A") >= 0 && strcmp($char, "Z") <= 0) || (strcmp($char, "0") >= 0 && strcmp($char, "9") <= 0))) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:112: characters 102-113
			return $char === "_";
		} else {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:112: characters 6-113
			return true;
		}
	}


	/**
	 * Takes a template string as input and returns an AST made of TBlock instances.
	 * @param	template
	 * @return
	 * 
	 * @param string $template
	 * 
	 * @return \Array_hx
	 */
	public function parse ($template) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:349: characters 3-15
		$this->pos = 0;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:351: characters 3-36
		$output = new \Array_hx();
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:352: characters 3-20
		$this->bracketStack = new \Array_hx();
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:353: characters 3-23
		$this->conditionalStack = 0;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:355: lines 355-365
		while ($template !== "") {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:357: characters 4-36
			$this->context = $this->parseContext($template);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:358: characters 4-37
			$block = $this->parseBlock($template);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:360: lines 360-361
			if ($block->block !== null) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:361: characters 5-29
				$output->arr[$output->length] = $block->block;
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:361: characters 5-29
				++$output->length;
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:363: characters 4-44
			$template = HxString::substr($template, HxDynamicStr::wrap($block)->length);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:364: characters 4-8
			$tmp = $this;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:364: characters 4-28
			$tmp->pos = $tmp->pos + HxDynamicStr::wrap($block)->length;
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:367: characters 3-38
		if ($this->bracketStack->length !== 0) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:367: characters 33-38
			throw new HxException(new ParserError(Parser::$bracketMismatch, $this->pos));
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:369: characters 3-16
		return $output;
	}


	/**
	 * Main block parse method, called from parse().
	 * 
	 * @param string $template
	 * 
	 * @return object
	 */
	public function parseBlock ($template) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:138: characters 10-92
		if ($this->context === ParseContext::code()) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:138: characters 43-67
			return $this->parseCodeBlock($template);
		} else {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:138: characters 70-92
			return $this->parseLiteral($template);
		}
	}


	/**
	 * @param string $template
	 * 
	 * @return object
	 */
	public function parseCodeBlock ($template) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:204: lines 204-219
		if (($this->bracketStack->length > 0) && ($this->peek($template) === "}")) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:207: lines 207-211
			if ($this->inConditionalMatch->match($template)) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:209: characters 5-50
				$str = $this->parseScriptPart($template, "", "{");
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:210: characters 5-80
				return new HxAnon([
					"block" => TBlock::codeBlock($str),
					"length" => strlen($str),
					"start" => $this->pos,
				]);
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:213: characters 16-34
			$_this = $this->bracketStack;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:213: characters 16-34
			if ($_this->length > 0) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:213: characters 16-34
				$_this->length--;
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:213: characters 16-34
			$_g = array_pop($_this->arr);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:213: lines 213-216
			if (($_g === null ? true : ($_g->index === 1 ? --$this->conditionalStack < 0 : true))) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:216: characters 7-12
				throw new HxException(new ParserError(Parser::$bracketMismatch, $this->pos));
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:218: characters 4-70
			return new HxAnon([
				"block" => TBlock::codeBlock("}"),
				"length" => 1,
				"start" => $this->pos,
			]);
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:222: lines 222-228
		if ($this->condMatch->match($template)) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:224: characters 4-27
			$_this1 = $this->bracketStack;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:224: characters 4-27
			$_this1->arr[$_this1->length] = ParseContext::code();
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:224: characters 4-27
			++$_this1->length;

			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:225: characters 4-22
			++$this->conditionalStack;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:227: characters 4-37
			return $this->parseConditional($template);
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:231: lines 231-232
		if (($this->peek($template) === "@") && $this->isIdentifier($this->peek($template, 1))) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:232: characters 4-34
			return $this->parseVariable($template);
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:235: characters 3-38
		$startBrace = $this->peek($template, 1);
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:236: characters 3-50
		$endBrace = ($startBrace === "{" ? "}" : ")");
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:238: characters 3-71
		$str1 = $this->parseScriptPart(HxString::substr($template, 1), $startBrace, $endBrace);
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:239: characters 3-66
		$noBraces = trim(HxString::substr($str1, 1, strlen($str1) - 2));
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:241: lines 241-244
		if ($startBrace === "{") {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:242: characters 4-88
			return new HxAnon([
				"block" => TBlock::codeBlock($noBraces),
				"length" => strlen($str1) + 1,
				"start" => $this->pos,
			]);
		} else {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:244: characters 4-89
			return new HxAnon([
				"block" => TBlock::printBlock($noBraces),
				"length" => strlen($str1) + 1,
				"start" => $this->pos,
			]);
		}
	}


	/**
	 * @param string $template
	 * 
	 * @return object
	 */
	public function parseConditional ($template) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:143: characters 3-48
		$str = $this->parseScriptPart($template, "", "{");
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:144: characters 3-88
		return new HxAnon([
			"block" => TBlock::codeBlock(HxString::substr($str, 1)),
			"length" => strlen($str),
			"start" => $this->pos,
		]);
	}


	/**
	 * @param string $template
	 * 
	 * @return ParseContext
	 */
	public function parseContext ($template) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:87: lines 87-88
		if (($this->peek($template) === "@") && ($this->peek($template, 1) !== "@")) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:88: characters 4-28
			return ParseContext::code();
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:91: lines 91-95
		if (($this->conditionalStack > 0) && ($this->peek($template) === "}")) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:92: characters 11-48
			$_g = ($this->bracketStack->arr[$this->bracketStack->length - 1] ?? null);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:92: characters 11-48
			if ($_g->index === 1) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:93: characters 16-40
				return ParseContext::code();
			}
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:98: characters 3-30
		return ParseContext::literal();
	}


	/**
	 * @param string $template
	 * 
	 * @return object
	 */
	public function parseLiteral ($template) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:294: characters 3-29
		$len = strlen($template);
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:295: characters 3-14
		$i = -1;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:297: lines 297-328
		while (true) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:297: characters 10-13
			$i = $i + 1;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:297: lines 297-328
			if (!($i < $len)) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:297: lines 297-328
				break;
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:298: characters 4-34
			$char = (($i < 0) || ($i >= strlen($template)) ? "" : $template[$i]);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:299: lines 299-327
			switch ($char) {
				case "@":
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:302: characters 10-60
					$tmp = null;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:302: characters 10-60
					if ($len > ($i + 1)) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:302: characters 25-47
						$index = $i + 1;
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:302: characters 10-60
						$tmp = ((($index < 0) || ($index >= strlen($template)) ? "" : $template[$index])) !== "@";
					} else {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:302: characters 10-60
						$tmp = false;
					}
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:302: lines 302-308
					if ($tmp) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:304: characters 15-67
						$tmp1 = TBlock::literal($this->escapeLiteral(HxString::substr($template, 0, $i)));
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:303: lines 303-307
						return new HxAnon([
							"block" => $tmp1,
							"length" => $i,
							"start" => $this->pos,
						]);
					}
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:309: characters 6-9
					$i = $i + 1;
					break;
				case "{":
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:326: characters 6-32
					$_this = $this->bracketStack;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:326: characters 6-32
					$_this->arr[$_this->length] = ParseContext::literal();
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:326: characters 6-32
					++$_this->length;
					break;
				case "}":
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:311: lines 311-324
					if ($this->bracketStack->length > 0) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:312: characters 15-52
						$_g = ($this->bracketStack->arr[$this->bracketStack->length - 1] ?? null);
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:312: characters 15-52
						switch ($_g->index) {
							case 0:
								#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:320: characters 9-27
								$_this1 = $this->bracketStack;
								#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:320: characters 9-27
								if ($_this1->length > 0) {
									#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:320: characters 9-27
									$_this1->length--;
								}
								#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:320: characters 9-27
								array_pop($_this1->arr);
								break;
							case 1:
								#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:315: characters 17-69
								$tmp2 = TBlock::literal($this->escapeLiteral(HxString::substr($template, 0, $i)));
								#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:314: lines 314-318
								return new HxAnon([
									"block" => $tmp2,
									"length" => $i,
									"start" => $this->pos,
								]);
								break;
						}
					} else {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:323: characters 8-13
						throw new HxException(new ParserError(Parser::$bracketMismatch, $this->pos));
					}
					break;
			}
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:331: characters 11-50
		$tmp3 = TBlock::literal($this->escapeLiteral($template));
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:330: lines 330-334
		return new HxAnon([
			"block" => $tmp3,
			"length" => $len,
			"start" => $this->pos,
		]);
	}


	/**
	 * @param string $template
	 * @param string $startBrace
	 * @param string $endBrace
	 * 
	 * @return string
	 */
	public function parseScriptPart ($template, $startBrace, $endBrace) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:41: characters 3-33
		$insideSingleQuote = false;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:42: characters 3-33
		$insideDoubleQuote = false;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:45: characters 3-42
		$stack = ($startBrace === "" ? 1 : 0);
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:46: characters 3-14
		$i = -1;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:48: lines 48-78
		while (true) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:48: characters 9-12
			$i = $i + 1;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:48: lines 48-78
			if (!($i < strlen($template))) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:48: lines 48-78
				break;
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:50: characters 4-34
			$char = (($i < 0) || ($i >= strlen($template)) ? "" : $template[$i]);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:52: lines 52-77
			if (!$insideDoubleQuote && !$insideSingleQuote) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:54: lines 54-68
				if ($char === $startBrace) {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:56: characters 6-13
					$stack = $stack + 1;
				} else if ($char === $endBrace) {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:58: characters 6-13
					$stack = $stack - 1;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:60: lines 60-61
					if ($stack === 0) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:61: characters 7-37
						return HxString::substr($template, 0, $i + 1);
					}
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:62: lines 62-63
					if ($stack < 0) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:63: characters 7-12
						throw new HxException(new ParserError("Unbalanced braces for block: ", $this->pos, HxString::substr($template, 0, 100)));
					}
				} else if ($char === "\"") {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:65: characters 6-30
					$insideDoubleQuote = true;
				} else if ($char === "'") {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:67: characters 6-30
					$insideSingleQuote = true;
				}
			} else {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:70: characters 12-76
				$tmp = null;
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:70: characters 12-76
				if ($insideDoubleQuote && ($char === "\"")) {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:70: characters 48-68
					$index = $i - 1;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:70: characters 12-76
					$tmp = ((($index < 0) || ($index >= strlen($template)) ? "" : $template[$index])) !== "\\";
				} else {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:70: characters 12-76
					$tmp = false;
				}
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:70: lines 70-77
				if ($tmp) {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:72: characters 5-30
					$insideDoubleQuote = false;
				} else {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:74: characters 12-76
					$tmp1 = null;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:74: characters 12-76
					if ($insideSingleQuote && ($char === "'")) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:74: characters 48-68
						$index1 = $i - 1;
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:74: characters 12-76
						$tmp1 = ((($index1 < 0) || ($index1 >= strlen($template)) ? "" : $template[$index1])) !== "\\";
					} else {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:74: characters 12-76
						$tmp1 = false;
					}
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:74: lines 74-77
					if ($tmp1) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:76: characters 5-30
						$insideSingleQuote = false;
					}
				}
			}
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:81: characters 3-8
		throw new HxException(new ParserError("Failed to find a closing delimiter for the script block: ", $this->pos, HxString::substr($template, 0, 100)));
	}


	/**
	 * @param string $str
	 * @param \Closure $modifier
	 * @param bool $throwAtEnd
	 * 
	 * @return string
	 */
	public function parseString ($str, $modifier, $throwAtEnd) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:249: characters 3-33
		$insideSingleQuote = false;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:250: characters 3-33
		$insideDoubleQuote = false;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:252: characters 3-14
		$i = -1;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:253: lines 253-284
		while (true) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:253: characters 9-12
			$i = $i + 1;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:253: lines 253-284
			if (!($i < strlen($str))) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:253: lines 253-284
				break;
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:255: characters 4-29
			$char = (($i < 0) || ($i >= strlen($str)) ? "" : $str[$i]);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:257: lines 257-283
			if (!$insideDoubleQuote && !$insideSingleQuote) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:259: characters 12-26
				$_g = $modifier($char);
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:259: characters 12-26
				switch ($_g->index) {
					case 0:
												break;
					case 1:
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:262: characters 7-34
						return HxString::substr($str, 0, $i + 1);
						break;
					case 2:
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:265: characters 7-30
						return HxString::substr($str, 0, $i);
						break;
				}

				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:271: lines 271-274
				if ($char === "\"") {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:272: characters 6-30
					$insideDoubleQuote = true;
				} else if ($char === "'") {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:274: characters 6-30
					$insideSingleQuote = true;
				}
			} else {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:276: characters 12-71
				$tmp = null;
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:276: characters 12-71
				if ($insideDoubleQuote && ($char === "\"")) {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:276: characters 48-63
					$index = $i - 1;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:276: characters 12-71
					$tmp = ((($index < 0) || ($index >= strlen($str)) ? "" : $str[$index])) !== "\\";
				} else {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:276: characters 12-71
					$tmp = false;
				}
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:276: lines 276-283
				if ($tmp) {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:278: characters 5-30
					$insideDoubleQuote = false;
				} else {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:280: characters 12-71
					$tmp1 = null;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:280: characters 12-71
					if ($insideSingleQuote && ($char === "'")) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:280: characters 48-63
						$index1 = $i - 1;
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:280: characters 12-71
						$tmp1 = ((($index1 < 0) || ($index1 >= strlen($str)) ? "" : $str[$index1])) !== "\\";
					} else {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:280: characters 12-71
						$tmp1 = false;
					}
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:280: lines 280-283
					if ($tmp1) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:282: characters 5-30
						$insideSingleQuote = false;
					}
				}
			}
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:286: lines 286-287
		if ($throwAtEnd) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:287: characters 4-9
			throw new HxException(new ParserError("Failed to find a closing delimiter: ", $this->pos, HxString::substr($str, 0, 100)));
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:289: characters 3-13
		return $str;
	}


	/**
	 * @param string $template
	 * 
	 * @return object
	 */
	public function parseVariable ($template) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:154: characters 3-19
		$output = "";
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:155: characters 3-28
		$char = null;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:156: characters 3-28
		$part = null;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:159: characters 3-32
		$template = HxString::substr($template, 1);
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:161: lines 161-191
		while (true) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:164: characters 4-37
			$part = $this->acceptIdentifier($template);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:165: characters 4-43
			$template = HxString::substr($template, strlen($part));
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:167: characters 4-18
			$output = ($output??'null') . ($part??'null');
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:168: characters 4-25
			$char = $this->peek($template);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:171: lines 171-178
			while (($char === "(") || ($char === "[")) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:173: characters 5-41
				$part = $this->acceptBracket($template, $char);
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:174: characters 5-44
				$template = HxString::substr($template, strlen($part));
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:176: characters 5-19
				$output = ($output??'null') . ($part??'null');
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:177: characters 5-26
				$char = $this->peek($template);
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:181: lines 181-190
			if (($char === ".") && $this->isIdentifier($this->peek($template, 1))) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:183: characters 5-34
				$template = HxString::substr($template, 1);
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:185: characters 5-18
				$output = ($output??'null') . ".";
			} else {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:189: characters 5-10
				break;
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:161: lines 161-191
			if (!($char !== null)) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:161: lines 161-191
				break;
			}
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:193: characters 3-89
		return new HxAnon([
			"block" => TBlock::printBlock($output),
			"length" => strlen($output) + 1,
			"start" => $this->pos,
		]);
	}


	/**
	 * @param string $char
	 * 
	 * @return ParseResult
	 */
	public function parseVariableChar ($char) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:198: characters 10-142
		if ($this->variableChar->match($char)) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:198: characters 91-112
			return ParseResult::keepGoing();
		} else {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:198: characters 115-142
			return ParseResult::doneSkipCurrent();
		}
	}


	/**
	 * @param string $template
	 * 
	 * @return \Array_hx
	 */
	public function parseWithPosition ($template) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:374: characters 3-15
		$this->pos = 0;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:376: characters 3-35
		$output = new \Array_hx();
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:377: characters 3-20
		$this->bracketStack = new \Array_hx();
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:378: characters 3-23
		$this->conditionalStack = 0;
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:380: lines 380-390
		while ($template !== "") {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:382: characters 4-36
			$this->context = $this->parseContext($template);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:383: characters 4-37
			$block = $this->parseBlock($template);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:385: lines 385-386
			if ($block->block !== null) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:386: characters 5-23
				$output->arr[$output->length] = $block;
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:386: characters 5-23
				++$output->length;
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:388: characters 4-44
			$template = HxString::substr($template, HxDynamicStr::wrap($block)->length);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:389: characters 4-8
			$tmp = $this;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:389: characters 4-28
			$tmp->pos = $tmp->pos + HxDynamicStr::wrap($block)->length;
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:392: characters 3-38
		if ($this->bracketStack->length !== 0) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:392: characters 33-38
			throw new HxException(new ParserError(Parser::$bracketMismatch, $this->pos));
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:394: characters 3-16
		return $output;
	}


	/**
	 * @param string $template
	 * @param int $offset
	 * 
	 * @return string
	 */
	public function peek ($template, $offset = 0) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:149: characters 10-67
		if ($offset === null) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:149: characters 10-67
			$offset = 0;
		}
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:149: characters 10-67
		if (strlen($template) > $offset) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:149: characters 37-60
			if (($offset < 0) || ($offset >= strlen($template))) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:149: characters 37-60
				return "";
			} else {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:149: characters 37-60
				return $template[$offset];
			}
		} else {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/Parser.hx:149: characters 63-67
			return null;
		}
	}
}


Boot::registerClass(Parser::class, 'erazor.Parser');

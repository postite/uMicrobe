<?php

// Generated by Haxe 3.4.7
class erazor_ScriptBuilder {
	public function __construct($context) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("erazor.ScriptBuilder::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->context = $context;
		$GLOBALS['%s']->pop();
	}}
	public $context;
	public function build($blocks) {
		$GLOBALS['%s']->push("erazor.ScriptBuilder::build");
		$__hx__spos = $GLOBALS['%s']->length;
		$buffer = new StringBuf();
		{
			$_g = 0;
			while($_g < $blocks->length) {
				$block = $blocks[$_g];
				$_g = $_g + 1;
				$buffer->add($this->blockToString($block));
				unset($block);
			}
		}
		{
			$tmp = $buffer->b;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function blockToString($block) {
		$GLOBALS['%s']->push("erazor.ScriptBuilder::blockToString");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($block->index) {
		case 0:{
			$s = _hx_deref($block)->params[0];
			$tmp = _hx_string_or_null($this->context) . ".add('";
			{
				$tmp2 = _hx_string_or_null($tmp) . _hx_string_or_null(str_replace("'", "\\'", $s)) . "');\x0A";
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}break;
		case 1:{
			$s1 = _hx_deref($block)->params[0];
			{
				$tmp = _hx_string_or_null($s1) . "\x0A";
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 2:{
			$s2 = _hx_deref($block)->params[0];
			{
				$tmp = _hx_string_or_null($this->context) . ".unsafeAdd(" . _hx_string_or_null($s2) . ");\x0A";
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'erazor.ScriptBuilder'; }
}

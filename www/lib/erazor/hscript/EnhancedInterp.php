<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx
 */

namespace erazor\hscript;

use \php\_Boot\HxClosure;
use \hscript\Expr;
use \php\Boot;
use \php\_Boot\HxException;
use \hscript\Interp;
use \php\_Boot\HxString;
use \haxe\CallStack;
use \php\_Boot\HxAnon;

class EnhancedInterp extends Interp {
	/**
	 * @var \EReg
	 */
	static public $re;


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:14: characters 3-10
		parent::__construct();
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:16: characters 3-33
		$add = new HxClosure(new \StringBuf(), 'add');
	}


	/**
	 * @param mixed $o
	 * @param mixed $f
	 * @param \Array_hx $args
	 * 
	 * @return mixed
	 */
	public function call ($o, $f, $args) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:20: lines 20-38
		while (true) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:22: lines 22-37
			try {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:24: characters 5-40
				return \Reflect::callMethod($o, $f, $args);
			} catch (\Throwable $__hx__caught_e) {
				CallStack::saveExceptionTrace($__hx__caught_e);
				$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
				if (is_string($__hx__real_e)) {
					$e = $__hx__real_e;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:26: lines 26-27
					if (HxString::substr($e, 0, 16) !== "Missing argument") {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:27: characters 6-24
						throw new HxException($e);
					}
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:28: characters 5-36
					$expected = $args->length + 1;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:29: lines 29-30
					if (EnhancedInterp::$re->match($e)) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:30: characters 6-44
						$expected = \Std::parseInt(EnhancedInterp::$re->matched(1));
					}
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:31: lines 31-36
					if ($expected > 15) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:32: characters 6-11
						throw new HxException("invalid number of arguments");
					} else if ($expected < $args->length) {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:34: characters 6-36
						$args = $args->slice(0, $expected);
					} else {
						#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:35: lines 35-36
						while ($expected > $args->length) {
							#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:36: characters 6-21
							$args->arr[$args->length] = null;
							#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:36: characters 6-21
							++$args->length;
						}
					}
				} else  throw $__hx__caught_e;
			}
		}
	}


	/**
	 * @param Expr $e
	 * 
	 * @return mixed
	 */
	public function expr ($e) {
		#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:71: lines 71-96
		if ($e->index === 14) {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:72: characters 36-39
			$ret = $e->params[3];
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:72: characters 31-35
			$name = $e->params[2];
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:72: characters 25-30
			$fexpr = $e->params[1];
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:72: characters 18-24
			$params = $e->params[0];
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:73: characters 4-43
			$capturedLocals = $this->duplicate($this->locals);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:74: characters 4-18
			$me = $this;
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:75: lines 75-89
			$f = function ($args)  use (&$params, &$capturedLocals, &$e1, &$fexpr, &$me) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:76: characters 5-25
				$old = $me->locals;
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:77: characters 5-45
				$me->locals = $me->duplicate($capturedLocals);
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:78: lines 78-79
				$_g1 = 0;
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:78: lines 78-79
				$_g = $params->length;
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:78: lines 78-79
				while ($_g1 < $_g) {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:78: lines 78-79
					$_g1 = $_g1 + 1;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:78: characters 10-11
					$i = $_g1 - 1;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:79: characters 6-51
					$me->locals->data[$params[$i]->name] = new HxAnon(["r" => ($args->arr[$i] ?? null)]);
				}

				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:80: characters 5-18
				$r = null;
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:81: lines 81-86
				try {
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:82: characters 6-30
					$r = $me->exprReturn($fexpr);
				} catch (\Throwable $__hx__caught_e) {
					CallStack::saveExceptionTrace($__hx__caught_e);
					$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
					$e1 = $__hx__real_e;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:84: characters 6-21
					$me->locals = $old;
					#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:85: characters 6-11
					throw (is_object($__hx__throw = $e1) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
				}
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:87: characters 5-20
				$me->locals = $old;
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:88: characters 5-13
				return $r;
			};
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:90: characters 4-35
			$f1 = \Reflect::makeVarArgs($f);
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:91: lines 91-92
			if ($name !== null) {
				#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:92: characters 5-26
				$this->variables->data[$name] = $f1;
			}
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:93: characters 4-12
			return $f1;
		} else {
			#/usr/local/lib/haxe/lib/erazor/1,0,2/src/erazor/hscript/EnhancedInterp.hx:95: characters 5-25
			return parent::expr($e);
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$re = new \EReg("^[^0-9]+(\\d+)", "");
	}
}


Boot::registerClass(EnhancedInterp::class, 'erazor.hscript.EnhancedInterp');
EnhancedInterp::__hx__init();

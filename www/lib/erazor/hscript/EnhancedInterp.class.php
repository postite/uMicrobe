<?php

// Generated by Haxe 3.4.7
class erazor_hscript_EnhancedInterp extends hscript_Interp {
	public function __construct() { if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("erazor.hscript.EnhancedInterp::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct();
		$add = (property_exists(new StringBuf(), "add") ? _hx_deref(new StringBuf())->add: array(new StringBuf(), "add"));
		$GLOBALS['%s']->pop();
	}}
	public function call($o, $f, $args) {
		$GLOBALS['%s']->push("erazor.hscript.EnhancedInterp::call");
		$__hx__spos = $GLOBALS['%s']->length;
		while(true) {
			try {
				{
					$tmp = Reflect::callMethod($o, $f, $args);
					$GLOBALS['%s']->pop();
					return $tmp;
					unset($tmp);
				}
			}catch(Exception $__hx__e) {
				$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
				if(is_string($e = $_ex_)){
					$GLOBALS['%e'] = (new _hx_array(array()));
					while($GLOBALS['%s']->length >= $__hx__spos) {
						$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
					}
					$GLOBALS['%s']->push($GLOBALS['%e'][0]);
					if(_hx_substr($e, 0, 16) !== "Missing argument") {
						php_Lib::rethrow($e);
					}
					$expected = $args->length + 1;
					if(erazor_hscript_EnhancedInterp::$re->match($e)) {
						$expected = Std::parseInt(erazor_hscript_EnhancedInterp::$re->matched(1));
					}
					if($expected > 15) {
						throw new HException("invalid number of arguments");
					} else {
						if($expected < $args->length) {
							$args = $args->slice(0, $expected);
						} else {
							while($expected > $args->length) {
								$args->push(null);
							}
						}
					}
					unset($expected);
				} else throw $__hx__e;;
			}
			unset($e);
		}
		$GLOBALS['%s']->pop();
	}
	public function expr($e) {
		$GLOBALS['%s']->push("erazor.hscript.EnhancedInterp::expr");
		$__hx__spos = $GLOBALS['%s']->length;
		if($e->index === 14) {
			$ret = _hx_deref($e)->params[3];
			$name = _hx_deref($e)->params[2];
			$fexpr = _hx_deref($e)->params[1];
			$params = _hx_deref($e)->params[0];
			$capturedLocals = $this->duplicate($this->locals);
			$me = $this;
			$f = array(new _hx_lambda(array(&$capturedLocals, &$fexpr, &$me, &$params), "erazor_hscript_EnhancedInterp_0"), 'execute');
			$f1 = Reflect::makeVarArgs($f);
			if($name !== null) {
				$this->variables->set($name, $f1);
			}
			{
				$GLOBALS['%s']->pop();
				return $f1;
			}
		} else {
			$tmp = parent::expr($e);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static $re;
	function __toString() { return 'erazor.hscript.EnhancedInterp'; }
}
erazor_hscript_EnhancedInterp::$re = new EReg("^[^0-9]+(\\d+)", "");
function erazor_hscript_EnhancedInterp_0(&$capturedLocals, &$fexpr, &$me, &$params, $args) {
	{
		$GLOBALS['%s']->push("erazor.hscript.EnhancedInterp::expr@75");
		$__hx__spos = $GLOBALS['%s']->length;
		$old = $me->locals;
		$me->locals = $me->duplicate($capturedLocals);
		{
			$_g1 = 0;
			$_g = $params->length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$me->locals->set(_hx_array_get($params, $i)->name, _hx_anonymous(array("r" => $args[$i])));
				unset($i);
			}
		}
		$r = null;
		try {
			$r = $me->exprReturn($fexpr);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e1 = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$me->locals = $old;
				throw new HException($e1);
			}
		}
		$me->locals = $old;
		{
			$GLOBALS['%s']->pop();
			return $r;
		}
		$GLOBALS['%s']->pop();
	}
}

<?php

// Generated by Haxe 3.4.7
class erazor_HtmlTemplate extends erazor_Template {
	public function __construct($template) {
		if(!isset($this->escape)) $this->escape = array(new _hx_lambda(array(&$this), "erazor_HtmlTemplate_0"), 'execute');
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("erazor.HtmlTemplate::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct($template);
		$this->addHelper("raw", (property_exists("erazor_HtmlTemplate", "raw") ? erazor_HtmlTemplate::$raw: array("erazor_HtmlTemplate", "raw")));
		$GLOBALS['%s']->pop();
	}}
	public function escape($str) { return call_user_func_array($this->escape, array($str)); }
	public $escape = null;
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function raw($str) {
		$GLOBALS['%s']->push("erazor.HtmlTemplate::raw");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new erazor_TString(Std::string($str));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'erazor.HtmlTemplate'; }
}
function erazor_HtmlTemplate_0(&$__hx__this, $str) {
	{
		$GLOBALS['%s']->push("erazor.HtmlTemplate::new");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = StringTools::htmlEscape($str, true);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

<?php

// Generated by Haxe 3.4.7
class tink_streams_StreamBase implements tink_streams_StreamObject{
	public function __construct(){}
	public function next() {
		$GLOBALS['%s']->push("tink.streams.StreamBase::next");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		{
			$tmp = tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis), "tink_streams_StreamBase_0"), 'execute'), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function hforEach($item) {
		$GLOBALS['%s']->push("tink.streams.StreamBase::forEach");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->forEachAsync(array(new _hx_lambda(array(&$item), "tink_streams_StreamBase_1"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function forEachAsync($item) {
		$GLOBALS['%s']->push("tink.streams.StreamBase::forEachAsync");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(true)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function map($item) {
		$GLOBALS['%s']->push("tink.streams.StreamBase::map");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new tink_streams_StreamMapFilter($this, tink_streams__Stream_StreamMap_Impl_::lift($item));
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function mapAsync($item) {
		$GLOBALS['%s']->push("tink.streams.StreamBase::mapAsync");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new tink_streams_StreamMapFilterAsync($this, tink_streams__Stream_StreamMapAsync_Impl_::lift($item));
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function filter($item) {
		$GLOBALS['%s']->push("tink.streams.StreamBase::filter");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new tink_streams_StreamMapFilter($this, tink_streams__Stream_StreamFilter_Impl_::lift($item));
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function filterAsync($item) {
		$GLOBALS['%s']->push("tink.streams.StreamBase::filterAsync");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new tink_streams_StreamMapFilterAsync($this, tink_streams__Stream_StreamFilterAsync_Impl_::lift($item));
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function merge($item) {
		$GLOBALS['%s']->push("tink.streams.StreamBase::merge");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new tink_streams_StreamMapFilter($this, tink_streams__Stream_StreamMerge_Impl_::lift($item));
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function mergeAsync($item) {
		$GLOBALS['%s']->push("tink.streams.StreamBase::mergeAsync");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new tink_streams_StreamMapFilterAsync($this, tink_streams__Stream_StreamMergeAsync_Impl_::lift($item));
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.streams.StreamBase'; }
}
function tink_streams_StreamBase_0(&$_gthis, $cb) {
	{
		$GLOBALS['%s']->push("tink.streams.StreamBase::next@334");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis->hforEach(array(new _hx_lambda(array(&$cb), "tink_streams_StreamBase_2"), 'execute'))->handle(array(new _hx_lambda(array(&$cb), "tink_streams_StreamBase_3"), 'execute'));
		$GLOBALS['%s']->pop();
	}
}
function tink_streams_StreamBase_1(&$item, $x) {
	{
		$GLOBALS['%s']->push("tink.streams.StreamBase::forEach@346");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(call_user_func_array($item, array($x))));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams_StreamBase_2(&$cb, $x) {
	{
		$GLOBALS['%s']->push("tink.streams.StreamBase::mergeAsync@335");
		$__hx__spos = $GLOBALS['%s']->length;
		call_user_func_array($cb, array(tink_streams_StreamStep::Data($x)));
		{
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams_StreamBase_3(&$cb, $o) {
	{
		$GLOBALS['%s']->push("tink.streams.StreamBase::mergeAsync@338");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($o->index) {
		case 0:{
			if(_hx_deref($o)->params[0] === true) {
				call_user_func_array($cb, array(tink_streams_StreamStep::$End));
			}
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			call_user_func_array($cb, array(tink_streams_StreamStep::Fail($e)));
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}

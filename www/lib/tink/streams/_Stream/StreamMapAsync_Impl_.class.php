<?php

// Generated by Haxe 3.4.7
class tink_streams__Stream_StreamMapAsync_Impl_ {
	public function __construct(){}
	static function _new($data, $map) {
		$GLOBALS['%s']->push("tink.streams._Stream.StreamMapAsync_Impl_::_new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new tink_streams_StreamMapFilterAsync($data, tink_streams__Stream_StreamMapAsync_Impl_::lift($map));
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function lift($map) {
		$GLOBALS['%s']->push("tink.streams._Stream.StreamMapAsync_Impl_::lift");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = array(new _hx_lambda(array(&$map), "tink_streams__Stream_StreamMapAsync_Impl__0"), 'execute');
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.streams._Stream.StreamMapAsync_Impl_'; }
}
function tink_streams__Stream_StreamMapAsync_Impl__0(&$map, $x) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.StreamMapAsync_Impl_::lift@475");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = call_user_func_array($map, array($x));
		$ret = $this1->map((property_exists("tink_streams__Stream_Maybe_Impl_", "Some") ? tink_streams__Stream_Maybe_Impl_::$Some: array("tink_streams__Stream_Maybe_Impl_", "Some")));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

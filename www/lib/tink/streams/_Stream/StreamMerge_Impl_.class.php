<?php

// Generated by Haxe 3.4.7
class tink_streams__Stream_StreamMerge_Impl_ {
	public function __construct(){}
	static function _new($data, $merger) {
		$GLOBALS['%s']->push("tink.streams._Stream.StreamMerge_Impl_::_new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = new tink_streams_StreamMapFilter($data, tink_streams__Stream_StreamMerge_Impl_::lift($merger));
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function lift($merger) {
		$GLOBALS['%s']->push("tink.streams._Stream.StreamMerge_Impl_::lift");
		$__hx__spos = $GLOBALS['%s']->length;
		$buffer = (new _hx_array(array()));
		{
			$tmp = array(new _hx_lambda(array(&$buffer, &$merger), "tink_streams__Stream_StreamMerge_Impl__0"), 'execute');
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.streams._Stream.StreamMerge_Impl_'; }
}
function tink_streams__Stream_StreamMerge_Impl__0(&$buffer, &$merger, $x) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.StreamMerge_Impl_::lift@394");
		$__hx__spos = $GLOBALS['%s']->length;
		$buffer->push($x);
		$_g = call_user_func_array($merger, array($buffer));
		switch($_g->index) {
		case 0:{
			$v = _hx_deref($_g)->params[0];
			$buffer = (new _hx_array(array()));
			$this1 = $v;
			{
				$tmp = $this1;
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 1:{
			$GLOBALS['%s']->pop();
			return null;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}

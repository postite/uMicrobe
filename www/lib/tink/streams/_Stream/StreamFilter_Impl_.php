<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx
 */

namespace tink\streams\_Stream;

use \php\Boot;
use \tink\streams\StreamMapFilter;
use \tink\streams\StreamObject;

final class StreamFilter_Impl_ {
	/**
	 * @param StreamObject $data
	 * @param \Closure $filter
	 * 
	 * @return StreamMapFilter
	 */
	static public function _new ($data, $filter) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:373: character 17
		$this1 = new StreamMapFilter($data, StreamFilter_Impl_::lift($filter));
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:373: character 17
		return $this1;
	}


	/**
	 * @param \Closure $filter
	 * 
	 * @return \Closure
	 */
	static public function lift ($filter) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:377: characters 5-78
		return function ($x)  use (&$filter) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:377: characters 32-78
			if ($filter($x)) {
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:377: characters 47-60
				$this1 = $x;
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:377: characters 47-60
				return $this1;
			} else {
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:377: characters 66-78
				return null;
			}
		};
	}
}


Boot::registerClass(StreamFilter_Impl_::class, 'tink.streams._Stream.StreamFilter_Impl_');

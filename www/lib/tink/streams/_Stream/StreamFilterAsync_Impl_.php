<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx
 */

namespace tink\streams\_Stream;

use \tink\streams\StreamMapFilterAsync;
use \php\Boot;
use \tink\streams\StreamObject;

final class StreamFilterAsync_Impl_ {
	/**
	 * @param StreamObject $data
	 * @param \Closure $filter
	 * 
	 * @return StreamMapFilterAsync
	 */
	static public function _new ($data, $filter) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:463: character 17
		$this1 = new StreamMapFilterAsync($data, StreamFilterAsync_Impl_::lift($filter));
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:463: character 17
		return $this1;
	}


	/**
	 * @param \Closure $filter
	 * 
	 * @return \Closure
	 */
	static public function lift ($filter) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:467: characters 5-117
		return function ($x)  use (&$filter) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:467: characters 32-117
			$ret = $filter($x)->map(function ($matches)  use (&$x) {
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:467: characters 72-116
				if ($matches) {
					#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:467: characters 85-98
					$this1 = $x;
					#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:467: characters 85-98
					return $this1;
				} else {
					#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:467: characters 104-116
					return null;
				}
			});
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:467: characters 32-117
			return $ret->gather();
		};
	}
}


Boot::registerClass(StreamFilterAsync_Impl_::class, 'tink.streams._Stream.StreamFilterAsync_Impl_');

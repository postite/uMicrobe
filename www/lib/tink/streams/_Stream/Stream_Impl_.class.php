<?php

// Generated by Haxe 3.4.7
class tink_streams__Stream_Stream_Impl_ {
	public function __construct(){}
	static function later($f) {
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::later");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_streams__Stream_FutureStream($f);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function ofIterator($i) {
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::ofIterator");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_streams_IteratorStream($i, null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function failure($e) {
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::failure");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_streams__Stream_Stream_Impl_::generate(array(new _hx_lambda(array(&$e), "tink_streams__Stream_Stream_Impl__0"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function generate($step) {
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::generate");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_streams_Generator($step);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fold($this1, $start, $reduce) {
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::fold");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$reduce, &$start, &$this1), "tink_streams__Stream_Stream_Impl__1"), 'execute'), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function foldAsync($this1, $start, $reduce) {
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::foldAsync");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$reduce, &$start, &$this1), "tink_streams__Stream_Stream_Impl__2"), 'execute'), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function collect($this1) {
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::collect");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = (new _hx_array(array()));
		{
			$tmp = tink_core__Future_Future_Impl_::_tryMap($this1->hforEach(array(new _hx_lambda(array(&$ret), "tink_streams__Stream_Stream_Impl__3"), 'execute')), array(new _hx_lambda(array(&$ret), "tink_streams__Stream_Stream_Impl__4"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function concat($a, $b) {
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::concat");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_streams_ConcatStream::make((new _hx_array(array($a, $b))));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.streams._Stream.Stream_Impl_'; }
}
function tink_streams__Stream_Stream_Impl__0(&$e) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::failure@16");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_streams_StreamStep::Fail($e)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams__Stream_Stream_Impl__1(&$reduce, &$start, &$this1, $cb) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::fold@22");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1->hforEach(array(new _hx_lambda(array(&$reduce, &$start), "tink_streams__Stream_Stream_Impl__5"), 'execute'))->handle(array(new _hx_lambda(array(&$cb, &$start), "tink_streams__Stream_Stream_Impl__6"), 'execute'));
		$GLOBALS['%s']->pop();
	}
}
function tink_streams__Stream_Stream_Impl__2(&$reduce, &$start, &$this1, $cb) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::foldAsync@35");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1->forEachAsync(array(new _hx_lambda(array(&$reduce, &$start), "tink_streams__Stream_Stream_Impl__7"), 'execute'))->handle(array(new _hx_lambda(array(&$cb, &$start), "tink_streams__Stream_Stream_Impl__8"), 'execute'));
		$GLOBALS['%s']->pop();
	}
}
function tink_streams__Stream_Stream_Impl__3(&$ret, $x) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::collect@48");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret->push($x);
		{
			$GLOBALS['%s']->pop();
			return true;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams__Stream_Stream_Impl__4(&$ret, $_) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::collect@52");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams__Stream_Stream_Impl__5(&$reduce, &$start, $x) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::concat@23");
		$__hx__spos = $GLOBALS['%s']->length;
		$start = call_user_func_array($reduce, array($start, $x));
		{
			$GLOBALS['%s']->pop();
			return true;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams__Stream_Stream_Impl__6(&$cb, &$start, $o) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::concat@26");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		if($o->index === 1) {
			$e = _hx_deref($o)->params[0];
			$tmp = tink_core_Outcome::Failure($e);
		} else {
			$tmp = tink_core_Outcome::Success($start);
		}
		call_user_func_array($cb, array($tmp));
		$GLOBALS['%s']->pop();
	}
}
function tink_streams__Stream_Stream_Impl__7(&$reduce, &$start, $x) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::concat@36");
		$__hx__spos = $GLOBALS['%s']->length;
		$this2 = call_user_func_array($reduce, array($start, $x));
		$ret = $this2->map(array(new _hx_lambda(array(&$start), "tink_streams__Stream_Stream_Impl__9"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams__Stream_Stream_Impl__8(&$cb, &$start, $o) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::concat@38");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		if($o->index === 1) {
			$e = _hx_deref($o)->params[0];
			$tmp = tink_core_Outcome::Failure($e);
		} else {
			$tmp = tink_core_Outcome::Success($start);
		}
		call_user_func_array($cb, array($tmp));
		$GLOBALS['%s']->pop();
	}
}
function tink_streams__Stream_Stream_Impl__9(&$start, $v) {
	{
		$GLOBALS['%s']->push("tink.streams._Stream.Stream_Impl_::concat@37");
		$__hx__spos = $GLOBALS['%s']->length;
		$start = $v;
		{
			$GLOBALS['%s']->pop();
			return true;
		}
		$GLOBALS['%s']->pop();
	}
}

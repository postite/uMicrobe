<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx
 */

namespace tink\streams;

use \tink\core\Outcome;
use \php\Boot;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\_Lazy\LazyConst;

class IteratorStream extends StepWise {
	/**
	 * @var TypedError
	 */
	public $error;
	/**
	 * @var object
	 */
	public $target;


	/**
	 * @param object $target
	 * @param TypedError $error
	 * 
	 * @return void
	 */
	public function __construct ($target, $error = null) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:243: characters 5-25
		$this->target = $target;
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:244: characters 5-23
		$this->error = $error;
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return FutureObject
	 */
	public function forEach ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:257: lines 257-258
		if ($this->error !== null) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:258: characters 14-41
			return new SyncFuture(new LazyConst(Outcome::Failure($this->error)));
		}
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:260: lines 260-262
		while ($this->target->hasNext()) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:261: lines 261-262
			if (!$item($this->target->next())) {
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:262: characters 16-43
				return new SyncFuture(new LazyConst(Outcome::Success(false)));
			}
		}
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:264: characters 12-38
		return new SyncFuture(new LazyConst(Outcome::Success(true)));
	}


	/**
	 * @return FutureObject
	 */
	public function next () {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:248: lines 248-254
		return new SyncFuture(new LazyConst(($this->target->hasNext() ? StreamStep::Data($this->target->next()) : ($this->error === null ? StreamStep::End() : StreamStep::Fail($this->error)))));
	}
}


Boot::registerClass(IteratorStream::class, 'tink.streams.IteratorStream');

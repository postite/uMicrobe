<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx
 */

namespace tink\streams;

use \tink\core\Outcome;
use \php\Boot;
use \tink\streams\_Stream\StreamFilterAsync_Impl_;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\streams\_Stream\StreamMapAsync_Impl_;
use \tink\core\_Future\Future_Impl_;
use \tink\streams\_Stream\StreamMerge_Impl_;
use \tink\streams\_Stream\StreamFilter_Impl_;
use \tink\streams\_Stream\StreamMergeAsync_Impl_;
use \tink\core\_Lazy\LazyConst;
use \tink\streams\_Stream\StreamMap_Impl_;

class StreamBase implements StreamObject {
	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function filter ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:358: characters 12-40
		$this1 = new StreamMapFilter($this, StreamFilter_Impl_::lift($item));
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:358: characters 12-40
		return $this1;
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function filterAsync ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:361: characters 12-45
		$this1 = new StreamMapFilterAsync($this, StreamFilterAsync_Impl_::lift($item));
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:361: characters 12-45
		return $this1;
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return FutureObject
	 */
	public function forEach ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:346: characters 5-66
		return $this->forEachAsync(function ($x)  use (&$item) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:346: characters 45-65
			return new SyncFuture(new LazyConst($item($x)));
		});
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return FutureObject
	 */
	public function forEachAsync ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:349: characters 12-38
		return new SyncFuture(new LazyConst(Outcome::Success(true)));
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function map ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:352: characters 12-37
		$this1 = new StreamMapFilter($this, StreamMap_Impl_::lift($item));
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:352: characters 12-37
		return $this1;
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function mapAsync ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:355: characters 12-42
		$this1 = new StreamMapFilterAsync($this, StreamMapAsync_Impl_::lift($item));
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:355: characters 12-42
		return $this1;
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function merge ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:364: characters 12-39
		$this1 = new StreamMapFilter($this, StreamMerge_Impl_::lift($item));
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:364: characters 12-39
		return $this1;
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function mergeAsync ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:367: characters 12-44
		$this1 = new StreamMapFilterAsync($this, StreamMergeAsync_Impl_::lift($item));
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:367: characters 12-44
		return $this1;
	}


	/**
	 * @return FutureObject
	 */
	public function next () {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:333: lines 333-343
		$_gthis = $this;
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:334: lines 334-343
		return Future_Impl_::async(function ($cb)  use (&$_gthis) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:335: lines 335-342
			$_gthis->forEach(function ($x)  use (&$cb) {
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:336: characters 9-20
				$cb(StreamStep::Data($x));
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:337: characters 9-21
				return false;
			})->handle(function ($o)  use (&$cb) {
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:338: lines 338-342
				switch ($o->index) {
					case 0:
						#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:338: characters 37-38
						if ($o->params[0] === true) {
							#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:339: characters 29-36
							$cb(StreamStep::End());
						}
						break;
					case 1:
						#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:340: characters 22-23
						$e = $o->params[0];
						#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:340: characters 26-37
						$cb(StreamStep::Fail($e));
						break;
				}
			});
		});
	}
}


Boot::registerClass(StreamBase::class, 'tink.streams.StreamBase');

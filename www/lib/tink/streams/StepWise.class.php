<?php

// Generated by Haxe 3.4.7
class tink_streams_StepWise extends tink_streams_StreamBase {
	public function next() {
		$GLOBALS['%s']->push("tink.streams.StepWise::next");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_streams_StreamStep::$End));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function hforEach($item) {
		$GLOBALS['%s']->push("tink.streams.StepWise::forEach");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		{
			$tmp = tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$item), "tink_streams_StepWise_0"), 'execute'), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function forEachAsync($item) {
		$GLOBALS['%s']->push("tink.streams.StepWise::forEachAsync");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		{
			$tmp = tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$item), "tink_streams_StepWise_1"), 'execute'), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.streams.StepWise'; }
}
function tink_streams_StepWise_0(&$_gthis, &$item, $cb) {
	{
		$GLOBALS['%s']->push("tink.streams.StepWise::forEach@274");
		$__hx__spos = $GLOBALS['%s']->length;
		$next = null;
		$next = array(new _hx_lambda(array(&$_gthis, &$cb, &$item, &$next), "tink_streams_StepWise_2"), 'execute');
		$next1 = $next;
		call_user_func($next1);
		$GLOBALS['%s']->pop();
	}
}
function tink_streams_StepWise_1(&$_gthis, &$item, $cb) {
	{
		$GLOBALS['%s']->push("tink.streams.StepWise::forEachAsync@301");
		$__hx__spos = $GLOBALS['%s']->length;
		$next = null;
		$next = array(new _hx_lambda(array(&$_gthis, &$cb, &$item, &$next), "tink_streams_StepWise_3"), 'execute');
		$next1 = $next;
		call_user_func($next1);
		$GLOBALS['%s']->pop();
	}
}
function tink_streams_StepWise_2(&$_gthis, &$cb, &$item, &$next) {
	{
		$GLOBALS['%s']->push("tink.streams.StepWise::forEachAsync@275");
		$__hx__spos = $GLOBALS['%s']->length;
		while(true) {
			$touched = false;
			$_gthis->next()->handle(array(new _hx_lambda(array(&$cb, &$item, &$next, &$touched), "tink_streams_StepWise_4"), 'execute'));
			if(!$touched) {
				$touched = true;
				break;
			}
			unset($touched);
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams_StepWise_3(&$_gthis, &$cb, &$item, &$next) {
	{
		$GLOBALS['%s']->push("tink.streams.StepWise::forEachAsync@302");
		$__hx__spos = $GLOBALS['%s']->length;
		while(true) {
			$touched = false;
			$_gthis->next()->handle(array(new _hx_lambda(array(&$cb, &$item, &$next, &$touched), "tink_streams_StepWise_5"), 'execute'));
			if(!$touched) {
				$touched = true;
				break;
			}
			unset($touched);
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams_StepWise_4(&$cb, &$item, &$next, &$touched, $step) {
	{
		$GLOBALS['%s']->push("tink.streams.StepWise::forEachAsync@278");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($step->index) {
		case 0:{
			$data = _hx_deref($step)->params[0];
			if(!call_user_func_array($item, array($data))) {
				call_user_func_array($cb, array(tink_core_Outcome::Success(false)));
			} else {
				if($touched) {
					call_user_func($next);
				} else {
					$touched = true;
				}
			}
		}break;
		case 1:{
			call_user_func_array($cb, array(tink_core_Outcome::Success(true)));
		}break;
		case 2:{
			$e = _hx_deref($step)->params[0];
			call_user_func_array($cb, array(tink_core_Outcome::Failure($e)));
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams_StepWise_5(&$cb, &$item, &$next, &$touched, $step) {
	{
		$GLOBALS['%s']->push("tink.streams.StepWise::forEachAsync@305");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($step->index) {
		case 0:{
			$data = _hx_deref($step)->params[0];
			call_user_func_array($item, array($data))->handle(array(new _hx_lambda(array(&$cb, &$next, &$touched), "tink_streams_StepWise_6"), 'execute'));
		}break;
		case 1:{
			call_user_func_array($cb, array(tink_core_Outcome::Success(true)));
		}break;
		case 2:{
			$e = _hx_deref($step)->params[0];
			call_user_func_array($cb, array(tink_core_Outcome::Failure($e)));
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_streams_StepWise_6(&$cb, &$next, &$touched, $resume) {
	{
		$GLOBALS['%s']->push("tink.streams.StepWise::forEachAsync@307");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$resume) {
			call_user_func_array($cb, array(tink_core_Outcome::Success(false)));
		} else {
			if($touched) {
				call_user_func($next);
			} else {
				$touched = true;
			}
		}
		$GLOBALS['%s']->pop();
	}
}

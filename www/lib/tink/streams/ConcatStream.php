<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx
 */

namespace tink\streams;

use \tink\core\Outcome;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\_Future\Future_Impl_;
use \tink\core\_Lazy\LazyConst;

class ConcatStream extends StreamBase {
	/**
	 * @var \Array_hx
	 */
	public $parts;


	/**
	 * @param \Array_hx $parts
	 * 
	 * @return StreamObject
	 */
	static public function make ($parts) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:223: characters 5-19
		$flat = new \Array_hx();
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:225: lines 225-231
		$_g = 0;
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:225: lines 225-231
		while ($_g < $parts->length) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:225: characters 10-11
			$p = ($parts->arr[$_g] ?? null);
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:225: lines 225-231
			$_g = $_g + 1;
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:226: lines 226-231
			if (($p instanceof ConcatStream)) {
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:227: lines 227-228
				$_g1 = 0;
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:227: lines 227-228
				$_g2 = $p->parts;
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:227: lines 227-228
				while ($_g1 < $_g2->length) {
					#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:227: characters 14-15
					$p1 = ($_g2->arr[$_g1] ?? null);
					#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:227: lines 227-228
					$_g1 = $_g1 + 1;
					#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:228: characters 11-23
					$flat->arr[$flat->length] = $p1;
					#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:228: characters 11-23
					++$flat->length;

				}
			} else {
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:231: characters 9-21
				$flat->arr[$flat->length] = $p;
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:231: characters 9-21
				++$flat->length;
			}
		}

		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:233: characters 5-34
		return new ConcatStream($flat);
	}


	/**
	 * @param \Array_hx $parts
	 * 
	 * @return void
	 */
	public function __construct ($parts) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:173: characters 5-23
		$this->parts = $parts;
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function filter ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:176: characters 5-57
		return $this->transform(function ($x)  use (&$item) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:176: characters 35-56
			return $x->filter($item);
		});
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function filterAsync ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:179: characters 5-62
		return $this->transform(function ($x)  use (&$item) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:179: characters 35-61
			return $x->filterAsync($item);
		});
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return FutureObject
	 */
	public function forEach ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:217: characters 5-56
		return $this->withAll(function ($s)  use (&$item) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:217: characters 33-55
			return $s->forEach($item);
		});
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return FutureObject
	 */
	public function forEachAsync ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:220: characters 5-61
		return $this->withAll(function ($s)  use (&$item) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:220: characters 33-60
			return $s->forEachAsync($item);
		});
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function map ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:182: characters 5-54
		return $this->transform(function ($x)  use (&$item) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:182: characters 35-53
			return $x->map($item);
		});
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function mapAsync ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:185: characters 5-59
		return $this->transform(function ($x)  use (&$item) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:185: characters 35-58
			return $x->mapAsync($item);
		});
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function merge ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:188: characters 5-56
		return $this->transform(function ($x)  use (&$item) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:188: characters 35-55
			return $x->merge($item);
		});
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return StreamObject
	 */
	public function mergeAsync ($item) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:191: characters 5-61
		return $this->transform(function ($x)  use (&$item) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:191: characters 35-60
			return $x->mergeAsync($item);
		});
	}


	/**
	 * @param \Closure $t
	 * 
	 * @return StreamObject
	 */
	public function transform ($t) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 29-52
		$_g = new \Array_hx();
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 30-51
		$_g1 = 0;
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 30-51
		$_g2 = $this->parts;
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 30-51
		while ($_g1 < $_g2->length) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 35-36
			$p = ($_g2->arr[$_g1] ?? null);
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 30-51
			$_g1 = $_g1 + 1;
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 47-51
			$x = $t($p);
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 47-51
			$_g->arr[$_g->length] = $x;
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 47-51
			++$_g->length;

		}

		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:194: characters 5-53
		return new ConcatStream($_g);
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	public function withAll ($f) {
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:196: lines 196-214
		$_gthis = $this;
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:197: characters 19-24
		$_g = $this->parts;
		#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:197: characters 19-24
		if ($_g->length === 0) {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:199: characters 9-35
			return new SyncFuture(new LazyConst(Outcome::Success(true)));
		} else {
			#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:201: lines 201-213
			return Future_Impl_::async(function ($cb)  use (&$f, &$_gthis) {
				#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:202: lines 202-212
				$f(($_gthis->parts->arr[0] ?? null))->handle(function ($x)  use (&$f, &$_gthis, &$cb) {
					#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:202: lines 202-212
					switch ($x->index) {
						case 0:
							#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:203: characters 26-27
							$v = $x->params[0];
							#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:204: lines 204-209
							if ($v) {
								#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:205: characters 17-30
								$_this = $_gthis->parts;
								#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:205: characters 17-30
								if ($_this->length > 0) {
									#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:205: characters 17-30
									$_this->length--;
								}
								#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:205: characters 17-30
								array_shift($_this->arr);

								#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:206: characters 17-38
								$_gthis->withAll($f)->handle($cb);
							} else {
								#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:209: characters 17-22
								$cb($x);
							}
							break;
						case 1:
							#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:210: characters 26-27
							$e = $x->params[0];
							#/usr/local/lib/haxe/lib/tink_streams/0,2,1/src/tink/streams/Stream.hx:211: characters 15-20
							$cb($x);
							break;
					}
				});
			});
		}
	}
}


Boot::registerClass(ConcatStream::class, 'tink.streams.ConcatStream');

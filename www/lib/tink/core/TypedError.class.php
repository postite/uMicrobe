<?php

// Generated by Haxe 3.4.7
class tink_core_TypedError {
	public function __construct($code = null, $message, $pos = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.core.TypedError::new");
		$__hx__spos = $GLOBALS['%s']->length;
		if($code === null) {
			$code = 500;
		}
		$this->isTinkError = true;
		$this->code = $code;
		$this->message = $message;
		$this->pos = $pos;
		$this->exceptionStack = (new _hx_array(array()));
		$this->callStack = (new _hx_array(array()));
		$GLOBALS['%s']->pop();
	}}
	public $message;
	public $code;
	public $data;
	public $pos;
	public $callStack;
	public $exceptionStack;
	public $isTinkError;
	public function printPos() {
		$GLOBALS['%s']->push("tink.core.TypedError::printPos");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_string_or_null($this->pos->className) . "." . _hx_string_or_null($this->pos->methodName) . ":" . _hx_string_rec($this->pos->lineNumber, "");
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function toString() {
		$GLOBALS['%s']->push("tink.core.TypedError::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = "Error#" . _hx_string_rec($this->code, "") . ": " . _hx_string_or_null($this->message);
		if(_hx_field($this, "pos") !== null) {
			$ret = _hx_string_or_null($ret) . _hx_string_or_null((" @ " . _hx_string_or_null($this->printPos())));
		}
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	public function throwSelf() {
		$GLOBALS['%s']->push("tink.core.TypedError::throwSelf");
		$__hx__spos = $GLOBALS['%s']->length;
		php_Lib::rethrow($this);
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function withData($code = null, $message, $data, $pos = null) {
		$GLOBALS['%s']->push("tink.core.TypedError::withData");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_core_TypedError::typed($code, $message, $data, $pos);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function typed($code = null, $message, $data, $pos = null) {
		$GLOBALS['%s']->push("tink.core.TypedError::typed");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = new tink_core_TypedError($code, $message, $pos);
		$ret->data = $data;
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	static function asError($v) {
		$GLOBALS['%s']->push("tink.core.TypedError::asError");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Std::instance($v, _hx_qtype("tink.core.TypedError"));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function catchExceptions($f, $report = null, $pos = null) {
		$GLOBALS['%s']->push("tink.core.TypedError::catchExceptions");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			{
				$tmp = tink_core_Outcome::Success(call_user_func($f));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$_g = tink_core_TypedError::asError($e);
				$tmp = null;
				if($_g === null) {
					if($report === null) {
						$tmp = tink_core_TypedError::withData(null, "Unexpected Error", $e, $pos);
					} else {
						$tmp = call_user_func_array($report, array($e));
					}
				} else {
					$e1 = $_g;
					$tmp = $e1;
				}
				{
					$tmp2 = tink_core_Outcome::Failure($tmp);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	static function reporter($code = null, $message, $pos = null) {
		$GLOBALS['%s']->push("tink.core.TypedError::reporter");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = array(new _hx_lambda(array(&$code, &$message, &$pos), "tink_core_TypedError_0"), 'execute');
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function rethrow($any) {
		$GLOBALS['%s']->push("tink.core.TypedError::rethrow");
		$__hx__spos = $GLOBALS['%s']->length;
		php_Lib::rethrow($any);
		{
			$GLOBALS['%s']->pop();
			return $any;
		}
		$GLOBALS['%s']->pop();
	}
	static function tryFinally($f, $cleanup) {
		$GLOBALS['%s']->push("tink.core.TypedError::tryFinally");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			$ret = call_user_func($f);
			call_user_func($cleanup);
			{
				$GLOBALS['%s']->pop();
				return $ret;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				call_user_func($cleanup);
				php_Lib::rethrow($e);
				{
					$GLOBALS['%s']->pop();
					return $e;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return $this->toString(); }
}
function tink_core_TypedError_0(&$code, &$message, &$pos, $e) {
	{
		$GLOBALS['%s']->push("tink.core.TypedError::reporter@133");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_core_TypedError::withData($code, $message, $e, $pos);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

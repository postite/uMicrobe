<?php

// Generated by Haxe 3.4.7
class tink_core_OptionTools {
	public function __construct(){}
	static function force($o, $pos = null) {
		$GLOBALS['%s']->push("tink.core.OptionTools::force");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o->index === 0) {
			$v = _hx_deref($o)->params[0];
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		} else {
			throw new HException(new tink_core_TypedError(404, "Some value expected but none found", $pos));
		}
		$GLOBALS['%s']->pop();
	}
	static function hor($o, $l) {
		$GLOBALS['%s']->push("tink.core.OptionTools::or");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o->index === 0) {
			$v = _hx_deref($o)->params[0];
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		} else {
			$tmp = $l->get();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function orNull($o) {
		$GLOBALS['%s']->push("tink.core.OptionTools::orNull");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o->index === 0) {
			$v = _hx_deref($o)->params[0];
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		} else {
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	static function filter($o, $f) {
		$GLOBALS['%s']->push("tink.core.OptionTools::filter");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o->index === 0) {
			$_hx_tmp = call_user_func_array($f, array(_hx_deref($o)->params[0]));
			if($_hx_tmp === false) {
				$tmp = haxe_ds_Option::$None;
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$GLOBALS['%s']->pop();
				return $o;
			}
		} else {
			$GLOBALS['%s']->pop();
			return $o;
		}
		$GLOBALS['%s']->pop();
	}
	static function satisfies($o, $f) {
		$GLOBALS['%s']->push("tink.core.OptionTools::satisfies");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o->index === 0) {
			$v = _hx_deref($o)->params[0];
			{
				$tmp = call_user_func_array($f, array($v));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
	static function equals($o, $v) {
		$GLOBALS['%s']->push("tink.core.OptionTools::equals");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o->index === 0) {
			$v1 = _hx_deref($o)->params[0];
			{
				$tmp = (is_object($_t = $v1) && ($_t instanceof Enum) ? $_t == $v : _hx_equal($_t, $v));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
	static function map($o, $f) {
		$GLOBALS['%s']->push("tink.core.OptionTools::map");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o->index === 0) {
			$v = _hx_deref($o)->params[0];
			{
				$tmp = haxe_ds_Option::Some(call_user_func_array($f, array($v)));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$tmp = haxe_ds_Option::$None;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function flatMap($o, $f) {
		$GLOBALS['%s']->push("tink.core.OptionTools::flatMap");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o->index === 0) {
			$v = _hx_deref($o)->params[0];
			{
				$tmp = call_user_func_array($f, array($v));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$tmp = haxe_ds_Option::$None;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function iterator($o) {
		$GLOBALS['%s']->push("tink.core.OptionTools::iterator");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core_OptionIter($o);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function toArray($o) {
		$GLOBALS['%s']->push("tink.core.OptionTools::toArray");
		$__hx__spos = $GLOBALS['%s']->length;
		if($o->index === 0) {
			$v = _hx_deref($o)->params[0];
			{
				$tmp = (new _hx_array(array($v)));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$tmp = (new _hx_array(array()));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.core.OptionTools'; }
}

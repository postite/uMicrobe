<?php

// Generated by Haxe 3.4.7
class tink_core__Future_SyncFuture implements tink_core__Future_FutureObject{
	public function __construct($value) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.core._Future.SyncFuture::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->value = $value;
		$GLOBALS['%s']->pop();
	}}
	public $value;
	public function map($f) {
		$GLOBALS['%s']->push("tink.core._Future.SyncFuture::map");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture($this->value->map($f));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function flatMap($f) {
		$GLOBALS['%s']->push("tink.core._Future.SyncFuture::flatMap");
		$__hx__spos = $GLOBALS['%s']->length;
		$l = $this->value->map($f);
		{
			$tmp = new tink_core__Future_SimpleFuture(array(new _hx_lambda(array(&$l), "tink_core__Future_SyncFuture_0"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function handle($cb) {
		$GLOBALS['%s']->push("tink.core._Future.SyncFuture::handle");
		$__hx__spos = $GLOBALS['%s']->length;
		tink_core__Callback_Callback_Impl_::invoke($cb, $this->value->get());
		{
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	public function eager() {
		$GLOBALS['%s']->push("tink.core._Future.SyncFuture::eager");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function gather() {
		$GLOBALS['%s']->push("tink.core._Future.SyncFuture::gather");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.core._Future.SyncFuture'; }
}
function tink_core__Future_SyncFuture_0(&$l, $cb) {
	{
		$GLOBALS['%s']->push("tink.core._Future.SyncFuture::flatMap@237");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $l->get()->handle($cb);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Future.hx
 */

namespace tink\core\_Future;

use \php\Boot;
use \tink\core\_Callback\LinkObject;
use \php\_Boot\HxAnon;

interface FutureObject {
	/**
	 *  Makes this future eager.
	 *  Futures are lazy by default, i.e. it does not try to fetch the result until someone `handle` it
	 * 
	 * @return FutureObject
	 */
	public function eager () ;


	/**
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	public function flatMap ($f) ;


	/**
	 *  Caches the result to ensure the underlying tranform is performed once only.
	 *  Useful for tranformed futures, such as product of `map` and `flatMap`
	 *  so that the transformation function will not be invoked for every callback
	 * 
	 * @return FutureObject
	 */
	public function gather () ;


	/**
	 *  Registers a callback to handle the future result.
	 *  If the result is already available, the callback will be invoked immediately.
	 *  @return A `CallbackLink` instance that can be used to cancel the callback, no effect if the callback is already invoked
	 * 
	 * @param \Closure $callback
	 * 
	 * @return LinkObject
	 */
	public function handle ($callback) ;


	/**
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	public function map ($f) ;
}


Boot::registerClass(FutureObject::class, 'tink.core._Future.FutureObject');
Boot::registerMeta(FutureObject::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));

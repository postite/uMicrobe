<?php

// Generated by Haxe 3.4.7
class tink_core__Future_NestedFuture implements tink_core__Future_FutureObject{
	public function __construct($outer) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->outer = $outer;
		$GLOBALS['%s']->pop();
	}}
	public $outer;
	public function map($f) {
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::map");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $this->outer->flatMap(array(new _hx_lambda(array(&$f), "tink_core__Future_NestedFuture_0"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function flatMap($f) {
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::flatMap");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $this->outer->flatMap(array(new _hx_lambda(array(&$f), "tink_core__Future_NestedFuture_1"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function gather() {
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::gather");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_core_FutureTrigger::gatherFuture($this);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function eager() {
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::eager");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = tink_core_FutureTrigger::gatherFuture($this);
		$ret->handle(tink_core__Callback_Callback_Impl_::fromNiladic(array(new _hx_lambda(array(), "tink_core__Future_NestedFuture_2"), 'execute')));
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	public function handle($cb) {
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::handle");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = null;
		$ret = $this->outer->handle(array(new _hx_lambda(array(&$cb, &$ret), "tink_core__Future_NestedFuture_3"), 'execute'));
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.core._Future.NestedFuture'; }
}
function tink_core__Future_NestedFuture_0(&$f, $inner) {
	{
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::map@288");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret1 = $inner->map($f);
		{
			$tmp = $ret1->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Future_NestedFuture_1(&$f, $inner) {
	{
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::flatMap@291");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret1 = $inner->flatMap($f);
		{
			$tmp = $ret1->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Future_NestedFuture_2() {
	{
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::eager@298");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Future_NestedFuture_3(&$cb, &$ret, $inner) {
	{
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::handle@304");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $inner->handle(array(new _hx_lambda(array(&$cb), "tink_core__Future_NestedFuture_4"), 'execute'));
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Future_NestedFuture_4(&$cb, $result) {
	{
		$GLOBALS['%s']->push("tink.core._Future.NestedFuture::handle@305");
		$__hx__spos = $GLOBALS['%s']->length;
		tink_core__Callback_Callback_Impl_::invoke($cb, $result);
		$GLOBALS['%s']->pop();
	}
}

<?php

// Generated by Haxe 3.4.7
class tink_core_SignalTrigger implements tink_core_SignalObject{
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.core.SignalTrigger::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = (new _hx_array(array()));
		$this->handlers = $this1;
		$GLOBALS['%s']->pop();
	}}
	public $handlers;
	public function trigger($event) {
		$GLOBALS['%s']->push("tink.core.SignalTrigger::trigger");
		$__hx__spos = $GLOBALS['%s']->length;
		tink_core__Callback_CallbackList_Impl_::invoke($this->handlers, $event);
		$GLOBALS['%s']->pop();
	}
	public function getLength() {
		$GLOBALS['%s']->push("tink.core.SignalTrigger::getLength");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->handlers->length;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function handle($cb) {
		$GLOBALS['%s']->push("tink.core.SignalTrigger::handle");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_core__Callback_CallbackList_Impl_::add($this->handlers, $cb);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function clear() {
		$GLOBALS['%s']->push("tink.core.SignalTrigger::clear");
		$__hx__spos = $GLOBALS['%s']->length;
		tink_core__Callback_CallbackList_Impl_::clear($this->handlers);
		$GLOBALS['%s']->pop();
	}
	public function asSignal() {
		$GLOBALS['%s']->push("tink.core.SignalTrigger::asSignal");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.core.SignalTrigger'; }
}

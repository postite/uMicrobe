<?php

// Generated by Haxe 3.4.7
class tink_core__Lazy_LazyFunc implements tink_core__Lazy_LazyObject{
	public function __construct($f) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.core._Lazy.LazyFunc::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->busy = false;
		$this->f = $f;
		$GLOBALS['%s']->pop();
	}}
	public $f;
	public $result;
	public $busy;
	public function get() {
		$GLOBALS['%s']->push("tink.core._Lazy.LazyFunc::get");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->busy) {
			throw new HException(new tink_core_TypedError(null, "circular lazyness", _hx_anonymous(array("fileName" => "Lazy.hx", "lineNumber" => 52, "className" => "tink.core._Lazy.LazyFunc", "methodName" => "get"))));
		}
		if($this->f !== null) {
			$this->busy = true;
			$this->result = $this->f();
			$this->f = null;
			$this->busy = false;
		}
		{
			$tmp = $this->result;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function map($f) {
		$GLOBALS['%s']->push("tink.core._Lazy.LazyFunc::map");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		{
			$tmp = new tink_core__Lazy_LazyFunc(array(new _hx_lambda(array(&$_gthis, &$f), "tink_core__Lazy_LazyFunc_0"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function flatMap($f) {
		$GLOBALS['%s']->push("tink.core._Lazy.LazyFunc::flatMap");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		{
			$tmp = new tink_core__Lazy_LazyFunc(array(new _hx_lambda(array(&$_gthis, &$f), "tink_core__Lazy_LazyFunc_1"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.core._Lazy.LazyFunc'; }
}
function tink_core__Lazy_LazyFunc_0(&$_gthis, &$f) {
	{
		$GLOBALS['%s']->push("tink.core._Lazy.LazyFunc::map@63");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $_gthis->get();
		{
			$tmp2 = call_user_func_array($f, array($tmp));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Lazy_LazyFunc_1(&$_gthis, &$f) {
	{
		$GLOBALS['%s']->push("tink.core._Lazy.LazyFunc::flatMap@66");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = $_gthis->get();
		$this2 = call_user_func_array($f, array($this1));
		{
			$tmp = $this2->get();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

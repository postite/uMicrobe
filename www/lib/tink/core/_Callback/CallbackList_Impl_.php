<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx
 */

namespace tink\core\_Callback;

use \php\Boot;

final class CallbackList_Impl_ {


	/**
	 * @return \Array_hx
	 */
	static public function _new () {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:140: character 17
		$this1 = new \Array_hx();
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:140: character 17
		return $this1;
	}


	/**
	 * @param \Array_hx $this
	 * @param \Closure $cb
	 * 
	 * @return LinkObject
	 */
	static public function add ($this1, $cb) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:147: characters 5-39
		$node = new ListCell($cb, $this1);
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:148: characters 5-20
		$this1->arr[$this1->length] = $node;
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:148: characters 5-20
		++$this1->length;

		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:149: characters 5-16
		return $node;
	}


	/**
	 * @param \Array_hx $this
	 * 
	 * @return void
	 */
	static public function clear ($this1) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:157: lines 157-158
		$_g = 0;
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:157: lines 157-158
		$_g1 = $this1->splice(0, $this1->length);
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:157: lines 157-158
		while ($_g < $_g1->length) {
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:157: characters 10-14
			$cell = ($_g1->arr[$_g] ?? null);
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:157: lines 157-158
			$_g = $_g + 1;
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:158: characters 7-19
			$cell->clear();
		}
	}


	/**
	 * @param \Array_hx $this
	 * 
	 * @return int
	 */
	static public function get_length ($this1) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:144: characters 5-23
		return $this1->length;
	}


	/**
	 * @param \Array_hx $this
	 * @param mixed $data
	 * 
	 * @return void
	 */
	static public function invoke ($this1, $data) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:153: lines 153-154
		$_g = 0;
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:153: lines 153-154
		$_g1 = $this1->copy();
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:153: lines 153-154
		while ($_g < $_g1->length) {
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:153: characters 10-14
			$cell = ($_g1->arr[$_g] ?? null);
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:153: lines 153-154
			$_g = $_g + 1;
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:154: characters 7-24
			if ($cell->cb !== null) {
				#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:154: characters 7-24
				Callback_Impl_::invoke($cell->cb, $data);
			}
		}
	}
}


Boot::registerClass(CallbackList_Impl_::class, 'tink.core._Callback.CallbackList_Impl_');
Boot::registerGetters('tink\\core\\_Callback\\CallbackList_Impl_', [
	'length' => true
]);

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx
 */

namespace tink\core\_Callback;

use \php\Boot;

final class CallbackLink_Impl_ {
	/**
	 * @param \Closure $link
	 * 
	 * @return LinkObject
	 */
	static public function _new ($link) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:59: character 10
		$this1 = new SimpleLink($link);
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:59: character 10
		return $this1;
	}


	/**
	 * @param LinkObject $this
	 * 
	 * @return void
	 */
	static public function cancel ($this1) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:63: characters 5-38
		if ($this1 !== null) {
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:63: characters 23-38
			$this1->dissolve();
		}
	}


	/**
	 * @param LinkObject $this
	 * 
	 * @return void
	 */
	static public function dissolve ($this1) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:66: characters 5-13
		if ($this1 !== null) {
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:66: characters 5-13
			$this1->dissolve();
		}
	}


	/**
	 * @param \Closure $f
	 * 
	 * @return LinkObject
	 */
	static public function fromFunction ($f) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:72: characters 12-31
		$this1 = new SimpleLink($f);
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:72: characters 12-31
		return $this1;
	}


	/**
	 * @param \Array_hx $callbacks
	 * 
	 * @return LinkObject
	 */
	static public function fromMany ($callbacks) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:78: characters 12-73
		$this1 = new SimpleLink(function ()  use (&$callbacks) {
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:78: characters 37-72
			$_g = 0;
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:78: characters 37-72
			while ($_g < $callbacks->length) {
				#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:78: characters 42-44
				$cb = ($callbacks->arr[$_g] ?? null);
				#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:78: characters 37-72
				$_g = $_g + 1;
				#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:78: characters 59-72
				if ($cb !== null) {
					#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:78: characters 59-72
					$cb->dissolve();
				}
			}
		});
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:78: characters 12-73
		return $this1;
	}


	/**
	 * @param LinkObject $a
	 * @param LinkObject $b
	 * 
	 * @return LinkObject
	 */
	static public function join ($a, $b) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:75: characters 5-30
		return new LinkPair($a, $b);
	}


	/**
	 * @param LinkObject $this
	 * 
	 * @return \Closure
	 */
	static public function toCallback ($this1) {
		#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:69: characters 5-40
		return function ($_)  use (&$this1) {
			#/usr/local/lib/haxe/lib/tink_core/1,17,0/src/tink/core/Callback.hx:69: characters 25-40
			$this1->dissolve();
		};
	}
}


Boot::registerClass(CallbackLink_Impl_::class, 'tink.core._Callback.CallbackLink_Impl_');

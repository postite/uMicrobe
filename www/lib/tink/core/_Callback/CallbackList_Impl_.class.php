<?php

// Generated by Haxe 3.4.7
class tink_core__Callback_CallbackList_Impl_ {
	public function __construct(){}
	static function _new() {
		$GLOBALS['%s']->push("tink.core._Callback.CallbackList_Impl_::_new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = (new _hx_array(array()));
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function get_length($this1) {
		$GLOBALS['%s']->push("tink.core._Callback.CallbackList_Impl_::get_length");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1->length;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function add($this1, $cb) {
		$GLOBALS['%s']->push("tink.core._Callback.CallbackList_Impl_::add");
		$__hx__spos = $GLOBALS['%s']->length;
		$node = new tink_core__Callback_ListCell($cb, $this1);
		$this1->push($node);
		{
			$GLOBALS['%s']->pop();
			return $node;
		}
		$GLOBALS['%s']->pop();
	}
	static function invoke($this1, $data) {
		$GLOBALS['%s']->push("tink.core._Callback.CallbackList_Impl_::invoke");
		$__hx__spos = $GLOBALS['%s']->length;
		$_g = 0;
		$_g1 = $this1->copy();
		while($_g < $_g1->length) {
			$cell = $_g1[$_g];
			$_g = $_g + 1;
			if($cell->cb !== null) {
				tink_core__Callback_Callback_Impl_::invoke((property_exists($cell, "cb") ? $cell->cb: array($cell, "cb")), $data);
			}
			unset($cell);
		}
		$GLOBALS['%s']->pop();
	}
	static function clear($this1) {
		$GLOBALS['%s']->push("tink.core._Callback.CallbackList_Impl_::clear");
		$__hx__spos = $GLOBALS['%s']->length;
		$_g = 0;
		$_g1 = $this1->splice(0, $this1->length);
		while($_g < $_g1->length) {
			$cell = $_g1[$_g];
			$_g = $_g + 1;
			$cell->clear();
			unset($cell);
		}
		$GLOBALS['%s']->pop();
	}
	static $__properties__ = array("get_length" => "get_length");
	function __toString() { return 'tink.core._Callback.CallbackList_Impl_'; }
}

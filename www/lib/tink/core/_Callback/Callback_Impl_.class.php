<?php

// Generated by Haxe 3.4.7
class tink_core__Callback_Callback_Impl_ {
	public function __construct(){}
	static function _new($f) {
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::_new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = $f;
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function toFunction($this1) {
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::toFunction");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $this1;
		}
		$GLOBALS['%s']->pop();
	}
	static $depth = 0;
	static $MAX_DEPTH = 1000;
	static function invoke($this1, $data) {
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::invoke");
		$__hx__spos = $GLOBALS['%s']->length;
		if(tink_core__Callback_Callback_Impl_::$depth < 1000) {
			tink_core__Callback_Callback_Impl_::$depth++;
			call_user_func_array($this1, array($data));
			tink_core__Callback_Callback_Impl_::$depth--;
		} else {
			$_e = $this1;
			$f = array(new _hx_lambda(array(&$_e), "tink_core__Callback_Callback_Impl__0"), 'execute');
			$a1 = $data;
			tink_core__Callback_Callback_Impl_::defer(array(new _hx_lambda(array(&$a1, &$f), "tink_core__Callback_Callback_Impl__1"), 'execute'));
		}
		$GLOBALS['%s']->pop();
	}
	static function ignore($cb) {
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::ignore");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_core__Callback_Callback_Impl_::fromNiladic(array(new _hx_lambda(array(&$cb), "tink_core__Callback_Callback_Impl__2"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromNiladic($f) {
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::fromNiladic");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = array(new _hx_lambda(array(&$f), "tink_core__Callback_Callback_Impl__3"), 'execute');
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromMany($callbacks) {
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::fromMany");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = array(new _hx_lambda(array(&$callbacks), "tink_core__Callback_Callback_Impl__4"), 'execute');
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function defer($f) {
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::defer");
		$__hx__spos = $GLOBALS['%s']->length;
		haxe_Timer::delay($f, 0);
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.core._Callback.Callback_Impl_'; }
}
function tink_core__Callback_Callback_Impl__0(&$_e, $data1) {
	{
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::invoke@19");
		$__hx__spos = $GLOBALS['%s']->length;
		tink_core__Callback_Callback_Impl_::invoke($_e, $data1);
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Callback_Callback_Impl__1(&$a1, &$f) {
	{
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::invoke@19");
		$__hx__spos = $GLOBALS['%s']->length;
		call_user_func_array($f, array($a1));
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Callback_Callback_Impl__2(&$cb) {
	{
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::ignore@22");
		$__hx__spos = $GLOBALS['%s']->length;
		tink_core__Callback_Callback_Impl_::invoke($cb, tink_core_Noise::$Noise);
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Callback_Callback_Impl__3(&$f, $r) {
	{
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::fromNiladic@25");
		$__hx__spos = $GLOBALS['%s']->length;
		call_user_func($f);
		$GLOBALS['%s']->pop();
	}
}
function tink_core__Callback_Callback_Impl__4(&$callbacks, $v) {
	{
		$GLOBALS['%s']->push("tink.core._Callback.Callback_Impl_::fromMany@29");
		$__hx__spos = $GLOBALS['%s']->length;
		$_g = 0;
		while($_g < $callbacks->length) {
			$callback = $callbacks[$_g];
			$_g = $_g + 1;
			tink_core__Callback_Callback_Impl_::invoke($callback, $v);
			unset($callback);
		}
		$GLOBALS['%s']->pop();
	}
}

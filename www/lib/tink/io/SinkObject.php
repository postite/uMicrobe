<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx
 */

namespace tink\io;

use \php\Boot;
use \tink\core\_Future\FutureObject;
use \php\_Boot\HxAnon;

interface SinkObject {
	/**
	 * @return FutureObject
	 */
	public function close () ;


	/**
	 * Ends the sink with the contents of the supplied buffer.
	 *
	 * The default implementation will actually just use write and close,
	 * but some implementations may leverage pecularities of the underlying stream to optimize the procedure.
	 *
	 * Note that if the sink ends on its own before all data is written, the buffer will contain any remaining data.
	 * 
	 * @param Buffer $from
	 * 
	 * @return FutureObject
	 */
	public function finish ($from) ;


	/**
	 * @param \Closure $onError
	 * 
	 * @return IdealSinkObject
	 */
	public function idealize ($onError) ;


	/**
	 * Writes bytes to this sink.
	 * Note that a Progress.EOF can mean two things:
	 *
	 * - depletion of a readonly buffer, which is the case if `from.available == 0 && !from.writable`
	 * - end of the sink itself
	 * 
	 * @param Buffer $from
	 * 
	 * @return FutureObject
	 */
	public function write ($from) ;
}


Boot::registerClass(SinkObject::class, 'tink.io.SinkObject');
Boot::registerMeta(SinkObject::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));

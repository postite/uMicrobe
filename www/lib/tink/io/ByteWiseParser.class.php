<?php

// Generated by Haxe 3.4.7
class tink_io_ByteWiseParser implements tink_io_StreamParser{
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.io.ByteWiseParser::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->resume = tink_core_Outcome::Success(haxe_ds_Option::$None);
		$GLOBALS['%s']->pop();
	}}
	public $result;
	public $resume;
	public function minSize() {
		$GLOBALS['%s']->push("tink.io.ByteWiseParser::minSize");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return 1;
		}
		$GLOBALS['%s']->pop();
	}
	public function read($c) {
		$GLOBALS['%s']->push("tink.io.ByteWiseParser::read");
		$__hx__spos = $GLOBALS['%s']->length;
		throw new HException("not implemented");
		$GLOBALS['%s']->pop();
	}
	public function eof() {
		$GLOBALS['%s']->push("tink.io.ByteWiseParser::eof");
		$__hx__spos = $GLOBALS['%s']->length;
		$_g = $this->read(-1);
		switch($_g->index) {
		case 0:{
			$e = _hx_deref($_g)->params[0];
			{
				$tmp = tink_core_Outcome::Failure($e);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 1:{
			$r = _hx_deref($_g)->params[0];
			{
				$tmp = tink_core_Outcome::Success($r);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		default:{
			$tmp = tink_core_Outcome::Failure(new tink_core_TypedError(422, "Unexpected end of input", _hx_anonymous(array("fileName" => "StreamParser.hx", "lineNumber" => 111, "className" => "tink.io.ByteWiseParser", "methodName" => "eof"))));
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		}
		$GLOBALS['%s']->pop();
	}
	public function writeBytes($bytes, $start, $length) {
		$GLOBALS['%s']->push("tink.io.ByteWiseParser::writeBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		$data = $bytes->b;
		{
			$_g1 = $start;
			$_g = $start + $length;
			while($_g1 < $_g) {
				$_g1 = $_g1 + 1;
				$pos = $_g1 - 1;
				{
					$_g2 = $this->read(ord($data->s[$pos]));
					switch($_g2->index) {
					case 0:{
						$e = _hx_deref($_g2)->params[0];
						$this->result = tink_core_Outcome::Failure($e);
						{
							$tmp = $pos - $start + 1;
							$GLOBALS['%s']->pop();
							return $tmp;
						}
					}break;
					case 1:{
						$r = _hx_deref($_g2)->params[0];
						$this->result = tink_core_Outcome::Success(haxe_ds_Option::Some($r));
						{
							$tmp = $pos - $start + 1;
							$GLOBALS['%s']->pop();
							return $tmp;
						}
					}break;
					case 2:{
					}break;
					}
					unset($_g2);
				}
				unset($pos);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $length;
		}
		$GLOBALS['%s']->pop();
	}
	public function progress($buffer) {
		$GLOBALS['%s']->push("tink.io.ByteWiseParser::progress");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->result = $this->resume;
		$buffer->writeTo($this, null);
		{
			$tmp = $this->result;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.io.ByteWiseParser'; }
}

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx
 */

namespace tink\io\_Source;

use \php\_Boot\HxClosure;
use \tink\core\OutcomeTools;
use \tink\core\Outcome;
use \php\Boot;
use \tink\io\_Worker\Worker_Impl_;
use \tink\io\WorkerObject;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \haxe\io\Input;
use \tink\io\SourceBase;
use \tink\core\_Future\Future_Impl_;
use \tink\io\StreamParser;
use \tink\core\_Callback\Callback_Impl_;
use \tink\io\Buffer;
use \tink\core\Noise;
use \tink\core\_Lazy\LazyFunc;
use \haxe\ds\Option;
use \php\_Boot\HxAnon;

class StdSource extends SourceBase {
	/**
	 * @var string
	 */
	public $name;
	/**
	 * @var Input
	 */
	public $target;
	/**
	 * @var WorkerObject
	 */
	public $worker;


	/**
	 * @param string $name
	 * @param Input $target
	 * @param WorkerObject $worker
	 * 
	 * @return void
	 */
	public function __construct ($name, $target, $worker = null) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:331: characters 5-21
		$this->name = $name;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:332: characters 5-25
		$this->target = $target;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:333: characters 5-34
		$this->worker = Worker_Impl_::ensure($worker);
	}


	/**
	 * @return FutureObject
	 */
	public function close () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:339: lines 339-350
		$_gthis = $this;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:340: lines 340-349
		return Worker_Impl_::work($this->worker, new LazyFunc(function ()  use (&$_gthis) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:342: lines 342-348
			return TypedError::catchExceptions(function ()  use (&$_gthis) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:344: characters 13-27
				$_gthis->target->close();
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:345: characters 13-25
				return Noise::Noise();
			}, TypedError::reporter(null, "Failed to close " . ($_gthis->name??'null'), new HxAnon([
				"fileName" => "tink/io/Source.hx",
				"lineNumber" => 347,
				"className" => "tink.io._Source.StdSource",
				"methodName" => "close",
			])), new HxAnon([
				"fileName" => "tink/io/Source.hx",
				"lineNumber" => 342,
				"className" => "tink.io._Source.StdSource",
				"methodName" => "close",
			]));
		}));
	}


	/**
	 * @param StreamParser $parser
	 * @param \Closure $cond
	 * 
	 * @return FutureObject
	 */
	public function parseWhile ($parser, $cond) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:351: lines 351-389
		$_gthis = $this;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:352: characters 5-73
		$buf = Buffer::alloc(Buffer::sufficientWidthFor($parser->minSize()));
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:353: lines 353-385
		$ret = Future_Impl_::async(function ($cb)  use (&$cond, &$buf, &$_gthis, &$parser) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:354: lines 354-382
			$step = null;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:354: lines 354-382
			$step = function ($noread = null)  use (&$cond, &$step, &$buf, &$_gthis, &$parser, &$cb) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:355: lines 355-382
				Worker_Impl_::work($_gthis->worker, new LazyFunc(function ()  use (&$buf, &$noread, &$_gthis, &$parser) {
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:356: characters 18-90
					$_g = ($noread ? Outcome::Success(0) : $buf->tryReadingFrom($_gthis->name, $_gthis->target));
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:356: characters 18-90
					switch ($_g->index) {
						case 0:
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:357: characters 26-27
							$v = $_g->params[0];
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:358: lines 358-359
							if ($v < 0) {
								#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:359: characters 17-27
								$buf->seal();
							}
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:361: characters 15-45
							$available = $buf->available;
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:363: lines 363-370
							if (($v < 0) && ($available === 0)) {
								#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:364: characters 17-39
								return OutcomeTools::map($parser->eof(), new HxClosure(Option::class, 'Some'));
							} else {
								#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:366: characters 24-44
								$_g1 = $parser->progress($buf);
								#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:366: characters 24-44
								if ($_g1->index === 0) {
									#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:366: characters 24-44
									if ($_g1->params[0]->index === 1) {
										#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:367: lines 367-369
										if (($v < 0) && ($available === $buf->available)) {
											#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:368: characters 21-63
											return Outcome::Failure(new TypedError(null, "Parser hung on input", new HxAnon([
												"fileName" => "tink/io/Source.hx",
												"lineNumber" => 368,
												"className" => "tink.io._Source.StdSource",
												"methodName" => "parseWhile",
											])));
										} else {
											#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:369: characters 24-25
											$v1 = $_g1;
											#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:369: characters 27-28
											return $v1;
										}
									} else {
										#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:369: characters 24-25
										$v2 = $_g1;
										#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:369: characters 27-28
										return $v2;
									}
								} else {
									#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:369: characters 24-25
									$v3 = $_g1;
									#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:369: characters 27-28
									return $v3;
								}
							}
							break;
						case 1:
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:371: characters 26-27
							$e = $_g->params[0];
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:372: characters 15-25
							return Outcome::Failure($e);
							break;
					}
				}))->handle(function ($o)  use (&$cond, &$step, &$buf, &$_gthis, &$cb) {
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:374: lines 374-382
					switch ($o->index) {
						case 0:
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:374: characters 38-39
							switch ($o->params[0]->index) {
								case 0:
									#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:376: characters 29-30
									$v4 = $o->params[0]->params[0];
									#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:377: lines 377-380
									$cond($v4)->handle(function ($v5)  use (&$step, &$buf, &$_gthis, &$cb) {
										#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:378: lines 378-379
										if ($v5) {
											#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:378: characters 22-32
											$step(true);
										} else {
											#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:379: characters 44-57
											$step1 = $buf->content();
											#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:379: characters 23-59
											$step2 = Outcome::Success($_gthis->prepend(Source_Impl_::fromBytes($step1)));
											#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:379: characters 20-60
											$cb($step2);
										}
									});
									break;
								case 1:
									#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:381: characters 31-37
									$step();
									break;
							}
							break;
						case 1:
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:375: characters 24-25
							$e1 = $o->params[0];
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:375: characters 28-42
							$cb(Outcome::Failure($e1));
							break;
					}
				});
			};
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:354: lines 354-382
			$step3 = $step;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:384: characters 7-13
			$step3();
		});
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:386: characters 5-44
		$ret->handle(Callback_Impl_::fromNiladic(new HxClosure($buf, 'dispose')));
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:388: characters 5-15
		return $ret;
	}


	/**
	 * @param Buffer $into
	 * @param int $max
	 * 
	 * @return FutureObject
	 */
	public function read ($into, $max = 1073741824) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:336: lines 336-337
		if ($max === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:336: lines 336-337
			$max = 1073741824;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:336: lines 336-337
		$_gthis = $this;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:337: characters 5-82
		return Worker_Impl_::work($this->worker, new LazyFunc(function ()  use (&$_gthis, &$into, &$max) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:337: characters 36-81
			return $into->tryReadingFrom($_gthis->name, $_gthis->target, $max);
		}));
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:392: characters 5-16
		return $this->name;
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(StdSource::class, 'tink.io._Source.StdSource');

<?php

// Generated by Haxe 3.4.7
class tink_io__Source_StdSource extends tink_io_SourceBase {
	public function __construct($name, $target, $worker = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.io._Source.StdSource::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->name = $name;
		$this->target = $target;
		$this->worker = tink_io__Worker_Worker_Impl_::ensure($worker);
		$GLOBALS['%s']->pop();
	}}
	public $name;
	public $target;
	public $worker;
	public function read($into, $max = null) {
		$GLOBALS['%s']->push("tink.io._Source.StdSource::read");
		$__hx__spos = $GLOBALS['%s']->length;
		if($max === null) {
			$max = 1073741824;
		}
		$_gthis = $this;
		$tmp = $this->worker;
		{
			$tmp2 = tink_io__Worker_Worker_Impl_::work($tmp, new tink_core__Lazy_LazyFunc(array(new _hx_lambda(array(&$_gthis, &$into, &$max), "tink_io__Source_StdSource_0"), 'execute')));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function close() {
		$GLOBALS['%s']->push("tink.io._Source.StdSource::close");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$tmp = $this->worker;
		{
			$tmp2 = tink_io__Worker_Worker_Impl_::work($tmp, new tink_core__Lazy_LazyFunc(array(new _hx_lambda(array(&$_gthis), "tink_io__Source_StdSource_1"), 'execute')));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseWhile($parser, $cond) {
		$GLOBALS['%s']->push("tink.io._Source.StdSource::parseWhile");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$buf = tink_io_Buffer::alloc(tink_io_Buffer::sufficientWidthFor($parser->minSize()));
		$ret = tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$buf, &$cond, &$parser), "tink_io__Source_StdSource_2"), 'execute'), null);
		$ret->handle(tink_core__Callback_Callback_Impl_::fromNiladic((property_exists($buf, "dispose") ? $buf->dispose: array($buf, "dispose"))));
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	public function toString() {
		$GLOBALS['%s']->push("tink.io._Source.StdSource::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->name;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
function tink_io__Source_StdSource_0(&$_gthis, &$into, &$max) {
	{
		$GLOBALS['%s']->push("tink.io._Source.StdSource::read@337");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $into->tryReadingFrom($_gthis->name, $_gthis->target, $max);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io__Source_StdSource_1(&$_gthis) {
	{
		$GLOBALS['%s']->push("tink.io._Source.StdSource::close@341");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp1 = tink_core_TypedError::reporter(null, "Failed to close " . _hx_string_or_null($_gthis->name), _hx_anonymous(array("fileName" => "Source.hx", "lineNumber" => 347, "className" => "tink.io._Source.StdSource", "methodName" => "close")));
		{
			$tmp = tink_core_TypedError::catchExceptions(array(new _hx_lambda(array(&$_gthis), "tink_io__Source_StdSource_3"), 'execute'), $tmp1, _hx_anonymous(array("fileName" => "Source.hx", "lineNumber" => 342, "className" => "tink.io._Source.StdSource", "methodName" => "close")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io__Source_StdSource_2(&$_gthis, &$buf, &$cond, &$parser, $cb) {
	{
		$GLOBALS['%s']->push("tink.io._Source.StdSource::parseWhile@353");
		$__hx__spos = $GLOBALS['%s']->length;
		$step = null;
		$step = array(new _hx_lambda(array(&$_gthis, &$buf, &$cb, &$cond, &$parser, &$step), "tink_io__Source_StdSource_4"), 'execute');
		$step5 = $step;
		call_user_func_array($step5, array(null));
		$GLOBALS['%s']->pop();
	}
}
function tink_io__Source_StdSource_3(&$_gthis) {
	{
		$GLOBALS['%s']->push("tink.io._Source.StdSource::toString@343");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis->target->close();
		{
			$tmp = tink_core_Noise::$Noise;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io__Source_StdSource_4(&$_gthis, &$buf, &$cb, &$cond, &$parser, &$step, $noread) {
	{
		$GLOBALS['%s']->push("tink.io._Source.StdSource::toString@354");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis1 = $_gthis->worker;
		tink_io__Worker_Worker_Impl_::work($_gthis1, new tink_core__Lazy_LazyFunc(array(new _hx_lambda(array(&$_gthis, &$buf, &$noread, &$parser), "tink_io__Source_StdSource_5"), 'execute')))->handle(array(new _hx_lambda(array(&$_gthis, &$buf, &$cb, &$cond, &$step), "tink_io__Source_StdSource_6"), 'execute'));
		$GLOBALS['%s']->pop();
	}
}
function tink_io__Source_StdSource_5(&$_gthis, &$buf, &$noread, &$parser) {
	{
		$GLOBALS['%s']->push("tink.io._Source.StdSource::toString@355");
		$__hx__spos = $GLOBALS['%s']->length;
		$_g = null;
		if($noread) {
			$_g = tink_core_Outcome::Success(0);
		} else {
			$_g = $buf->tryReadingFrom($_gthis->name, $_gthis->target, null);
		}
		switch($_g->index) {
		case 0:{
			$v = _hx_deref($_g)->params[0];
			if($v < 0) {
				$buf->seal();
			}
			$available = $buf->available;
			$step1 = null;
			if($v < 0) {
				$step1 = $available === 0;
			} else {
				$step1 = false;
			}
			if($step1) {
				$tmp = tink_core_OutcomeTools::map($parser->eof(), (property_exists("haxe_ds_Option", "Some") ? haxe_ds_Option::$Some: array("haxe_ds_Option", "Some")));
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$_g1 = $parser->progress($buf);
				if($_g1->index === 0) {
					if(_hx_deref($_g1)->params[0]->index === 1) {
						$step2 = null;
						if($v < 0) {
							$step2 = $available === $buf->available;
						} else {
							$step2 = false;
						}
						if($step2) {
							$tmp = tink_core_Outcome::Failure(new tink_core_TypedError(null, "Parser hung on input", _hx_anonymous(array("fileName" => "Source.hx", "lineNumber" => 368, "className" => "tink.io._Source.StdSource", "methodName" => "parseWhile"))));
							$GLOBALS['%s']->pop();
							return $tmp;
						} else {
							$v1 = $_g1;
							{
								$GLOBALS['%s']->pop();
								return $v1;
							}
						}
					} else {
						$v2 = $_g1;
						{
							$GLOBALS['%s']->pop();
							return $v2;
						}
					}
				} else {
					$v3 = $_g1;
					{
						$GLOBALS['%s']->pop();
						return $v3;
					}
				}
			}
		}break;
		case 1:{
			$e = _hx_deref($_g)->params[0];
			{
				$tmp = tink_core_Outcome::Failure($e);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io__Source_StdSource_6(&$_gthis, &$buf, &$cb, &$cond, &$step, $o) {
	{
		$GLOBALS['%s']->push("tink.io._Source.StdSource::toString@374");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($o->index) {
		case 0:{
			switch(_hx_deref($o)->params[0]->index) {
			case 0:{
				$v4 = _hx_deref(_hx_deref($o)->params[0])->params[0];
				call_user_func_array($cond, array($v4))->handle(array(new _hx_lambda(array(&$_gthis, &$buf, &$cb, &$step), "tink_io__Source_StdSource_7"), 'execute'));
			}break;
			case 1:{
				call_user_func_array($step, array(null));
			}break;
			}
		}break;
		case 1:{
			$e1 = _hx_deref($o)->params[0];
			call_user_func_array($cb, array(tink_core_Outcome::Failure($e1)));
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io__Source_StdSource_7(&$_gthis, &$buf, &$cb, &$step, $v5) {
	{
		$GLOBALS['%s']->push("tink.io._Source.StdSource::toString@377");
		$__hx__spos = $GLOBALS['%s']->length;
		if($v5) {
			call_user_func_array($step, array(true));
		} else {
			$step3 = $buf->content();
			$step4 = tink_core_Outcome::Success($_gthis->prepend(tink_io__Source_Source_Impl_::fromBytes($step3)));
			call_user_func_array($cb, array($step4));
		}
		$GLOBALS['%s']->pop();
	}
}

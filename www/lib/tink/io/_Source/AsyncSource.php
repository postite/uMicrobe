<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx
 */

namespace tink\io\_Source;

use \tink\core\_Signal\Signal_Impl_;
use \php\_Boot\HxClosure;
use \tink\core\FutureTrigger;
use \tink\core\Outcome;
use \php\Boot;
use \tink\io\_IdealSource\IdealSource_Impl_;
use \tink\core\_Future\FutureObject;
use \tink\io\SourceBase;
use \tink\core\_Future\Future_Impl_;
use \tink\io\Buffer;
use \tink\io\SyntheticIdealSource;

class AsyncSource extends SourceBase {
	/**
	 * @var \Closure
	 */
	public $_close;
	/**
	 * @var SyntheticIdealSource
	 */
	public $data;
	/**
	 * @var FutureObject
	 */
	public $end;
	/**
	 * @var FutureObject
	 */
	public $onError;


	/**
	 * @param \Closure $f
	 * @param \Closure $close
	 * 
	 * @return void
	 */
	public function __construct ($f, $close) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:144: lines 144-160
		$_gthis = $this;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:145: characters 5-37
		$this->data = IdealSource_Impl_::create();
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:146: characters 5-19
		$this->_close = $close;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:147: lines 147-148
		$onData = Signal_Impl_::trigger();
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:147: lines 147-148
		$onEnd = new FutureTrigger();
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:150: characters 5-41
		$onData->handle(new HxClosure($this->data, 'write'));
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:151: characters 5-27
		$this->end = $onEnd;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:152: lines 152-154
		$this->end->handle(function ($e)  use (&$_gthis) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:153: characters 7-19
			$ret = $_gthis->data->closeSafely()->map(new HxClosure(Outcome::class, 'Success'));
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:153: characters 7-19
			$ret->gather();
		});
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:155: lines 155-158
		$this->onError = Future_Impl_::async(function ($cb)  use (&$_gthis) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:155: lines 155-158
			$_gthis->end->handle(function ($o)  use (&$cb) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:155: lines 155-158
				if ($o->index === 1) {
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:156: characters 20-21
					$e1 = $o->params[0];
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:156: characters 24-38
					$cb(Outcome::Failure($e1));
				}
			});
		});
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:159: characters 5-21
		$f($onData, $onEnd);
	}


	/**
	 * @return FutureObject
	 */
	public function close () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:167: characters 5-13
		($this->_close)();
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:168: characters 12-24
		$ret = $this->data->closeSafely()->map(new HxClosure(Outcome::class, 'Success'));
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:168: characters 12-24
		return $ret->gather();
	}


	/**
	 * @param Buffer $into
	 * @param int $max
	 * 
	 * @return FutureObject
	 */
	public function read ($into, $max = 1073741824) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:163: lines 163-164
		if ($max === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:163: lines 163-164
			$max = 1073741824;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:164: characters 7-27
		$ret = $this->data->readSafely($into, $max)->map(new HxClosure(Outcome::class, 'Success'));
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:163: lines 163-164
		return Future_Impl_::or($ret->gather(), $this->onError);
	}
}


Boot::registerClass(AsyncSource::class, 'tink.io._Source.AsyncSource');

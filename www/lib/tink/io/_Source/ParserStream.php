<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx
 */

namespace tink\io\_Source;

use \tink\core\Outcome;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \tink\streams\StreamBase;
use \tink\core\_Future\SyncFuture;
use \tink\core\_Future\Future_Impl_;
use \tink\io\StreamParser;
use \tink\core\_Callback\Callback_Impl_;
use \tink\io\SourceObject;
use \tink\core\_Lazy\LazyConst;

class ParserStream extends StreamBase {
	/**
	 * @var \Closure
	 */
	public $handleRest;
	/**
	 * @var StreamParser
	 */
	public $parser;
	/**
	 * @var SourceObject
	 */
	public $source;


	/**
	 * @param SourceObject $source
	 * @param StreamParser $parser
	 * @param \Closure $handleRest
	 * 
	 * @return void
	 */
	public function __construct ($source, $parser, $handleRest = null) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:234: characters 5-25
		$this->source = $source;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:235: characters 5-25
		$this->parser = $parser;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:236: characters 5-33
		$this->handleRest = $handleRest;
	}


	/**
	 * @param \Closure $item
	 * 
	 * @return FutureObject
	 */
	public function forEachAsync ($item) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:239: lines 239-255
		$_gthis = $this;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:240: lines 240-255
		return Future_Impl_::async(function ($finished)  use (&$item, &$_gthis) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:241: characters 7-24
			$done = false;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:242: lines 242-254
			$_gthis->source->parseWhile($_gthis->parser, function ($v)  use (&$item, &$done) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:243: lines 243-247
				if ($v === null) {
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:244: characters 11-22
					$done = true;
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:245: characters 11-29
					return new SyncFuture(new LazyConst(false));
				} else {
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:247: characters 14-21
					return $item($v);
				}
			})->handle(function ($o)  use (&$finished, &$_gthis, &$done) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:248: lines 248-254
				$tmp = null;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:248: lines 248-254
				switch ($o->index) {
					case 0:
						#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:249: characters 22-26
						$rest = $o->params[0];
						#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:250: lines 250-251
						if ($done && ($_gthis->handleRest !== null)) {
							#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:251: characters 13-36
							Callback_Impl_::invoke($_gthis->handleRest, $rest);
						}
						#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:248: lines 248-254
						$tmp = Outcome::Success($done);
						break;
					case 1:
						#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:253: characters 22-23
						$e = $o->params[0];
						#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:248: lines 248-254
						$tmp = Outcome::Failure($e);
						break;
				}
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx:248: lines 248-254
				$finished($tmp);
			});
		});
	}
}


Boot::registerClass(ParserStream::class, 'tink.io._Source.ParserStream');

<?php

// Generated by Haxe 3.4.7
class tink_io_StdSink extends tink_io_SinkBase {
	public function __construct($name, $target, $worker = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.io.StdSink::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->name = $name;
		$this->target = $target;
		$this->worker = tink_io__Worker_Worker_Impl_::ensure($worker);
		$GLOBALS['%s']->pop();
	}}
	public $name;
	public $target;
	public $worker;
	public function write($from) {
		$GLOBALS['%s']->push("tink.io.StdSink::write");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$tmp = $this->worker;
		{
			$tmp2 = tink_io__Worker_Worker_Impl_::work($tmp, new tink_core__Lazy_LazyFunc(array(new _hx_lambda(array(&$_gthis, &$from), "tink_io_StdSink_0"), 'execute')));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function close() {
		$GLOBALS['%s']->push("tink.io.StdSink::close");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$tmp = $this->worker;
		{
			$tmp2 = tink_io__Worker_Worker_Impl_::work($tmp, new tink_core__Lazy_LazyFunc(array(new _hx_lambda(array(&$_gthis), "tink_io_StdSink_1"), 'execute')));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function toString() {
		$GLOBALS['%s']->push("tink.io.StdSink::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->name;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return $this->toString(); }
}
function tink_io_StdSink_0(&$_gthis, &$from) {
	{
		$GLOBALS['%s']->push("tink.io.StdSink::write@145");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $from->tryWritingTo($_gthis->name, $_gthis->target, null);
		$_gthis->target->flush();
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_StdSink_1(&$_gthis) {
	{
		$GLOBALS['%s']->push("tink.io.StdSink::close@153");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp1 = tink_core_TypedError::reporter(null, "Failed to close " . _hx_string_or_null($_gthis->name), _hx_anonymous(array("fileName" => "Sink.hx", "lineNumber" => 159, "className" => "tink.io.StdSink", "methodName" => "close")));
		{
			$tmp = tink_core_TypedError::catchExceptions(array(new _hx_lambda(array(&$_gthis), "tink_io_StdSink_2"), 'execute'), $tmp1, _hx_anonymous(array("fileName" => "Sink.hx", "lineNumber" => 154, "className" => "tink.io.StdSink", "methodName" => "close")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_StdSink_2(&$_gthis) {
	{
		$GLOBALS['%s']->push("tink.io.StdSink::toString@155");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis->target->close();
		{
			$tmp = tink_core_Noise::$Noise;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

<?php

// Generated by Haxe 3.4.7
class tink_io_ParserSink extends tink_io_SinkBase {
	public function __construct($parser, $onResult, $worker = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.io.ParserSink::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->callCounter = 0;
		$this->id = tink_io_ParserSink::$idCounter++;
		$this->parser = $parser;
		$this->onResult = $onResult;
		$this->wait = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(true));
		$this->worker = tink_io__Worker_Worker_Impl_::$EAGER;
		$GLOBALS['%s']->pop();
	}}
	public $parser;
	public $state;
	public $onResult;
	public $wait;
	public $worker;
	public $id;
	public $callCounter;
	public function doClose() {
		$GLOBALS['%s']->push("tink.io.ParserSink::doClose");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->state === null) {
			$this->state = tink_core_Outcome::Success(-1);
		}
		$GLOBALS['%s']->pop();
	}
	public function write($from) {
		$GLOBALS['%s']->push("tink.io.ParserSink::write");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$call = $this->callCounter++;
		if($this->state !== null) {
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($this->state));
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$ret = $this->wait->flatMap(array(new _hx_lambda(array(&$_gthis, &$from), "tink_io_ParserSink_0"), 'execute'));
			{
				$tmp = $ret->gather();
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function close() {
		$GLOBALS['%s']->push("tink.io.ParserSink::close");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->doClose();
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(tink_core_Noise::$Noise)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function parse($s, $options = null) {
		$GLOBALS['%s']->push("tink.io.ParserSink::parse");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		{
			$tmp = tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$s), "tink_io_ParserSink_1"), 'execute'), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $idCounter = 0;
	function __toString() { return 'tink.io.ParserSink'; }
}
function tink_io_ParserSink_0(&$_gthis, &$from, $resume) {
	{
		$GLOBALS['%s']->push("tink.io.ParserSink::write@244");
		$__hx__spos = $GLOBALS['%s']->length;
		if(!$resume) {
			$_gthis->doClose();
			{
				$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($_gthis->state));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			$_gthis1 = $_gthis->worker;
			{
				$tmp = tink_io__Worker_Worker_Impl_::work($_gthis1, new tink_core__Lazy_LazyFunc(array(new _hx_lambda(array(&$_gthis, &$from), "tink_io_ParserSink_2"), 'execute')));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_ParserSink_1(&$_gthis, &$s, $cb) {
	{
		$GLOBALS['%s']->push("tink.io.ParserSink::parse@287");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = $s;
		$this2 = $_gthis;
		tink_io_Pipe::make($this1, $this2, tink_io_Buffer::sufficientWidthFor($_gthis->parser->minSize()), null, array(new _hx_lambda(array(&$cb, &$s), "tink_io_ParserSink_3"), 'execute'));
		$GLOBALS['%s']->pop();
	}
}
function tink_io_ParserSink_2(&$_gthis, &$from) {
	{
		$GLOBALS['%s']->push("tink.io.ParserSink::parse@251");
		$__hx__spos = $GLOBALS['%s']->length;
		$last = $from->available;
		$ret1 = null;
		if($last === 0) {
			$ret1 = !$from->writable;
		} else {
			$ret1 = false;
		}
		if($ret1) {
			$_g = $_gthis->parser->eof();
			switch($_g->index) {
			case 0:{
				$v = _hx_deref($_g)->params[0];
				$_gthis->doClose();
				$_gthis->wait = $_gthis->onResult($v);
				{
					$tmp = tink_core_Outcome::Success(-1);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}break;
			case 1:{
				$e = _hx_deref($_g)->params[0];
				{
					$tmp = $_gthis->state = tink_core_Outcome::Failure($e);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}break;
			}
		} else {
			$_g1 = $_gthis->parser->progress($from);
			switch($_g1->index) {
			case 0:{
				$d = _hx_deref($_g1)->params[0];
				switch($d->index) {
				case 0:{
					$v1 = _hx_deref($d)->params[0];
					$_gthis->wait = $_gthis->onResult($v1);
				}break;
				case 1:{
				}break;
				}
				$this1 = $last - $from->available;
				{
					$tmp = tink_core_Outcome::Success($this1);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}break;
			case 1:{
				$f = _hx_deref($_g1)->params[0];
				{
					$tmp = $_gthis->state = tink_core_Outcome::Failure($f);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}break;
			}
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_ParserSink_3(&$cb, &$s, $rest, $res) {
	{
		$GLOBALS['%s']->push("tink.io.ParserSink::parse@288");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		switch($res->index) {
		case 0:{
			$tmp = tink_core_Outcome::Success($s);
		}break;
		case 1:{
			$e = _hx_deref($res)->params[0];
			$tmp = tink_core_Outcome::Failure($e);
		}break;
		case 2:{
			$other = tink_io__Source_Source_Impl_::fromBytes($rest->content());
			$tmp = tink_core_Outcome::Success($s->prepend($other));
		}break;
		case 3:{
			$e1 = _hx_deref($res)->params[0];
			$tmp = tink_core_Outcome::Failure($e1);
		}break;
		}
		call_user_func_array($cb, array($tmp));
		$GLOBALS['%s']->pop();
	}
}

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSink.hx
 */

namespace tink\io;

use \php\_Boot\HxClosure;
use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\Noise;
use \tink\core\_Lazy\LazyConst;

class IdealSinkBase extends SinkBase implements IdealSinkObject {
	/**
	 * @return FutureObject
	 */
	public function close () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSink.hx:81: characters 12-38
		$ret = $this->closeSafely()->map(new HxClosure(Outcome::class, 'Success'));
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSink.hx:81: characters 12-38
		return $ret->gather();
	}


	/**
	 * @return FutureObject
	 */
	public function closeSafely () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSink.hx:75: characters 5-30
		return new SyncFuture(new LazyConst(Noise::Noise()));
	}


	/**
	 * @param \Closure $onError
	 * 
	 * @return IdealSinkObject
	 */
	public function idealize ($onError) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSink.hx:69: characters 5-16
		return $this;
	}


	/**
	 * @param Buffer $from
	 * 
	 * @return FutureObject
	 */
	public function write ($from) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSink.hx:78: characters 12-42
		$ret = $this->writeSafely($from)->map(new HxClosure(Outcome::class, 'Success'));
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSink.hx:78: characters 12-42
		return $ret->gather();
	}


	/**
	 * @param Buffer $from
	 * 
	 * @return FutureObject
	 */
	public function writeSafely ($from) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSink.hx:72: characters 12-17
		throw new HxException("not implemented");
	}
}


Boot::registerClass(IdealSinkBase::class, 'tink.io.IdealSinkBase');

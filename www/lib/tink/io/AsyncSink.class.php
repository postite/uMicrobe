<?php

// Generated by Haxe 3.4.7
class tink_io_AsyncSink extends tink_io_SinkBase {
	public function __construct($writer, $closer) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.io.AsyncSink::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->closer = $closer;
		$this->writer = $writer;
		$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(0)));
		$this->last = $tmp;
		$GLOBALS['%s']->pop();
	}}
	public $closer;
	public $closing;
	public $writer;
	public $last;
	public function write($from) {
		$GLOBALS['%s']->push("tink.io.AsyncSink::write");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		if($this->closing !== null) {
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(-1)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		{
			$tmp = tink_io_AsyncSink::cause($this->last = tink_core__Future_Future_Impl_::_tryFailingFlatMap($this->last, array(new _hx_lambda(array(&$_gthis, &$from), "tink_io_AsyncSink_0"), 'execute')));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function close() {
		$GLOBALS['%s']->push("tink.io.AsyncSink::close");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		if($this->closing === null) {
			$ret = $this->last->flatMap(array(new _hx_lambda(array(&$_gthis), "tink_io_AsyncSink_1"), 'execute'));
			tink_io_AsyncSink::cause($this->closing = $ret->gather());
		}
		{
			$tmp = $this->closing;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function cause($f) {
		$GLOBALS['%s']->push("tink.io.AsyncSink::cause");
		$__hx__spos = $GLOBALS['%s']->length;
		$f->handle(tink_core__Callback_Callback_Impl_::fromNiladic(array(new _hx_lambda(array(), "tink_io_AsyncSink_2"), 'execute')));
		{
			$GLOBALS['%s']->pop();
			return $f;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.io.AsyncSink'; }
}
function tink_io_AsyncSink_0(&$_gthis, &$from, $p) {
	{
		$GLOBALS['%s']->push("tink.io.AsyncSink::write@88");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $_gthis->writer($from);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_AsyncSink_1(&$_gthis, $_) {
	{
		$GLOBALS['%s']->push("tink.io.AsyncSink::close@100");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $_gthis->closer();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_AsyncSink_2() {
	{
		$GLOBALS['%s']->push("tink.io.AsyncSink::cause@94");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
}

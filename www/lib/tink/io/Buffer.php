<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx
 */

namespace tink\io;

use \haxe\io\Eof;
use \php\_Boot\HxClosure;
use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\TypedError;
use \haxe\io\Bytes;
use \tink\io\_Buffer\Mutex;
use \haxe\io\_BytesData\Container;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \haxe\io\Error;

class Buffer {
	/**
	 * @var int
	 */
	const DEFAULT_WIDTH = 15;
	/**
	 * @var int
	 */
	const MAX_WIDTH = 28;
	/**
	 * @var int
	 */
	const MIN_WIDTH = 10;


	/**
	 * @var Bytes
	 */
	static public $ZERO_BYTES;
	/**
	 * @var Mutex
	 */
	static public $mutex;
	/**
	 * @var \Array_hx
	 */
	static public $pool;


	/**
	 * @var int
	 */
	public $available;
	/**
	 * @var Bytes
	 */
	public $bytes;
	/**
	 * @var Container
	 */
	public $raw;
	/**
	 * @var int
	 */
	public $retainCount;
	/**
	 * @var int
	 */
	public $width;
	/**
	 * @var bool
	 */
	public $writable;
	/**
	 * @var int
	 */
	public $zero;


	/**
	 * @param int $width
	 * 
	 * @return Buffer
	 */
	static public function alloc ($width = 15) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:257: lines 257-266
		if ($width === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:257: lines 257-266
			$width = 15;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:259: lines 259-260
		if ($width < 10) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:260: characters 7-24
			$width = 10;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:262: lines 262-263
		if ($width > 28) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:263: characters 7-24
			$width = 28;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:265: characters 5-48
		return new Buffer(Buffer::allocBytes($width), $width);
	}


	/**
	 * @param int $width
	 * 
	 * @return Bytes
	 */
	static public function allocBytes ($width) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:271: characters 14-82
		$_this = Buffer::$mutex;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:271: characters 52-81
		$_this1 = (Buffer::$pool->arr[$width - 10] ?? null);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:271: characters 52-81
		if ($_this1->length > 0) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:271: characters 52-81
			$_this1->length--;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:271: characters 14-82
		$_g = array_pop($_this1->arr);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:272: lines 272-273
		if ($_g === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:272: characters 20-43
			return Bytes::alloc(1 << $width);
		} else {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:273: characters 14-15
			$v = $_g;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:273: characters 17-18
			return $v;
		}
	}


	/**
	 * @param Bytes $b
	 * @param int $width
	 * 
	 * @return void
	 */
	static public function poolBytes ($b, $width) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:229: lines 229-230
		if ($width >= 10) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:230: characters 7-70
			$_this = Buffer::$mutex;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:230: characters 38-69
			$_this1 = (Buffer::$pool->arr[$width - 10] ?? null);
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:230: characters 38-69
			$_this1->arr[$_this1->length] = $b;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:230: characters 38-69
			++$_this1->length;

		}
	}


	/**
	 * @param Bytes $bytes
	 * 
	 * @return bool
	 */
	static public function releaseBytes ($bytes) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:278: lines 278-282
		$_g = 10;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:278: lines 278-282
		while ($_g < 28) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:278: lines 278-282
			$_g = $_g + 1;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:278: characters 10-15
			$width = $_g - 1;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:279: lines 279-282
			if ($bytes->length === (1 << $width)) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:280: characters 9-32
				Buffer::poolBytes($bytes, $width);
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:281: characters 9-20
				return true;
			}
		}

		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:284: characters 5-17
		return false;
	}


	/**
	 * @param int $minSize
	 * 
	 * @return int
	 */
	static public function sufficientWidthFor ($minSize) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:245: characters 9-33
		$tmp = $minSize > 268435456;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:248: characters 5-31
		$width = 15;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:249: characters 5-27
		$size = 1 << $width;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:251: lines 251-252
		while ($size < $minSize) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:252: characters 19-26
			$width = $width + 1;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:252: characters 7-26
			$size = 1 << $width;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:254: characters 5-17
		return $width;
	}


	/**
	 * @param Bytes $bytes
	 * 
	 * @return Buffer
	 */
	static public function unmanaged ($bytes) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:296: characters 5-33
		return new Buffer($bytes, -1);
	}


	/**
	 * @param Bytes $bytes
	 * @param int $start
	 * @param int $len
	 * 
	 * @return Buffer
	 */
	static public function wrap ($bytes, $start, $len) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:300: characters 5-39
		$ret = Buffer::unmanaged($bytes);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:301: characters 5-21
		$ret->zero = $start;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:302: characters 5-24
		$ret->available = $len;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:303: characters 5-15
		return $ret;
	}


	/**
	 * @param Bytes $bytes
	 * @param int $width
	 * 
	 * @return void
	 */
	public function __construct ($bytes, $width) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:36: characters 45-46
		$this->available = 0;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:35: characters 45-49
		$this->writable = true;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:21: characters 43-44
		$this->retainCount = 0;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:20: characters 40-41
		$this->zero = 0;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:19: characters 41-42
		$this->width = 0;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:54: characters 5-23
		$this->bytes = $bytes;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:55: characters 5-31
		$this->raw = $bytes->b;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:56: characters 5-23
		$this->width = $width;
	}


	/**
	 * @return bool
	 */
	public function align () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:167: lines 167-168
		if ($this->zero < $this->get_end()) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:168: characters 7-19
			return false;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:170: lines 170-174
		$copy = ($this->width > 0 ? Buffer::allocBytes($this->width) : Bytes::alloc($this->bytes->length));
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:176: characters 5-17
		$this->blitTo($copy);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:177: characters 5-26
		$old = $this->bytes;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:178: characters 5-22
		$this->bytes = $copy;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:179: characters 5-30
		$this->raw = $copy->b;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:180: characters 5-18
		$this->zero = 0;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:181: characters 5-26
		Buffer::poolBytes($old, $this->width);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:182: characters 5-16
		return true;
	}


	/**
	 * @param Bytes $ret
	 * 
	 * @return Bytes
	 */
	public function blitTo ($ret) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:74: lines 74-79
		if (($this->zero + $this->available) <= $this->bytes->length) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:75: characters 7-42
			$src = $this->bytes;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:75: characters 7-42
			$srcpos = $this->zero;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:75: characters 7-42
			$len = $this->available;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:75: characters 7-42
			if (($srcpos < 0) || ($len < 0) || ($len > $ret->length) || (($srcpos + $len) > $src->length)) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:75: characters 7-42
				throw new HxException(Error::OutsideBounds());
			} else {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:75: characters 7-42
				$this1 = $ret->b;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:75: characters 7-42
				$src1 = $src->b;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:75: characters 7-42
				$this1->s = ((substr($this1->s, 0, 0) . substr($src1->s, $srcpos, $len)) . substr($this1->s, $len));
			}
		} else {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:77: characters 7-51
			$pos = $this->bytes->length - $this->zero;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:77: characters 7-51
			$src2 = $this->bytes;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:77: characters 7-51
			$len1 = $this->get_end();
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:77: characters 7-51
			if (($pos < 0) || ($len1 < 0) || (($pos + $len1) > $ret->length) || ($len1 > $src2->length)) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:77: characters 7-51
				throw new HxException(Error::OutsideBounds());
			} else {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:77: characters 7-51
				$this2 = $ret->b;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:77: characters 7-51
				$src3 = $src2->b;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:77: characters 7-51
				$this2->s = ((substr($this2->s, 0, $pos) . substr($src3->s, 0, $len1)) . substr($this2->s, $pos + $len1));
			}

			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:78: characters 7-52
			$src4 = $this->bytes;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:78: characters 7-52
			$srcpos1 = $this->zero;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:78: characters 7-52
			$len2 = $this->bytes->length - $this->zero;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:78: characters 7-52
			if (($srcpos1 < 0) || ($len2 < 0) || ($len2 > $ret->length) || (($srcpos1 + $len2) > $src4->length)) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:78: characters 7-52
				throw new HxException(Error::OutsideBounds());
			} else {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:78: characters 7-52
				$this3 = $ret->b;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:78: characters 7-52
				$src5 = $src4->b;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:78: characters 7-52
				$this3->s = ((substr($this3->s, 0, 0) . substr($src5->s, $srcpos1, $len2)) . substr($this3->s, $len2));
			}

		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:81: characters 5-15
		return $ret;
	}


	/**
	 * @return void
	 */
	public function clear () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:186: characters 5-18
		$this->zero = 0;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:187: characters 5-23
		$this->available = 0;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:188: characters 5-25
		$this->writable = true;
	}


	/**
	 * Consolidates the content of the buffer into a single Bytes blob.
	 * Does not affect the buffer.
	 * 
	 * @return Bytes
	 */
	public function content () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:70: characters 5-42
		return $this->blitTo(Bytes::alloc($this->available));
	}


	/**
	 * @return void
	 */
	public function dispose () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:234: lines 234-241
		if ($this->bytes->length > 0) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:235: characters 7-28
			$old = $this->bytes;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:236: characters 7-30
			$this->bytes = Buffer::$ZERO_BYTES;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:237: characters 7-38
			$this->raw = $this->bytes->b;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:238: characters 7-20
			$this->zero = 0;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:239: characters 7-25
			$this->available = 0;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:240: characters 7-28
			Buffer::poolBytes($old, $this->width);
		}
	}


	/**
	 * @return int
	 */
	public function get_end () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:45: lines 45-46
		return ($this->zero + $this->available) % $this->bytes->length;
	}


	/**
	 * @return int
	 */
	public function get_freeBytes () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:51: characters 7-38
		return $this->bytes->length - $this->available;
	}


	/**
	 * @return int
	 */
	public function get_size () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:40: characters 7-26
		return $this->bytes->length;
	}


	/**
	 * Reads from a source into the buffer.
	 * Returns EOF if the buffer is sealed.
	 * Returns NONE if the buffer is full.
	 *
	 * Use only if you know the source not to produce exceptions.
	 * 
	 * @param object $source
	 * @param int $max
	 * 
	 * @return int
	 */
	public function readFrom ($source, $max = 268435456) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:198: lines 198-224
		if ($max === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:198: lines 198-224
			$max = 268435456;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:199: characters 5-39
		if (!$this->writable) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:199: characters 20-39
			return -1;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:200: characters 5-48
		if ($this->available === $this->bytes->length) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:200: characters 28-48
			return 0;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:202: lines 202-206
		$toRead = ($this->get_end() < $this->zero ? $this->bytes->length - $this->available : $this->bytes->length - $this->get_end());
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:208: lines 208-209
		if ($max < 0) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:209: characters 7-14
			$max = 0;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:211: lines 211-212
		if ($max < $toRead) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:212: characters 7-19
			$toRead = $max;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:214: characters 5-59
		$transfered = $source->readBytes($this->bytes, $this->get_end(), $toRead);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:219: lines 219-221
		if ($transfered > 0) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:220: characters 7-16
			$tmp = $this;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:220: characters 7-30
			$tmp->available = $tmp->available + $transfered;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:223: characters 12-35
		$this1 = $transfered;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:223: characters 12-35
		return $this1;
	}


	/**
	 * @return \Closure
	 */
	public function retain () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:24: characters 5-18
		$this->retainCount++;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:25: characters 5-21
		$self = $this;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:27: lines 27-32
		return function ()  use (&$self) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:28: characters 7-31
			if ($self === null) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:28: characters 25-31
				return;
			}
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:29: lines 29-30
			if (--$self->retainCount === 0) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:30: characters 9-23
				$self->dispose();
			}
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:31: characters 7-18
			$self = null;
		};
	}


	/**
	 * @param string $operation
	 * @param \Closure $f
	 * 
	 * @return Outcome
	 */
	public function safely ($operation, $f) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:89: lines 89-103
		try {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:90: characters 9-21
			return Outcome::Success($f());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Error) {
				$e = $__hx__real_e;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:92: lines 92-97
				return Outcome::Success(($e === Error::Blocked() ? 0 : -1));
			} else if ($__hx__real_e instanceof Eof) {
				$e1 = $__hx__real_e;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:99: characters 9-30
				return Outcome::Success(-1);
			} else if ($__hx__real_e instanceof TypedError) {
				$e2 = $__hx__real_e;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:101: characters 9-19
				return Outcome::Failure($e2);
			} else {
				$e3 = $__hx__real_e;
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:103: characters 9-59
				return Outcome::Failure(TypedError::withData(null, "" . ($operation??'null') . " due to " . (\Std::string($e3)??'null'), $e3, new HxAnon([
					"fileName" => "tink/io/Buffer.hx",
					"lineNumber" => 103,
					"className" => "tink.io.Buffer",
					"methodName" => "safely",
				])));
			}
		}
	}


	/**
	 * Seals the buffer
	 * 
	 * @return void
	 */
	public function seal () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:63: characters 5-26
		$this->writable = false;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:85: characters 5-39
		return "[Buffer " . ($this->available??'null') . "/" . ($this->bytes->length??'null') . "]";
	}


	/**
	 * Reads from a source with error handling. See tryWritingTo
	 * 
	 * @param string $name
	 * @param object $source
	 * @param int $max
	 * 
	 * @return Outcome
	 */
	public function tryReadingFrom ($name, $source, $max = 268435456) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:120: characters 5-75
		if ($max === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:120: characters 5-75
			$max = 268435456;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:120: characters 48-61
		$f = new HxClosure($this, 'readFrom');
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:120: characters 48-61
		$source1 = $source;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:120: characters 48-61
		$max1 = $max;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:120: characters 5-75
		return $this->safely("Failed reading from " . ($name??'null'), function ()  use (&$f, &$max1, &$source1) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:120: characters 48-61
			return $f($source1, $max1);
		});
	}


	/**
	 * Writes to a destination with error handling.
	 * If the destination raises an exception, then the buffer's state remains entirely unaffected.
	 * The same cannot necessarily be said for the destination, i.e. parts of the content may have been successfully written, before the error occurred.
	 *
	 * If the buffer handles an error, it is best to reset the destination to a known state, before attempting another write.
	 * 
	 * @param string $name
	 * @param object $dest
	 * @param int $max
	 * 
	 * @return Outcome
	 */
	public function tryWritingTo ($name, $dest, $max = 268435456) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:114: characters 5-70
		if ($max === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:114: characters 5-70
			$max = 268435456;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:114: characters 46-58
		$f = new HxClosure($this, 'writeTo');
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:114: characters 46-58
		$dest1 = $dest;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:114: characters 46-58
		$max1 = $max;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:114: characters 5-70
		return $this->safely("Failed writing to " . ($name??'null'), function ()  use (&$f, &$max1, &$dest1) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:114: characters 46-58
			return $f($dest1, $max1);
		});
	}


	/**
	 * Writes contents of the buffer to the destination.
	 * If this buffer is readonly and is drained by the write, it is disposed and EOF is returned.
	 * If the buffer is empty, NONE is returned.
	 *
	 * Use only if you know the destination not to produce exceptions.
	 * 
	 * @param object $dest
	 * @param int $max
	 * 
	 * @return int
	 */
	public function writeTo ($dest, $max = 268435456) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:129: lines 129-164
		if ($max === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:129: lines 129-164
			$max = 268435456;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:131: lines 131-137
		if ($this->available === 0) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:133: lines 133-137
			if ($this->writable) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:133: characters 23-36
				return 0;
			} else {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:135: characters 11-20
				$this->dispose();
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:136: characters 11-23
				return -1;
			}
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:139: lines 139-143
		$toWrite = (($this->zero + $this->available) > $this->bytes->length ? $this->bytes->length - $this->zero : $this->available);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:145: lines 145-146
		if ($max < 0) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:146: characters 7-14
			$max = 0;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:148: lines 148-149
		if ($max < $toWrite) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:149: characters 7-20
			$toWrite = $max;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:151: characters 5-60
		$transfered = $dest->writeBytes($this->bytes, $this->zero, $toWrite);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:155: lines 155-158
		if ($transfered > 0) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:156: characters 7-48
			$this->zero = ($this->zero + $transfered) % $this->bytes->length;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:157: characters 7-16
			$tmp = $this;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:157: characters 7-30
			$tmp->available = $tmp->available - $transfered;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:160: lines 160-161
		if (!$this->writable && ($this->available === 0)) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:161: characters 7-16
			$this->dispose();
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:163: characters 12-35
		$this1 = $transfered;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:163: characters 12-35
		return $this1;
	}


	public function __toString() {
		return $this->toString();
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$ZERO_BYTES = Bytes::alloc(0);
self::$mutex = new Mutex();
$_g = new \Array_hx();
{
	#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:293: characters 22-57
	$_g1 = 10;
	#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:293: characters 22-57
	while ($_g1 < 28) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:293: characters 22-57
		$_g1 = $_g1 + 1;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:293: characters 27-28
		$i = $_g1 - 1;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:293: characters 55-57
		$_g->arr[$_g->length] = new \Array_hx();
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Buffer.hx:293: characters 55-57
		++$_g->length;

	}
};
self::$pool = $_g;
	}
}


Boot::registerClass(Buffer::class, 'tink.io.Buffer');
Boot::registerGetters('tink\\io\\Buffer', [
	'freeBytes' => true,
	'end' => true,
	'size' => true
]);
Buffer::__hx__init();

<?php

// Generated by Haxe 3.4.7
class tink_io_Pipe {
	public function __construct($source, $dest, $bufferWidth = null, $autoClose = null, $onDone) {
		if(!isset($this->releaseBuffer)) $this->releaseBuffer = array(new _hx_lambda(array(&$this), "tink_io_Pipe_0"), 'execute');
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.io.Pipe::new");
		$__hx__spos = $GLOBALS['%s']->length;
		if($autoClose === null) {
			$autoClose = false;
		}
		$tmp = null;
		if($bufferWidth !== null) {
			$tmp = $bufferWidth;
		} else {
			$tmp = 15;
		}
		$this->bufferWidth = $tmp;
		$this->autoClose = $autoClose;
		$this->source = $source;
		$this->dest = $dest;
		$this->onDone = $onDone;
		$GLOBALS['%s']->pop();
	}}
	public $buffer;
	public $source;
	public $dest;
	public $onDone;
	public $autoClose;
	public $bufferWidth;
	public function terminate($s) {
		$GLOBALS['%s']->push("tink.io.Pipe::terminate");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->onDone($this->buffer, $s);
		$this->releaseBuffer();
		$GLOBALS['%s']->pop();
	}
	public function releaseBuffer() { return call_user_func($this->releaseBuffer); }
	public $releaseBuffer = null;
	public function suspend() {
		$GLOBALS['%s']->push("tink.io.Pipe::suspend");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->bufferWidth > 0) {
			$_g = tink_io_Pipe::$suspended->pop();
			if($_g === null) {
				$this->read();
			} else {
				$next = $_g;
				{
					$this->releaseBuffer();
					tink_io_Pipe::$suspended->add($this);
					$next->resume();
				}
			}
		} else {
			$this->read();
		}
		$GLOBALS['%s']->pop();
	}
	public function resume() {
		$GLOBALS['%s']->push("tink.io.Pipe::resume");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->buffer === null) {
			$this->buffer = tink_io_Buffer::alloc($this->bufferWidth);
			$this->releaseBuffer = $this->buffer->retain();
		}
		$this->read();
		$GLOBALS['%s']->pop();
	}
	public function read() {
		$GLOBALS['%s']->push("tink.io.Pipe::read");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$tmp = $this->source->read($this->buffer, 1073741824);
		$tmp->handle(array(new _hx_lambda(array(&$_gthis), "tink_io_Pipe_1"), 'execute'));
		$GLOBALS['%s']->pop();
	}
	public function flush($repeat = null) {
		$GLOBALS['%s']->push("tink.io.Pipe::flush");
		$__hx__spos = $GLOBALS['%s']->length;
		if($repeat === null) {
			$repeat = 1;
		}
		$_gthis = $this;
		$tmp = null;
		if(!$this->buffer->writable) {
			$tmp = !$this->autoClose;
		} else {
			$tmp = true;
		}
		if($tmp) {
			$this->dest->write($this->buffer)->handle(array(new _hx_lambda(array(&$_gthis, &$repeat), "tink_io_Pipe_2"), 'execute'));
		} else {
			$this->dest->finish($this->buffer)->handle(array(new _hx_lambda(array(&$_gthis), "tink_io_Pipe_3"), 'execute'));
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $suspended;
	static function make($from, $to, $bufferWidth = null, $options = null, $cb) {
		$GLOBALS['%s']->push("tink.io.Pipe::make");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		if($options !== null) {
			$tmp = $options->end;
		} else {
			$tmp = false;
		}
		_hx_deref(new tink_io_Pipe($from, $to, $bufferWidth, $tmp, array(new _hx_lambda(array(&$cb), "tink_io_Pipe_4"), 'execute')))->resume();
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.io.Pipe'; }
}
tink_io_Pipe::$suspended = new HList();
function tink_io_Pipe_0(&$__hx__this) {
	{
		$GLOBALS['%s']->push("tink.io.Pipe::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
}
function tink_io_Pipe_1(&$_gthis, $o) {
	{
		$GLOBALS['%s']->push("tink.io.Pipe::read@65");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($o->index) {
		case 0:{
			$_hx_tmp = _hx_deref($o)->params[0] < 0;
			if($_hx_tmp === true) {
				$_gthis->source->close();
				$_gthis->buffer->seal();
				$_gthis->flush(null);
			} else {
				$v = _hx_deref($o)->params[0];
				$tmp1 = null;
				if($v === 0) {
					$tmp1 = $_gthis->buffer->available === 0;
				} else {
					$tmp1 = false;
				}
				if($tmp1) {
					$_gthis->suspend();
				} else {
					$_gthis->flush(null);
				}
			}
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			$_gthis->terminate(tink_io_PipeResult::SourceFailed($e));
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_Pipe_2(&$_gthis, &$repeat, $o) {
	{
		$GLOBALS['%s']->push("tink.io.Pipe::flush@81");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($o->index) {
		case 0:{
			$_hx_tmp = _hx_deref($o)->params[0] < 0;
			if($_hx_tmp === true) {
				$tmp1 = null;
				if($_gthis->buffer->available > 0) {
					$tmp1 = tink_io_PipeResult::$SinkEnded;
				} else {
					$tmp1 = tink_io_PipeResult::$AllWritten;
				}
				$_gthis->terminate($tmp1);
			} else {
				$v = _hx_deref($o)->params[0];
				if($repeat > 0) {
					$tmp2 = null;
					if($v === 0) {
						$tmp2 = 1;
					} else {
						$tmp2 = 0;
					}
					$_gthis->flush($repeat - $tmp2);
				} else {
					if($_gthis->buffer->writable) {
						$_gthis->read();
					} else {
						$_gthis->flush(null);
					}
				}
			}
		}break;
		case 1:{
			$f = _hx_deref($o)->params[0];
			{
				$_gthis->source->close();
				$_gthis->terminate(tink_io_PipeResult::SinkFailed($f));
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_Pipe_3(&$_gthis, $o1) {
	{
		$GLOBALS['%s']->push("tink.io.Pipe::flush@98");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($o1->index) {
		case 0:{
			$tmp3 = null;
			if($_gthis->buffer->available > 0) {
				$tmp3 = tink_io_PipeResult::$SinkEnded;
			} else {
				$tmp3 = tink_io_PipeResult::$AllWritten;
			}
			$_gthis->terminate($tmp3);
		}break;
		case 1:{
			$f1 = _hx_deref($o1)->params[0];
			$_gthis->terminate(tink_io_PipeResult::SinkFailed($f1));
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_Pipe_4(&$cb, $buf, $res) {
	{
		$GLOBALS['%s']->push("tink.io.Pipe::make@107");
		$__hx__spos = $GLOBALS['%s']->length;
		call_user_func_array($cb, array($buf, $res));
		$GLOBALS['%s']->pop();
	}
}

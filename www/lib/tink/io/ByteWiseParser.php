<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx
 */

namespace tink\io;

use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\TypedError;
use \haxe\io\Bytes;
use \php\_Boot\HxAnon;
use \haxe\ds\Option;

class ByteWiseParser implements StreamParser {
	/**
	 * @var Outcome
	 */
	public $result;
	/**
	 * @var Outcome
	 */
	public $resume;


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:94: characters 5-27
		$this->resume = Outcome::Success(Option::None());
	}


	/**
	 * @return Outcome
	 */
	public function eof () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:105: characters 14-22
		$_g = $this->read(-1);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:105: characters 14-22
		switch ($_g->index) {
			case 0:
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:106: characters 21-22
				$e = $_g->params[0];
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:107: characters 11-21
				return Outcome::Failure($e);
				break;
			case 1:
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:108: characters 19-20
				$r = $_g->params[0];
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:109: characters 11-21
				return Outcome::Success($r);
				break;
			default:
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:111: characters 11-77
				return Outcome::Failure(new TypedError(422, "Unexpected end of input", new HxAnon([
					"fileName" => "tink/io/StreamParser.hx",
					"lineNumber" => 111,
					"className" => "tink.io.ByteWiseParser",
					"methodName" => "eof",
				])));
				break;
		}
	}


	/**
	 * @return int
	 */
	public function minSize () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:98: characters 5-13
		return 1;
	}


	/**
	 * @param Buffer $buffer
	 * 
	 * @return Outcome
	 */
	public function progress ($buffer) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:132: characters 5-20
		$this->result = $this->resume;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:133: characters 5-25
		$buffer->writeTo($this);
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:134: characters 5-18
		return $this->result;
	}


	/**
	 * @param int $c
	 * 
	 * @return ParseStep
	 */
	public function read ($c) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:101: characters 12-17
		throw new HxException("not implemented");
	}


	/**
	 * @param Bytes $bytes
	 * @param int $start
	 * @param int $length
	 * 
	 * @return int
	 */
	public function writeBytes ($bytes, $start, $length) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:115: characters 5-32
		$data = $bytes->b;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:117: lines 117-126
		$_g1 = $start;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:117: lines 117-126
		$_g = $start + $length;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:117: lines 117-126
		while ($_g1 < $_g) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:117: lines 117-126
			$_g1 = $_g1 + 1;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:117: characters 10-13
			$pos = $_g1 - 1;
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:118: characters 14-44
			$_g2 = $this->read(ord($data->s[$pos]));
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:118: characters 14-44
			switch ($_g2->index) {
				case 0:
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:120: characters 21-22
					$e = $_g2->params[0];
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:121: characters 11-30
					$this->result = Outcome::Failure($e);
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:122: characters 11-33
					return $pos - $start + 1;
					break;
				case 1:
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:123: characters 19-20
					$r = $_g2->params[0];
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:124: characters 11-36
					$this->result = Outcome::Success(Option::Some($r));
					#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:125: characters 11-33
					return $pos - $start + 1;
					break;
				case 2:
										break;
			}

		}

		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/StreamParser.hx:128: characters 5-18
		return $length;
	}
}


Boot::registerClass(ByteWiseParser::class, 'tink.io.ByteWiseParser');

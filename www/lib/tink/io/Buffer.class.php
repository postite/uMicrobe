<?php

// Generated by Haxe 3.4.7
class tink_io_Buffer {
	public function __construct($bytes, $width) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.io.Buffer::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->available = 0;
		$this->writable = true;
		$this->retainCount = 0;
		$this->zero = 0;
		$this->width = 0;
		$this->bytes = $bytes;
		$this->raw = $bytes->b;
		$this->width = $width;
		$GLOBALS['%s']->pop();
	}}
	public $bytes;
	public $raw;
	public $width;
	public $zero;
	public $retainCount;
	public function retain() {
		$GLOBALS['%s']->push("tink.io.Buffer::retain");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->retainCount++;
		$self = $this;
		{
			$tmp = array(new _hx_lambda(array(&$self), "tink_io_Buffer_0"), 'execute');
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public $writable;
	public $available;
	public function get_size() {
		$GLOBALS['%s']->push("tink.io.Buffer::get_size");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->bytes->length;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_end() {
		$GLOBALS['%s']->push("tink.io.Buffer::get_end");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_mod(($this->zero + $this->available), $this->bytes->length);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function get_freeBytes() {
		$GLOBALS['%s']->push("tink.io.Buffer::get_freeBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->bytes->length - $this->available;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function seal() {
		$GLOBALS['%s']->push("tink.io.Buffer::seal");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->writable = false;
		$GLOBALS['%s']->pop();
	}
	public function content() {
		$GLOBALS['%s']->push("tink.io.Buffer::content");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->blitTo(haxe_io_Bytes::alloc($this->available));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function blitTo($ret) {
		$GLOBALS['%s']->push("tink.io.Buffer::blitTo");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->zero + $this->available <= $this->bytes->length) {
			$ret->blit(0, $this->bytes, $this->zero, $this->available);
		} else {
			$tmp = $this->bytes->length - $this->zero;
			$tmp1 = $this->bytes;
			$ret->blit($tmp, $tmp1, 0, $this->get_end());
			$ret->blit(0, $this->bytes, $this->zero, $this->bytes->length - $this->zero);
		}
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	public function toString() {
		$GLOBALS['%s']->push("tink.io.Buffer::toString");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = "[Buffer " . _hx_string_rec($this->available, "") . "/" . _hx_string_rec($this->bytes->length, "") . "]";
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function safely($operation, $f) {
		$GLOBALS['%s']->push("tink.io.Buffer::safely");
		$__hx__spos = $GLOBALS['%s']->length;
		try {
			{
				$tmp = tink_core_Outcome::Success(call_user_func($f));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			if(($e = $_ex_) instanceof haxe_io_Error){
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp = null;
				if($e === haxe_io_Error::$Blocked) {
					$tmp = 0;
				} else {
					$tmp = -1;
				}
				{
					$tmp2 = tink_core_Outcome::Success($tmp);
					$GLOBALS['%s']->pop();
					return $tmp2;
				}
			}
			else if(($e1 = $_ex_) instanceof haxe_io_Eof){
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				{
					$tmp = tink_core_Outcome::Success(-1);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
			else if(($e2 = $_ex_) instanceof tink_core_TypedError){
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				{
					$tmp = tink_core_Outcome::Failure($e2);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
			else { $e3 = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp1 = "" . _hx_string_or_null($operation) . " due to " . Std::string($e3);
				{
					$tmp = tink_core_Outcome::Failure(tink_core_TypedError::withData(null, $tmp1, $e3, _hx_anonymous(array("fileName" => "Buffer.hx", "lineNumber" => 103, "className" => "tink.io.Buffer", "methodName" => "safely"))));
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}}
		}
		$GLOBALS['%s']->pop();
	}
	public function tryWritingTo($name, $dest, $max = null) {
		$GLOBALS['%s']->push("tink.io.Buffer::tryWritingTo");
		$__hx__spos = $GLOBALS['%s']->length;
		if($max === null) {
			$max = 268435456;
		}
		$f = (property_exists($this, "writeTo") ? $this->writeTo: array($this, "writeTo"));
		$a1 = $dest;
		$a2 = $max;
		{
			$tmp = $this->safely("Failed writing to " . _hx_string_or_null($name), array(new _hx_lambda(array(&$a1, &$a2, &$f), "tink_io_Buffer_1"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function tryReadingFrom($name, $source, $max = null) {
		$GLOBALS['%s']->push("tink.io.Buffer::tryReadingFrom");
		$__hx__spos = $GLOBALS['%s']->length;
		if($max === null) {
			$max = 268435456;
		}
		$f = (property_exists($this, "readFrom") ? $this->readFrom: array($this, "readFrom"));
		$a1 = $source;
		$a2 = $max;
		{
			$tmp = $this->safely("Failed reading from " . _hx_string_or_null($name), array(new _hx_lambda(array(&$a1, &$a2, &$f), "tink_io_Buffer_2"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function writeTo($dest, $max = null) {
		$GLOBALS['%s']->push("tink.io.Buffer::writeTo");
		$__hx__spos = $GLOBALS['%s']->length;
		if($max === null) {
			$max = 268435456;
		}
		if($this->available === 0) {
			if($this->writable) {
				$tmp = 0;
				$GLOBALS['%s']->pop();
				return $tmp;
			} else {
				$this->dispose();
				{
					$tmp = -1;
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$toWrite = null;
		if($this->zero + $this->available > $this->bytes->length) {
			$toWrite = $this->bytes->length - $this->zero;
		} else {
			$toWrite = $this->available;
		}
		if($max < 0) {
			$max = 0;
		}
		if($max < $toWrite) {
			$toWrite = $max;
		}
		$transfered = $dest->writeBytes($this->bytes, $this->zero, $toWrite);
		if($transfered > 0) {
			$this->zero = _hx_mod(($this->zero + $transfered), $this->bytes->length);
			$tmp = $this;
			$tmp->available = $tmp->available - $transfered;
		}
		$tmp1 = null;
		if(!$this->writable) {
			$tmp1 = $this->available === 0;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$this->dispose();
		}
		$this1 = $transfered;
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function align() {
		$GLOBALS['%s']->push("tink.io.Buffer::align");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $this->zero;
		if($tmp < $this->get_end()) {
			$GLOBALS['%s']->pop();
			return false;
		}
		$copy = null;
		if($this->width > 0) {
			$copy = tink_io_Buffer::allocBytes($this->width);
		} else {
			$copy = haxe_io_Bytes::alloc($this->bytes->length);
		}
		$this->blitTo($copy);
		$old = $this->bytes;
		$this->bytes = $copy;
		$this->raw = $copy->b;
		$this->zero = 0;
		tink_io_Buffer::poolBytes($old, $this->width);
		{
			$GLOBALS['%s']->pop();
			return true;
		}
		$GLOBALS['%s']->pop();
	}
	public function clear() {
		$GLOBALS['%s']->push("tink.io.Buffer::clear");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->zero = 0;
		$this->available = 0;
		$this->writable = true;
		$GLOBALS['%s']->pop();
	}
	public function readFrom($source, $max = null) {
		$GLOBALS['%s']->push("tink.io.Buffer::readFrom");
		$__hx__spos = $GLOBALS['%s']->length;
		if($max === null) {
			$max = 268435456;
		}
		if(!$this->writable) {
			$tmp = -1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		if($this->available === $this->bytes->length) {
			$tmp = 0;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$toRead = null;
		$toRead1 = $this->get_end();
		if($toRead1 < $this->zero) {
			$toRead = $this->bytes->length - $this->available;
		} else {
			$toRead2 = $this->bytes->length;
			$toRead = $toRead2 - $this->get_end();
		}
		if($max < 0) {
			$max = 0;
		}
		if($max < $toRead) {
			$toRead = $max;
		}
		$transfered = $this->bytes;
		$transfered1 = $source->readBytes($transfered, $this->get_end(), $toRead);
		if($transfered1 > 0) {
			$tmp = $this;
			$tmp->available = $tmp->available + $transfered1;
		}
		$this1 = $transfered1;
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function dispose() {
		$GLOBALS['%s']->push("tink.io.Buffer::dispose");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->bytes->length > 0) {
			$old = $this->bytes;
			$this->bytes = tink_io_Buffer::$ZERO_BYTES;
			$this->raw = $this->bytes->b;
			$this->zero = 0;
			$this->available = 0;
			tink_io_Buffer::poolBytes($old, $this->width);
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $ZERO_BYTES;
	static function poolBytes($b, $width) {
		$GLOBALS['%s']->push("tink.io.Buffer::poolBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		if($width >= 10) {
			$_this = tink_io_Buffer::$mutex;
			_hx_array_get(tink_io_Buffer::$pool, $width - 10)->push($b);
		}
		$GLOBALS['%s']->pop();
	}
	static function sufficientWidthFor($minSize) {
		$GLOBALS['%s']->push("tink.io.Buffer::sufficientWidthFor");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = $minSize > 268435456;
		$width = 15;
		$size = 1 << $width;
		while($size < $minSize) {
			$width = $width + 1;
			$size = 1 << $width;
		}
		{
			$GLOBALS['%s']->pop();
			return $width;
		}
		$GLOBALS['%s']->pop();
	}
	static function alloc($width = null) {
		$GLOBALS['%s']->push("tink.io.Buffer::alloc");
		$__hx__spos = $GLOBALS['%s']->length;
		if($width === null) {
			$width = 15;
		}
		if($width < 10) {
			$width = 10;
		}
		if($width > 28) {
			$width = 28;
		}
		{
			$tmp = new tink_io_Buffer(tink_io_Buffer::allocBytes($width), $width);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function allocBytes($width) {
		$GLOBALS['%s']->push("tink.io.Buffer::allocBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		$_this = tink_io_Buffer::$mutex;
		$_g = _hx_array_get(tink_io_Buffer::$pool, $width - 10)->pop();
		if($_g === null) {
			$tmp = haxe_io_Bytes::alloc(1 << $width);
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$v = $_g;
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		}
		$GLOBALS['%s']->pop();
	}
	static function releaseBytes($bytes) {
		$GLOBALS['%s']->push("tink.io.Buffer::releaseBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$_g = 10;
			while($_g < 28) {
				$_g = $_g + 1;
				$width = $_g - 1;
				if($bytes->length === 1 << $width) {
					tink_io_Buffer::poolBytes($bytes, $width);
					{
						$GLOBALS['%s']->pop();
						return true;
					}
				}
				unset($width);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return false;
		}
		$GLOBALS['%s']->pop();
	}
	static $MIN_WIDTH = 10;
	static $DEFAULT_WIDTH = 15;
	static $MAX_WIDTH = 28;
	static $mutex;
	static $pool;
	static function unmanaged($bytes) {
		$GLOBALS['%s']->push("tink.io.Buffer::unmanaged");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_io_Buffer($bytes, -1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function wrap($bytes, $start, $len) {
		$GLOBALS['%s']->push("tink.io.Buffer::wrap");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = tink_io_Buffer::unmanaged($bytes);
		$ret->zero = $start;
		$ret->available = $len;
		{
			$GLOBALS['%s']->pop();
			return $ret;
		}
		$GLOBALS['%s']->pop();
	}
	static $__properties__ = array("get_freeBytes" => "get_freeBytes","get_end" => "get_end","get_size" => "get_size");
	function __toString() { return $this->toString(); }
}
tink_io_Buffer::$ZERO_BYTES = haxe_io_Bytes::alloc(0);
tink_io_Buffer::$mutex = new tink_io__Buffer_Mutex();
tink_io_Buffer::$pool = tink_io_Buffer_3();
function tink_io_Buffer_0(&$self) {
	{
		$GLOBALS['%s']->push("tink.io.Buffer::retain@27");
		$__hx__spos = $GLOBALS['%s']->length;
		if($self === null) {
			$GLOBALS['%s']->pop();
			return;
		}
		if(--$self->retainCount === 0) {
			$self->dispose();
		}
		$self = null;
		$GLOBALS['%s']->pop();
	}
}
function tink_io_Buffer_1(&$a1, &$a2, &$f) {
	{
		$GLOBALS['%s']->push("tink.io.Buffer::tryWritingTo@114");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = call_user_func_array($f, array($a1, $a2));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_Buffer_2(&$a1, &$a2, &$f) {
	{
		$GLOBALS['%s']->push("tink.io.Buffer::tryReadingFrom@120");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = call_user_func_array($f, array($a1, $a2));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_Buffer_3() {
	{
		$_g = (new _hx_array(array()));
		{
			$_g1 = 10;
			while($_g1 < 28) {
				$_g1 = $_g1 + 1;
				$i = $_g1 - 1;
				$_g->push((new _hx_array(array())));
				unset($i);
			}
		}
		return $_g;
	}
}

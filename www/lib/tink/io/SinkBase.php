<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx
 */

namespace tink\io;

use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\_Future\Future_Impl_;
use \tink\core\Noise;
use \tink\io\_Sink\Sink_Impl_;
use \tink\core\_Lazy\LazyConst;

class SinkBase implements SinkObject {
	/**
	 * @return FutureObject
	 */
	public function close () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:210: characters 12-39
		return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
	}


	/**
	 * @param Buffer $from
	 * 
	 * @return FutureObject
	 */
	public function finish ($from) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:196: lines 196-207
		$_gthis = $this;
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:197: lines 197-207
		return Future_Impl_::async(function ($cb)  use (&$_gthis, &$from) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:199: lines 199-206
			Sink_Impl_::writeFull($_gthis, $from)->handle(function ($o)  use (&$_gthis, &$cb) {
				#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:199: lines 199-206
				switch ($o->index) {
					case 0:
						#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:199: characters 64-65
						switch ($o->params[0]) {
							case false:
								#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:203: characters 13-31
								$cb(Outcome::Success(Noise::Noise()));
								break;
							case true:
								#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:201: characters 13-31
								$_gthis->close()->handle($cb);
								break;
						}
						break;
					case 1:
						#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:204: characters 24-25
						$e = $o->params[0];
						#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:205: characters 13-27
						$cb(Outcome::Failure($e));
						break;
				}
			});
		});
	}


	/**
	 * @param \Closure $onError
	 * 
	 * @return IdealSinkObject
	 */
	public function idealize ($onError) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:213: characters 5-44
		return new IdealizedSink($this, $onError);
	}


	/**
	 * @param Buffer $from
	 * 
	 * @return FutureObject
	 */
	public function write ($from) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Sink.hx:194: characters 12-17
		throw new HxException("writing not implemented");
	}
}


Boot::registerClass(SinkBase::class, 'tink.io.SinkBase');

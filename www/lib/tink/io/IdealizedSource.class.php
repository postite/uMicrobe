<?php

// Generated by Haxe 3.4.7
class tink_io_IdealizedSource extends tink_io_IdealSourceBase {
	public function __construct($target, $onError) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.io.IdealizedSource::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->target = $target;
		$this->onError = $onError;
		$GLOBALS['%s']->pop();
	}}
	public $target;
	public $onError;
	public function readSafely($into, $max = null) {
		$GLOBALS['%s']->push("tink.io.IdealizedSource::readSafely");
		$__hx__spos = $GLOBALS['%s']->length;
		if($max === null) {
			$max = 268435456;
		}
		$_gthis = $this;
		$this1 = $this->target->read($into, $max);
		$ret = $this1->map(array(new _hx_lambda(array(&$_gthis), "tink_io_IdealizedSource_0"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function closeSafely() {
		$GLOBALS['%s']->push("tink.io.IdealizedSource::closeSafely");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$this1 = $this->target->close();
		$ret = $this1->map(array(new _hx_lambda(array(&$_gthis), "tink_io_IdealizedSource_1"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.io.IdealizedSource'; }
}
function tink_io_IdealizedSource_0(&$_gthis, $x) {
	{
		$GLOBALS['%s']->push("tink.io.IdealizedSource::readSafely@71");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($x->index) {
		case 0:{
			$v = _hx_deref($x)->params[0];
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		}break;
		case 1:{
			$e = _hx_deref($x)->params[0];
			tink_core__Callback_Callback_Impl_::invoke((property_exists($_gthis, "onError") ? $_gthis->onError: array($_gthis, "onError")), $e);
			{
				$tmp = -1;
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_IdealizedSource_1(&$_gthis, $x) {
	{
		$GLOBALS['%s']->push("tink.io.IdealizedSource::closeSafely@79");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($x->index) {
		case 0:{
			$v = _hx_deref($x)->params[0];
			{
				$GLOBALS['%s']->pop();
				return $v;
			}
		}break;
		case 1:{
			$e = _hx_deref($x)->params[0];
			tink_core__Callback_Callback_Impl_::invoke((property_exists($_gthis, "onError") ? $_gthis->onError: array($_gthis, "onError")), $e);
			{
				$tmp = tink_core_Noise::$Noise;
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}

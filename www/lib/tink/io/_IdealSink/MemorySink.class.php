<?php

// Generated by Haxe 3.4.7
class tink_io__IdealSink_MemorySink extends tink_io_IdealSinkBase {
	public function __construct($whenDone, $buffer) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("tink.io._IdealSink.MemorySink::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->whenDone = $whenDone;
		$tmp = null;
		if($buffer === null) {
			$tmp = new haxe_io_BytesBuffer();
		} else {
			$v = $buffer;
			$tmp = $v;
		}
		$this->buffer = $tmp;
		$GLOBALS['%s']->pop();
	}}
	public $whenDone;
	public $buffer;
	public function writeBytes($b, $pos, $len) {
		$GLOBALS['%s']->push("tink.io._IdealSink.MemorySink::writeBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = null;
			$tmp1 = null;
			if($pos >= 0) {
				$tmp1 = $len < 0;
			} else {
				$tmp1 = true;
			}
			if(!$tmp1) {
				$tmp = $pos + $len > $b->length;
			} else {
				$tmp = true;
			}
			if($tmp) {
				throw new HException(haxe_io_Error::$OutsideBounds);
			}
			$_this = $this->buffer;
			$_this1 = $_this->b;
			$this1 = $b->b;
			$x = new php__BytesData_Wrapper(substr($this1->s, $pos, $len));
			$this2 = $x;
			$_this->b = _hx_string_or_null($_this1) . _hx_string_or_null($this2->s);
		}
		{
			$GLOBALS['%s']->pop();
			return $len;
		}
		$GLOBALS['%s']->pop();
	}
	public function writeSafely($from) {
		$GLOBALS['%s']->push("tink.io._IdealSink.MemorySink::writeSafely");
		$__hx__spos = $GLOBALS['%s']->length;
		$v = null;
		if($this->buffer === null) {
			$v = -1;
		} else {
			$v = $from->writeTo($this, null);
		}
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($v));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function closeSafely() {
		$GLOBALS['%s']->push("tink.io._IdealSink.MemorySink::closeSafely");
		$__hx__spos = $GLOBALS['%s']->length;
		if($this->buffer !== null) {
			tink_core__Callback_Callback_Impl_::invoke((property_exists($this, "whenDone") ? $this->whenDone: array($this, "whenDone")), $this->buffer);
			$this->buffer = null;
			$this->whenDone = null;
		}
		{
			$tmp = parent::closeSafely();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'tink.io._IdealSink.MemorySink'; }
}

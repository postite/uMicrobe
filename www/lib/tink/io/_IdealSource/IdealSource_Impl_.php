<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx
 */

namespace tink\io\_IdealSource;

use \php\Boot;
use \tink\io\SinkObject;
use \tink\core\_Future\FutureObject;
use \tink\io\IdealSourceObject;
use \haxe\io\Bytes;
use \tink\io\Buffer;
use \tink\io\Empty_hx;
use \haxe\io\_BytesData\Container;
use \tink\io\_Source\Source_Impl_;
use \tink\io\ByteSource;
use \tink\io\SyntheticIdealSource;

final class IdealSource_Impl_ {
	/**
	 * @param IdealSourceObject $this
	 * 
	 * @return FutureObject
	 */
	static public function all ($this1) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:19: characters 5-28
		return $this1->allSafely();
	}


	/**
	 * @param IdealSourceObject $this
	 * @param IdealSourceObject $other
	 * 
	 * @return IdealSourceObject
	 */
	static public function append ($this1, $other) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:31: characters 5-42
		return CompoundSource::of($this1, $other);
	}


	/**
	 * @param IdealSourceObject $this
	 * 
	 * @return FutureObject
	 */
	static public function close ($this1) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:16: characters 5-30
		return $this1->closeSafely();
	}


	/**
	 * @return SyntheticIdealSource
	 */
	static public function create () {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:50: characters 5-38
		return new SyntheticIdealSource();
	}


	/**
	 * @param Bytes $b
	 * 
	 * @return IdealSourceObject
	 */
	static public function fromBytes ($b) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:42: characters 5-22
		return IdealSource_Impl_::ofBytes($b, null);
	}


	/**
	 * @param string $s
	 * 
	 * @return IdealSourceObject
	 */
	static public function fromString ($s) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:46: lines 46-47
		if ($s === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:46: characters 22-58
			return Empty_hx::$instance;
		} else {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:47: characters 20-37
			$s1 = strlen($s);
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:47: characters 12-38
			return IdealSource_Impl_::ofBytes(new Bytes($s1, new Container($s)), null);
		}
	}


	/**
	 * @param IdealSourceObject $this
	 * @param int $length
	 * 
	 * @return IdealSourceObject
	 */
	static public function limit ($this1, $length) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:25: characters 12-64
		return Source_Impl_::limit($this1, $length)->idealize(function ($_) {
		});
	}


	/**
	 * @param Bytes $b
	 * @param int $offset
	 * 
	 * @return IdealSourceObject
	 */
	static public function ofBytes ($b, $offset = 0) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:38: lines 38-39
		if ($offset === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:38: lines 38-39
			$offset = 0;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:38: lines 38-39
		if ($b === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:38: characters 22-36
			return Empty_hx::$instance;
		} else {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:39: characters 12-37
			return new ByteSource($b, $offset);
		}
	}


	/**
	 * @param IdealSourceObject $this
	 * @param SinkObject $dest
	 * @param object $options
	 * 
	 * @return FutureObject
	 */
	static public function pipeTo ($this1, $dest, $options = null) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:34: characters 5-44
		return $this1->pipeSafelyTo($dest, $options);
	}


	/**
	 * @param IdealSourceObject $this
	 * @param IdealSourceObject $other
	 * 
	 * @return IdealSourceObject
	 */
	static public function prepend ($this1, $other) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:28: characters 5-42
		return CompoundSource::of($other, $this1);
	}


	/**
	 * @param IdealSourceObject $this
	 * @param Buffer $into
	 * @param int $max
	 * 
	 * @return FutureObject
	 */
	static public function read ($this1, $into, $max = 1073741824) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:13: characters 5-38
		if ($max === null) {
			#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:13: characters 5-38
			$max = 1073741824;
		}
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:13: characters 5-38
		return $this1->readSafely($into, $max);
	}


	/**
	 * @param IdealSourceObject $this
	 * @param int $length
	 * 
	 * @return IdealSourceObject
	 */
	static public function skip ($this1, $length) {
		#/usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/IdealSource.hx:22: characters 12-63
		return Source_Impl_::skip($this1, $length)->idealize(function ($_) {
		});
	}
}


Boot::registerClass(IdealSource_Impl_::class, 'tink.io._IdealSource.IdealSource_Impl_');

<?php

// Generated by Haxe 3.4.7
class tink_io__IdealSource_IdealSource_Impl_ {
	public function __construct(){}
	static function read($this1, $into, $max = null) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::read");
		$__hx__spos = $GLOBALS['%s']->length;
		if($max === null) {
			$max = 1073741824;
		}
		{
			$tmp = $this1->readSafely($into, $max);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function close($this1) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::close");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1->closeSafely();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function all($this1) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::all");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1->allSafely();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function skip($this1, $length) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::skip");
		$__hx__spos = $GLOBALS['%s']->length;
		$this2 = tink_io__Source_Source_Impl_::skip($this1, $length);
		{
			$tmp = $this2->idealize(array(new _hx_lambda(array(), "tink_io__IdealSource_IdealSource_Impl__0"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function limit($this1, $length) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::limit");
		$__hx__spos = $GLOBALS['%s']->length;
		$this2 = tink_io__Source_Source_Impl_::limit($this1, $length);
		{
			$tmp = $this2->idealize(array(new _hx_lambda(array(), "tink_io__IdealSource_IdealSource_Impl__1"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function prepend($this1, $other) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::prepend");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_io__IdealSource_CompoundSource::of($other, $this1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function append($this1, $other) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::append");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_io__IdealSource_CompoundSource::of($this1, $other);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function pipeTo($this1, $dest, $options = null) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::pipeTo");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this1->pipeSafelyTo($dest, $options);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function ofBytes($b, $offset = null) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::ofBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		if($offset === null) {
			$offset = 0;
		}
		if($b === null) {
			$tmp = tink_io_Empty::$instance;
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$tmp = new tink_io_ByteSource($b, $offset);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromBytes($b) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::fromBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_io__IdealSource_IdealSource_Impl_::ofBytes($b, null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function fromString($s) {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::fromString");
		$__hx__spos = $GLOBALS['%s']->length;
		if($s === null) {
			$tmp = tink_io_Empty::$instance;
			$GLOBALS['%s']->pop();
			return $tmp;
		} else {
			$tmp = tink_io__IdealSource_IdealSource_Impl_::ofBytes(haxe_io_Bytes::ofString($s), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function create() {
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::create");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_io_SyntheticIdealSource();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.io._IdealSource.IdealSource_Impl_'; }
}
function tink_io__IdealSource_IdealSource_Impl__0($_) {
	{
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::skip@22");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
}
function tink_io__IdealSource_IdealSource_Impl__1($_) {
	{
		$GLOBALS['%s']->push("tink.io._IdealSource.IdealSource_Impl_::limit@25");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
}

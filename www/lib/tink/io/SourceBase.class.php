<?php

// Generated by Haxe 3.4.7
class tink_io_SourceBase implements tink_io_SourceObject{
	public function __construct(){}
	public function idealize($onError) {
		$GLOBALS['%s']->push("tink.io.SourceBase::idealize");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_io_IdealizedSource($this, $onError);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function prepend($other) {
		$GLOBALS['%s']->push("tink.io.SourceBase::prepend");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_io__Source_CompoundSource::of($other, $this);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function append($other) {
		$GLOBALS['%s']->push("tink.io.SourceBase::append");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_io__Source_CompoundSource::of($this, $other);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function read($into, $max = null) {
		$GLOBALS['%s']->push("tink.io.SourceBase::read");
		$__hx__spos = $GLOBALS['%s']->length;
		if($max === null) {
			$max = 1073741824;
		}
		throw new HException("not implemented");
		$GLOBALS['%s']->pop();
	}
	public function close() {
		$GLOBALS['%s']->push("tink.io.SourceBase::close");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(tink_core_Outcome::Success(tink_core_Noise::$Noise)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function pipeTo($dest, $options = null) {
		$GLOBALS['%s']->push("tink.io.SourceBase::pipeTo");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		{
			$tmp = tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$dest, &$options), "tink_io_SourceBase_0"), 'execute'), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function all() {
		$GLOBALS['%s']->push("tink.io.SourceBase::all");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$out = new haxe_io_BytesOutput();
		{
			$tmp = tink_core__Future_Future_Impl_::async(array(new _hx_lambda(array(&$_gthis, &$out), "tink_io_SourceBase_1"), 'execute'), null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function parse($parser) {
		$GLOBALS['%s']->push("tink.io.SourceBase::parse");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = null;
		{
			$tmp = tink_core__Future_Future_Impl_::_tryMap($this->parseWhile($parser, array(new _hx_lambda(array(&$ret), "tink_io_SourceBase_2"), 'execute')), array(new _hx_lambda(array(&$ret), "tink_io_SourceBase_3"), 'execute'));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseWhile($parser, $cond) {
		$GLOBALS['%s']->push("tink.io.SourceBase::parseWhile");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_deref(new tink_io_ParserSink($parser, $cond, null))->parse($this, null);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function parseStream($parser, $rest = null) {
		$GLOBALS['%s']->push("tink.io.SourceBase::parseStream");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = new tink_io__Source_ParserStream($this, $parser, $rest);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function split($delim) {
		$GLOBALS['%s']->push("tink.io.SourceBase::split");
		$__hx__spos = $GLOBALS['%s']->length;
		$f = $this->parse(new tink_io_Splitter($delim));
		$a = new tink_io__Source_FutureSource(tink_core__Future_Future_Impl_::_tryMap($f, array(new _hx_lambda(array(), "tink_io_SourceBase_4"), 'execute')));
		$b = new tink_io__Source_FutureSource(tink_core__Future_Future_Impl_::_tryMap($f, array(new _hx_lambda(array(), "tink_io_SourceBase_5"), 'execute')));
		$this1 = new tink_core_MPair($a, $b);
		{
			$tmp = $this1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'tink.io.SourceBase'; }
}
function tink_io_SourceBase_0(&$_gthis, &$dest, &$options, $cb) {
	{
		$GLOBALS['%s']->push("tink.io.SourceBase::pipeTo@191");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = $_gthis;
		tink_io_Pipe::make($this1, $dest, null, $options, array(new _hx_lambda(array(&$cb), "tink_io_SourceBase_6"), 'execute'));
		$GLOBALS['%s']->pop();
	}
}
function tink_io_SourceBase_1(&$_gthis, &$out, $cb) {
	{
		$GLOBALS['%s']->push("tink.io.SourceBase::all@195");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = tink_io__Sink_Sink_Impl_::ofOutput("memory buffer", $out, null);
		$_gthis->pipeTo($this1, null)->handle(array(new _hx_lambda(array(&$cb, &$out), "tink_io_SourceBase_7"), 'execute'));
		$GLOBALS['%s']->pop();
	}
}
function tink_io_SourceBase_2(&$ret, $x) {
	{
		$GLOBALS['%s']->push("tink.io.SourceBase::parse@208");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret = $x;
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst(false));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_SourceBase_3(&$ret, $s) {
	{
		$GLOBALS['%s']->push("tink.io.SourceBase::parse@209");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_anonymous(array("data" => $ret, "rest" => $s));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_SourceBase_4($d) {
	{
		$GLOBALS['%s']->push("tink.io.SourceBase::split@222");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = tink_io__Source_Source_Impl_::fromBytes($d->data);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_SourceBase_5($d1) {
	{
		$GLOBALS['%s']->push("tink.io.SourceBase::split@223");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $d1->rest;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function tink_io_SourceBase_6(&$cb, $_, $res) {
	{
		$GLOBALS['%s']->push("tink.io.SourceBase::split@191");
		$__hx__spos = $GLOBALS['%s']->length;
		call_user_func_array($cb, array($res));
		$GLOBALS['%s']->pop();
	}
}
function tink_io_SourceBase_7(&$cb, &$out, $r) {
	{
		$GLOBALS['%s']->push("tink.io.SourceBase::split@196");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		switch($r->index) {
		case 0:{
			$tmp = tink_core_Outcome::Success($out->getBytes());
		}break;
		case 3:{
			$e = _hx_deref($r)->params[0];
			$tmp = tink_core_Outcome::Failure($e);
		}break;
		default:{
			throw new HException("assert");
		}break;
		}
		call_user_func_array($cb, array($tmp));
		$GLOBALS['%s']->pop();
	}
}

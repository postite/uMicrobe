<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: /usr/local/lib/haxe/lib/tink_io/0,5,0/src/tink/io/Source.hx
 */

namespace tink\io;

use \php\Boot;
use \tink\core\_Future\FutureObject;
use \tink\core\MPair;
use \haxe\io\Bytes;
use \tink\streams\StreamObject;
use \php\_Boot\HxAnon;

interface SourceObject {
	/**
	 * @return FutureObject
	 */
	public function all () ;


	/**
	 * @param SourceObject $other
	 * 
	 * @return SourceObject
	 */
	public function append ($other) ;


	/**
	 * @return FutureObject
	 */
	public function close () ;


	/**
	 * @param \Closure $onError
	 * 
	 * @return IdealSourceObject
	 */
	public function idealize ($onError) ;


	/**
	 * @param StreamParser $parser
	 * 
	 * @return FutureObject
	 */
	public function parse ($parser) ;


	/**
	 * @param StreamParser $parser
	 * @param \Closure $rest
	 * 
	 * @return StreamObject
	 */
	public function parseStream ($parser, $rest = null) ;


	/**
	 * @param StreamParser $parser
	 * @param \Closure $cond
	 * 
	 * @return FutureObject
	 */
	public function parseWhile ($parser, $cond) ;


	/**
	 * @param SinkObject $dest
	 * @param object $options
	 * 
	 * @return FutureObject
	 */
	public function pipeTo ($dest, $options = null) ;


	/**
	 * @param SourceObject $other
	 * 
	 * @return SourceObject
	 */
	public function prepend ($other) ;


	/**
	 * @param Buffer $into
	 * @param int $max
	 * 
	 * @return FutureObject
	 */
	public function read ($into, $max = null) ;


	/**
	 * @param Bytes $delim
	 * 
	 * @return MPair
	 */
	public function split ($delim) ;
}


Boot::registerClass(SourceObject::class, 'tink.io.SourceObject');
Boot::registerMeta(SourceObject::class, new HxAnon(["obj" => new HxAnon(["interface" => null])]));

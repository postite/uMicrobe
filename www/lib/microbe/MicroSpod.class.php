<?php

// Generated by Haxe 3.4.7
class microbe_MicroSpod {
	public function __construct(){}
	static $modelPath = "model.";
	static function getDataFormulefromVO($spod, $formule = null) {
		$GLOBALS['%s']->push("microbe.MicroSpod::getDataFormulefromVO");
		$__hx__spos = $GLOBALS['%s']->length;
		if($formule === null) {
			$mod = Type::getClassName(Type::getClass($spod));
			$modClass = microbe_MicroSpod::getModelClassFromString($mod, null);
			$formule1 = microbe_MicroSpod::getFormule($modClass);
			$formule1 = microbe_MicroSpod::getFormule($modClass);
		}
		{
			$field = $formule->keys();
			while($field->hasNext()) {
				$field1 = $field->next();
				$data = Reflect::getProperty($spod, $field1);
				$formule->get($field1)->data = $data;
				unset($field1,$data);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $formule;
		}
		$GLOBALS['%s']->pop();
	}
	static function getDataFormuleVO($mod) {
		$GLOBALS['%s']->push("microbe.MicroSpod::getDataFormuleVO");
		$__hx__spos = $GLOBALS['%s']->length;
		$modClass = microbe_MicroSpod::getModelClassFromInstance($mod);
		$formule = microbe_MicroSpod::getFormule($modClass);
		$spod = $mod;
		$formule->get("model")->id = $spod->id;
		$valids = null;
		if($spod->validationErrors !== null) {
			$valids = ufront_db__ValidationErrors_ValidationErrors_Impl_::toSimpleMap($spod->validationErrors);
		}
		{
			$field = $formule->keys();
			while($field->hasNext()) {
				$field1 = $field->next();
				$data = Reflect::getProperty($spod, $field1);
				if(_hx_equal(_hx_field($formule->get($field1), "relation"), "many")) {
					$ids = Lambda::harray($data->toList()->map(array(new _hx_lambda(array(), "microbe_MicroSpod_0"), 'execute')));
					$formule->get($field1)->data = $ids;
					$tmp = $formule->get($field1)->dependency->map(array(new _hx_lambda(array(&$field1, &$formule, &$ids), "microbe_MicroSpod_1"), 'execute'));
					$formule->get($field1)->dependency = Lambda::harray($tmp);
					$formule->get($field1)->data = _hx_field($formule->get($field1), "dependency");
					unset($tmp,$ids);
				} else {
					if(_hx_equal(_hx_field($formule->get($field1), "relation"), "one")) {
						if($data === null) {
							continue;
						}
						$tmp1 = $formule->get($field1)->dependency->map(array(new _hx_lambda(array(&$data, &$field1, &$formule), "microbe_MicroSpod_2"), 'execute'));
						$formule->get($field1)->dependency = Lambda::harray($tmp1);
						$formule->get($field1)->data = _hx_field($formule->get($field1), "dependency");
						unset($tmp1);
					} else {
						$formule->get($field1)->data = $data;
						if($valids !== null) {
							$formule->get($field1)->validationErrors = $valids->get($field1);
						}
					}
				}
				unset($field1,$data);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $formule;
		}
		$GLOBALS['%s']->pop();
	}
	static function getFormule($mod) {
		$GLOBALS['%s']->push("microbe.MicroSpod::getFormule");
		$__hx__spos = $GLOBALS['%s']->length;
		$formule = Reflect::field($mod, "formule");
		{
			$field = $formule->keys();
			while($field->hasNext()) {
				$field1 = $field->next();
				if($field1 === "model") {
					continue;
				}
				$tmp = null;
				if(!_hx_equal(_hx_field($formule->get($field1), "relation"), "many")) {
					$tmp = _hx_equal(_hx_field($formule->get($field1), "relation"), "one");
				} else {
					$tmp = true;
				}
				if($tmp) {
					$relationB = null;
					if(microbe_MicroSpod::hasPoint(_hx_field($formule->get($field1), "relationB"))) {
						$relationB = microbe_MicroSpod::getModelClassFullPath(_hx_field($formule->get($field1), "relationB"));
					} else {
						$relationB = microbe_MicroSpod::getModelClassFromString(_hx_field($formule->get($field1), "relationB"), null);
					}
					$formule->get($field1)->dependency = $relationB;
					$tmp1 = microbe_MicroSpod::getManager($relationB)->all(null)->map(array(new _hx_lambda(array(&$field1, &$formule), "microbe_MicroSpod_3"), 'execute'));
					$formule->get($field1)->dependency = Lambda::harray($tmp1);
					$formule->get($field1)->data = _hx_field($formule->get($field1), "dependency");
					unset($tmp1,$relationB);
				}
				unset($tmp,$field1);
			}
		}
		{
			$GLOBALS['%s']->pop();
			return $formule;
		}
		$GLOBALS['%s']->pop();
	}
	static function hasPoint($s) {
		$GLOBALS['%s']->push("microbe.MicroSpod::hasPoint");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_deref(new EReg("\\.", ""))->match($s);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function getManager($mod) {
		$GLOBALS['%s']->push("microbe.MicroSpod::getManager");
		$__hx__spos = $GLOBALS['%s']->length;
		$manager = Reflect::field($mod, "manager");
		{
			$GLOBALS['%s']->pop();
			return $manager;
		}
		$GLOBALS['%s']->pop();
	}
	static function getModelClassFromInstance($spod) {
		$GLOBALS['%s']->push("microbe.MicroSpod::getModelClassFromInstance");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Type::getClass($spod);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function getModelClassFromString($stringModel, $_modelPath = null) {
		$GLOBALS['%s']->push("microbe.MicroSpod::getModelClassFromString");
		$__hx__spos = $GLOBALS['%s']->length;
		if($_modelPath === null) {
			$_modelPath = microbe_MicroSpod::$modelPath;
		}
		$fullClassPath = strtoupper(_hx_char_at($stringModel, 0));
		$fullClassPath1 = _hx_string_or_null($_modelPath) . _hx_string_or_null((_hx_string_or_null($fullClassPath) . _hx_string_or_null(_hx_substr($stringModel, 1, null))));
		if(_hx_index_of($stringModel, ".", null) !== -1) {
			$fullClassPath1 = $stringModel;
		}
		{
			$tmp = Type::resolveClass($fullClassPath1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function getModelClassFullPath($stringModel) {
		$GLOBALS['%s']->push("microbe.MicroSpod::getModelClassFullPath");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = Type::resolveClass($stringModel);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function capitalize($str) {
		$GLOBALS['%s']->push("microbe.MicroSpod::capitalize");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = strtoupper(_hx_char_at($str, 0));
		{
			$tmp2 = _hx_string_or_null($tmp) . _hx_string_or_null(_hx_substr($str, 1, null));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function identify() {
		$GLOBALS['%s']->push("microbe.MicroSpod::identify");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = "spodTable" . "spodId";
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'microbe.MicroSpod'; }
}
function microbe_MicroSpod_0($d) {
	{
		$GLOBALS['%s']->push("microbe.MicroSpod::getDataFormuleVO@44");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $d->id;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_MicroSpod_1(&$field1, &$formule, &$ids, $n) {
	{
		$GLOBALS['%s']->push("microbe.MicroSpod::getDataFormuleVO@50");
		$__hx__spos = $GLOBALS['%s']->length;
		$prioField = _hx_field($formule->get($field1), "prio");
		$prioValue = $n->value;
		$inside = $ids->indexOf($n->id, null) !== -1;
		{
			$tmp = _hx_anonymous(array("id" => $n->id, "value" => $prioValue, "inside" => $inside));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_MicroSpod_2(&$data, &$field1, &$formule, $n1) {
	{
		$GLOBALS['%s']->push("microbe.MicroSpod::getDataFormuleVO@65");
		$__hx__spos = $GLOBALS['%s']->length;
		$prioField1 = _hx_field($formule->get($field1), "prio");
		{
			$tmp = _hx_anonymous(array("id" => $n1->id, "value" => $n1->value, "inside" => $n1->id === $data->id));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_MicroSpod_3(&$field1, &$formule, $n) {
	{
		$GLOBALS['%s']->push("microbe.MicroSpod::getFormule@110");
		$__hx__spos = $GLOBALS['%s']->length;
		$prioField = _hx_field($formule->get($field1), "prio");
		$prioValue = Reflect::field($n, $prioField);
		{
			$tmp = _hx_anonymous(array("id" => $n->id, "value" => $prioValue));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

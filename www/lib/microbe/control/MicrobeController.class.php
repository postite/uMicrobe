<?php

// Generated by Haxe 3.4.7
class microbe_control_MicrobeController extends ufront_web_Controller {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct();
		$GLOBALS['%s']->pop();
	}}
	public $microbeApi;
	public $models;
	public $micPath;
	public function init() {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::init");
		$__hx__spos = $GLOBALS['%s']->length;
		ufront_view__TemplateData_TemplateData_Impl_::set(ufront_web_result_ViewResult::$globalValues, "mods", $this->models);
		ufront_view__TemplateData_TemplateData_Impl_::set(ufront_web_result_ViewResult::$globalValues, "micPath", $this->micPath);
		{
			$this1 = ufront_web_result_ViewResult::$globalHelpers;
			$this1->set("microbeFarm", ufront_view__TemplateHelper_TemplateHelper_Impl_::from1(array(new _hx_lambda(array(), "microbe_control_MicrobeController_0"), 'execute')));
		}
		{
			$this2 = ufront_web_result_ViewResult::$globalPartials;
			$this2->set("voList", ufront_web_result_TemplateSource::TFromEngine("/microbe/voList.html", ufront_view_TemplatingEngines::get_haxe()));
		}
		{
			$this3 = ufront_web_result_ViewResult::$globalPartials;
			$this3->set("items", ufront_web_result_TemplateSource::TFromEngine("/microbe/items.html", ufront_view_TemplatingEngines::get_haxe()));
		}
		{
			$this4 = ufront_web_result_ViewResult::$globalPartials;
			$this4->set("form", ufront_web_result_TemplateSource::TFromEngine("/microbe/form.html", ufront_view_TemplatingEngines::get_haxe()));
		}
		$GLOBALS['%s']->pop();
	}
	public function index() {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::index");
		$__hx__spos = $GLOBALS['%s']->length;
		ufront_view__TemplateData_TemplateData_Impl_::set(ufront_web_result_ViewResult::$globalValues, "items", (new _hx_array(array())));
		$obj = _hx_anonymous(array());
		$this1 = null;
		if($obj !== null) {
			$this1 = $obj;
		} else {
			$this1 = _hx_anonymous(array());
		}
		$tmp = new ufront_web_result_ViewResult(ufront_view__TemplateData_TemplateData_Impl_::setObject($this1, _hx_anonymous(array())), null, null);
		{
			$tmp2 = $tmp->addPartialString("microbeFarm", "hellomicrobe", ufront_view_TemplatingEngines::get_haxe());
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function mods($name) {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::mods");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$this1 = tink_core__Promise_Promise_Impl_::next($this->microbeApi->getAllModels($name), array(new _hx_lambda(array(&$name), "microbe_control_MicrobeController_1"), 'execute'), null);
		$f = array(new _hx_lambda(array(&$_gthis, &$name), "microbe_control_MicrobeController_2"), 'execute');
		$ret = $this1->flatMap(array(new _hx_lambda(array(&$f), "microbe_control_MicrobeController_3"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function plus($name) {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::plus");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $this->insert($name);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function insert($mod) {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::insert");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = tink_core__Promise_Promise_Impl_::next($this->microbeApi->getFormuleFromString($mod), array(new _hx_lambda(array(&$mod), "microbe_control_MicrobeController_4"), 'execute'), null);
		$f = array(new _hx_lambda(array(), "microbe_control_MicrobeController_5"), 'execute');
		$ret = $this1->flatMap(array(new _hx_lambda(array(&$f), "microbe_control_MicrobeController_6"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function update($mod, $id) {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::update");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = $this->microbeApi->getDataFormule($mod, $id);
		$ret = $this1->map(array(new _hx_lambda(array(&$mod), "microbe_control_MicrobeController_7"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setup($mod) {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::setup");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = tink_core__Promise_Promise_Impl_::next($this->microbeApi->setupTable($mod), array(new _hx_lambda(array(), "microbe_control_MicrobeController_8"), 'execute'), null);
		$ret = $this1->flatMap(array(new _hx_lambda(array(), "microbe_control_MicrobeController_9"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function execute() {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::execute");
		$__hx__spos = $GLOBALS['%s']->length;
		$uriParts = $this->context->actionContext->get_uriParts();
		$params = $this->context->request->get_params();
		$method = $this->context->request->get_httpMethod();
		$this->context->actionContext->controller = $this;
		$this->context->actionContext->action = "execute";
		try {
			if(0 === $uriParts->length) {
				$this->context->actionContext->action = "index";
				$this->context->actionContext->args = (new _hx_array(array()));
				$this->context->actionContext->get_uriParts()->splice(0, 0);
				$this1 = _hx_field(haxe_rtti_Meta::getFields(_hx_qtype("microbe.control.MicrobeController")), "index")->wrapResult[0];
				$wrappingRequired = $this1;
				$result = $this->wrapResult($this->index(), $wrappingRequired);
				$this->setContextActionResultWhenFinished($result);
				{
					$GLOBALS['%s']->pop();
					return $result;
				}
			} else {
				$tmp = null;
				$tmp1 = null;
				$tmp2 = null;
				if(3 === $uriParts->length) {
					$tmp2 = $uriParts[0] === "mods";
				} else {
					$tmp2 = false;
				}
				if($tmp2) {
					$tmp1 = $uriParts[1] === "list";
				} else {
					$tmp1 = false;
				}
				if($tmp1) {
					$tmp = strlen($uriParts[2]) > 0;
				} else {
					$tmp = false;
				}
				if($tmp) {
					$name = $uriParts[2];
					$this->context->actionContext->action = "mods";
					$this->context->actionContext->args = (new _hx_array(array($name)));
					$this->context->actionContext->get_uriParts()->splice(0, 3);
					$this2 = _hx_field(haxe_rtti_Meta::getFields(_hx_qtype("microbe.control.MicrobeController")), "mods")->wrapResult[0];
					$wrappingRequired1 = $this2;
					$result1 = $this->wrapResult($this->mods($name), $wrappingRequired1);
					$this->setContextActionResultWhenFinished($result1);
					{
						$GLOBALS['%s']->pop();
						return $result1;
					}
				} else {
					$tmp3 = null;
					$tmp4 = null;
					$tmp5 = null;
					if(3 === $uriParts->length) {
						$tmp5 = $uriParts[0] === "mods";
					} else {
						$tmp5 = false;
					}
					if($tmp5) {
						$tmp4 = $uriParts[1] === "plus";
					} else {
						$tmp4 = false;
					}
					if($tmp4) {
						$tmp3 = strlen($uriParts[2]) > 0;
					} else {
						$tmp3 = false;
					}
					if($tmp3) {
						$name1 = $uriParts[2];
						$this->context->actionContext->action = "plus";
						$this->context->actionContext->args = (new _hx_array(array($name1)));
						$this->context->actionContext->get_uriParts()->splice(0, 3);
						$this3 = _hx_field(haxe_rtti_Meta::getFields(_hx_qtype("microbe.control.MicrobeController")), "plus")->wrapResult[0];
						$wrappingRequired2 = $this3;
						$result2 = $this->wrapResult($this->plus($name1), $wrappingRequired2);
						$this->setContextActionResultWhenFinished($result2);
						{
							$GLOBALS['%s']->pop();
							return $result2;
						}
					} else {
						$tmp6 = null;
						$tmp7 = null;
						if(2 === $uriParts->length) {
							$tmp7 = $uriParts[0] === "insert";
						} else {
							$tmp7 = false;
						}
						if($tmp7) {
							$tmp6 = strlen($uriParts[1]) > 0;
						} else {
							$tmp6 = false;
						}
						if($tmp6) {
							$mod = $uriParts[1];
							$this->context->actionContext->action = "insert";
							$this->context->actionContext->args = (new _hx_array(array($mod)));
							$this->context->actionContext->get_uriParts()->splice(0, 2);
							$this4 = _hx_field(haxe_rtti_Meta::getFields(_hx_qtype("microbe.control.MicrobeController")), "insert")->wrapResult[0];
							$wrappingRequired3 = $this4;
							$result3 = $this->wrapResult($this->insert($mod), $wrappingRequired3);
							$this->setContextActionResultWhenFinished($result3);
							{
								$GLOBALS['%s']->pop();
								return $result3;
							}
						} else {
							$tmp8 = null;
							$tmp9 = null;
							$tmp10 = null;
							$tmp11 = null;
							if(4 === $uriParts->length) {
								$tmp11 = $uriParts[0] === "affiche";
							} else {
								$tmp11 = false;
							}
							if($tmp11) {
								$tmp10 = strlen($uriParts[1]) > 0;
							} else {
								$tmp10 = false;
							}
							if($tmp10) {
								$tmp9 = $uriParts[2] === "mod";
							} else {
								$tmp9 = false;
							}
							if($tmp9) {
								$tmp8 = strlen($uriParts[3]) > 0;
							} else {
								$tmp8 = false;
							}
							if($tmp8) {
								$mod1 = $uriParts[1];
								$id = Std::parseInt($uriParts[3]);
								if($id === null) {
									$reason = "Could not parse parameter " . "id" . ":Int = " . _hx_string_or_null($uriParts[3]);
									$message = "Bad Request";
									if($reason !== null) {
										$message = _hx_string_or_null($message) . _hx_string_or_null((": " . _hx_string_or_null($reason)));
									}
									throw new HException(new tink_core_TypedError(400, $message, _hx_anonymous(array("fileName" => "MicrobeController.hx", "lineNumber" => 134, "className" => "microbe.control.MicrobeController", "methodName" => "execute"))));
								}
								$this->context->actionContext->action = "update";
								$this->context->actionContext->args = (new _hx_array(array($mod1, $id)));
								$this->context->actionContext->get_uriParts()->splice(0, 4);
								$this5 = _hx_field(haxe_rtti_Meta::getFields(_hx_qtype("microbe.control.MicrobeController")), "update")->wrapResult[0];
								$wrappingRequired4 = $this5;
								$result4 = $this->wrapResult($this->update($mod1, $id), $wrappingRequired4);
								$this->setContextActionResultWhenFinished($result4);
								{
									$GLOBALS['%s']->pop();
									return $result4;
								}
							} else {
								$tmp12 = null;
								$tmp13 = null;
								if(2 === $uriParts->length) {
									$tmp13 = $uriParts[0] === "setup";
								} else {
									$tmp13 = false;
								}
								if($tmp13) {
									$tmp12 = strlen($uriParts[1]) > 0;
								} else {
									$tmp12 = false;
								}
								if($tmp12) {
									$mod2 = $uriParts[1];
									$this->context->actionContext->action = "setup";
									$this->context->actionContext->args = (new _hx_array(array($mod2)));
									$this->context->actionContext->get_uriParts()->splice(0, 2);
									$this6 = _hx_field(haxe_rtti_Meta::getFields(_hx_qtype("microbe.control.MicrobeController")), "setup")->wrapResult[0];
									$wrappingRequired5 = $this6;
									$result5 = $this->wrapResult($this->setup($mod2), $wrappingRequired5);
									$this->setContextActionResultWhenFinished($result5);
									{
										$GLOBALS['%s']->pop();
										return $result5;
									}
								}
							}
						}
					}
				}
			}
			throw new HException(ufront_web_HttpError::pageNotFound(_hx_anonymous(array("fileName" => "MicrobeController.hx", "lineNumber" => 16, "className" => "microbe.control.MicrobeController", "methodName" => "execute"))));
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp14 = "Uncaught error while executing " . Std::string($this->context->actionContext->controller) . ".";
				{
					$tmp = ufront_core_SurpriseTools::asSurpriseError($e, _hx_string_or_null($tmp14) . _hx_string_or_null($this->context->actionContext->action) . "()", _hx_anonymous(array("fileName" => "MicrobeController.hx", "lineNumber" => 16, "className" => "microbe.control.MicrobeController", "methodName" => "execute")));
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	static function asPromise($surp) {
		$GLOBALS['%s']->push("microbe.control.MicrobeController::asPromise");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = $surp;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'microbe.control.MicrobeController'; }
}
microbe_control_MicrobeController::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("rtti" => (new _hx_array(array((new _hx_array(array("microbeApi", "microbe.apis.MicrobialApiAsync", ""))), (new _hx_array(array("models", "List<Dynamic>", "models"))), (new _hx_array(array("micPath", "String", "micPath"))), (new _hx_array(array("init", "1")))))), "viewFolder" => (new _hx_array(array("microbe"))), "layout" => (new _hx_array(array("microbeLayout.html"))))), "fields" => _hx_anonymous(array("index" => _hx_anonymous(array("wrapResult" => (new _hx_array(array(3))))), "mods" => _hx_anonymous(array("wrapResult" => (new _hx_array(array(6))))), "plus" => _hx_anonymous(array("wrapResult" => (new _hx_array(array(6))))), "insert" => _hx_anonymous(array("wrapResult" => (new _hx_array(array(6))))), "update" => _hx_anonymous(array("wrapResult" => (new _hx_array(array(6))))), "setup" => _hx_anonymous(array("wrapResult" => (new _hx_array(array(6)))))))));
function microbe_control_MicrobeController_0($n) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::init@37");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return "";
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_control_MicrobeController_1(&$name, $items) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::mods@67");
		$__hx__spos = $GLOBALS['%s']->length;
		ufront_view__TemplateData_TemplateData_Impl_::set(ufront_web_result_ViewResult::$globalValues, "items", $items);
		ufront_view__TemplateData_TemplateData_Impl_::set(ufront_web_result_ViewResult::$globalValues, "mod", $name);
		$obj = _hx_anonymous(array());
		$this2 = null;
		if($obj !== null) {
			$this2 = $obj;
		} else {
			$this2 = _hx_anonymous(array());
		}
		$d = new ufront_web_result_PartialViewResult(ufront_view__TemplateData_TemplateData_Impl_::setObject($this2, _hx_anonymous(array("mod" => $name, "items" => $items))), "index", null);
		{
			$tmp = tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Success($d));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_control_MicrobeController_2(&$_gthis, &$name, $n) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::mods@73");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$pos = _hx_anonymous(array("fileName" => "MicrobeController.hx", "lineNumber" => 74, "className" => "microbe.control.MicrobeController", "methodName" => "mods"));
			if($_gthis->context !== null) {
				$_gthis->context->messages->push(_hx_anonymous(array("msg" => "mods", "pos" => $pos, "type" => ufront_log_MessageType::$MLog)));
			} else {
				haxe_Log::trace("Log: " . "mods", $pos);
			}
		}
		$obj1 = _hx_anonymous(array());
		$this3 = null;
		if($obj1 !== null) {
			$this3 = $obj1;
		} else {
			$this3 = _hx_anonymous(array());
		}
		$data = new ufront_web_result_PartialViewResult(ufront_view__TemplateData_TemplateData_Impl_::setObject($this3, _hx_anonymous(array("mod" => $name, "items" => (new _hx_array(array()))))), "index", null);
		{
			$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($data));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_control_MicrobeController_3(&$f, $o) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::mods@67");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($o->index) {
		case 0:{
			$d1 = _hx_deref($o)->params[0];
			{
				$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($d1));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			{
				$tmp = call_user_func_array($f, array($e));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_control_MicrobeController_4(&$mod, $formule) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::insert@103");
		$__hx__spos = $GLOBALS['%s']->length;
		$d = microbe_result__MicrobeResult_MicrobeModelResult_Impl_::_new($mod, new microbe_comps_wrappers_FormuleWrapper($formule, null, null), "", null);
		{
			$tmp = tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Success($d));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_control_MicrobeController_5($n) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::insert@110");
		$__hx__spos = $GLOBALS['%s']->length;
		$data = new ufront_web_result_ContentResult(Std::string("erreur" . Std::string($n)), null);
		$f1 = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($data));
		{
			$tmp = $f1;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_control_MicrobeController_6(&$f, $o) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::insert@95");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($o->index) {
		case 0:{
			$d1 = _hx_deref($o)->params[0];
			{
				$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($d1));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			{
				$tmp = call_user_func_array($f, array($e));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_control_MicrobeController_7(&$mod, $o) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::update@136");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($o->index) {
		case 0:{
			$formule = _hx_deref($o)->params[0];
			{
				$tmp = microbe_result__MicrobeResult_MicrobeModelResult_Impl_::_new($mod, new microbe_comps_wrappers_FormuleWrapper($formule, null, null), "", null);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 1:{
			$r = _hx_deref($o)->params[0];
			{
				$tmp = new ufront_web_result_ContentResult(Std::string($r), null);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_control_MicrobeController_8($l) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::setup@156");
		$__hx__spos = $GLOBALS['%s']->length;
		$d = new ufront_web_result_ContentResult("ok table créée", null);
		{
			$tmp = tink_core__Promise_Promise_Impl_::ofOutcome(tink_core_Outcome::Success($d));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}
function microbe_control_MicrobeController_9($o) {
	{
		$GLOBALS['%s']->push("microbe.control.MicrobeController::setup@155");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($o->index) {
		case 0:{
			$d1 = _hx_deref($o)->params[0];
			{
				$tmp = new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst($d1));
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		case 1:{
			$e = _hx_deref($o)->params[0];
			{
				$GLOBALS['%s']->pop();
				return null;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}

<?php

// Generated by Haxe 3.4.7
class microbe_comps_molecules_OrderedListWrapper extends microbe_comps_Molecule implements microbe_Microbe{
	public function __construct($d, $classes = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.comps.molecules.OrderedListWrapper::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct($d,$classes);
		$GLOBALS['%s']->pop();
	}}
	public $fexec;
	public $fdata;
	public function render() {
		$GLOBALS['%s']->push("microbe.comps.molecules.OrderedListWrapper::render");
		$__hx__spos = $GLOBALS['%s']->length;
		$xarray = (new _hx_array(array()));
		$darray = (new _hx_array(array()));
		$buf = new StringBuf();
		$buf->add("ordered list");
		$buf->add("<ul id=\"orderedList\" class=\"list-group\">");
		{
			$item = $this->data->liste->iterator();
			while($item->hasNext()) {
				$item1 = $item->next();
				$editLink = _hx_string_or_null($this->data->action) . _hx_string_or_null(("/" . _hx_string_or_null($this->data->mod) . "/" . _hx_string_rec($item1->id, "")));
				$item2 = new microbe_comps_molecules_OrderableItem(_hx_anonymous(array("item" => $item1, "link" => $editLink)), null, null);
				$buf->add($item2->render());
				$xarray->push(new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst((property_exists($item2, "execute") ? $item2->execute: array($item2, "execute")))));
				$darray->push(new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst((property_exists($item2, "getData") ? $item2->getData: array($item2, "getData")))));
				unset($item2,$item1,$editLink);
			}
		}
		$this->fexec = tink_core__Future_Future_Impl_::ofMany($xarray, null);
		$this->fdata = tink_core__Future_Future_Impl_::ofMany($darray, null);
		$buf->add("</ul>");
		{
			$tmp = $buf->b;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function execute($ctx) {
		$GLOBALS['%s']->push("microbe.comps.molecules.OrderedListWrapper::execute");
		$__hx__spos = $GLOBALS['%s']->length;
		haxe_Log::trace("i'm a Listwrapper", _hx_anonymous(array("fileName" => "OrderedListWrapper.hx", "lineNumber" => 41, "className" => "microbe.comps.molecules.OrderedListWrapper", "methodName" => "execute")));
		$GLOBALS['%s']->pop();
	}
	public function gatherData() {
		$GLOBALS['%s']->push("microbe.comps.molecules.OrderedListWrapper::gatherData");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $signal;
	function __toString() { return 'microbe.comps.molecules.OrderedListWrapper'; }
}
microbe_comps_molecules_OrderedListWrapper::$signal = new microbe_signal_OrderSignal();

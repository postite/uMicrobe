<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: src/microbe/comps/molecules/SimpleWrapper.hx
 */

namespace microbe\comps\molecules;

use \php\_Boot\HxClosure;
use \ufront\web\context\HttpContext;
use \microbe\comps\atoms\Button;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \microbe\comps\Wrapper;
use \tink\core\_Future\SyncFuture;
use \microbe\FormGenerator;
use \php\_NativeArray\NativeArrayIterator;
use \haxe\Log;
use \tink\core\_Future\Future_Impl_;
use \microbe\IMicrobeWrapper;
use \microbe\tools\PostData;
use \microbe\comps\atoms\Label;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;

class SimpleWrapper extends Wrapper implements IMicrobeWrapper {
	/**
	 * @var FutureObject
	 */
	public $fdata;
	/**
	 * @var FutureObject
	 */
	public $fexec;
	/**
	 * @var FutureObject
	 */
	public $fvalid;
	/**
	 * @var mixed
	 */
	public $pr;


	/**
	 * @param mixed $d
	 * @param string $name
	 * @param \Array_hx $classes
	 * 
	 * @return void
	 */
	public function __construct ($d, $name = null, $classes = null) {
		#src/microbe/comps/molecules/SimpleWrapper.hx:13: lines 13-106
		parent::__construct($d, $name, $classes);
	}


	/**
	 * @param HttpContext $ctx
	 * 
	 * @return void
	 */
	public function execute ($ctx) {
		#src/microbe/comps/molecules/SimpleWrapper.hx:51: characters 3-8
		(Log::$trace)("i'm a wrapper", new HxAnon([
			"fileName" => "src/microbe/comps/molecules/SimpleWrapper.hx",
			"lineNumber" => 51,
			"className" => "microbe.comps.molecules.SimpleWrapper",
			"methodName" => "execute",
		]));
	}


	/**
	 * @param string $url
	 * @param mixed $state
	 * 
	 * @return bool
	 */
	public function onState ($url, $state) {
		#src/microbe/comps/molecules/SimpleWrapper.hx:84: characters 3-8
		(Log::$trace)("simplewrapper url=" . ($url??'null'), new HxAnon([
			"fileName" => "src/microbe/comps/molecules/SimpleWrapper.hx",
			"lineNumber" => 84,
			"className" => "microbe.comps.molecules.SimpleWrapper",
			"methodName" => "onState",
		]));
		#src/microbe/comps/molecules/SimpleWrapper.hx:85: characters 3-28
		$formule = $this->gatherData();
		#src/microbe/comps/molecules/SimpleWrapper.hx:87: characters 14-28
		$f = new NativeArrayIterator(array_map("strval", array_keys($formule->data)));
		#src/microbe/comps/molecules/SimpleWrapper.hx:87: characters 14-28
		while ($f->hasNext()) {
			#src/microbe/comps/molecules/SimpleWrapper.hx:87: lines 87-89
			$f1 = $f->next();
			#src/microbe/comps/molecules/SimpleWrapper.hx:88: characters 4-44
			\Reflect::setField($state, $f1, ($formule->data[$f1] ?? null));
		}

		#src/microbe/comps/molecules/SimpleWrapper.hx:90: characters 3-33
		PostData::serializeStatePostData($state);
		#src/microbe/comps/molecules/SimpleWrapper.hx:91: characters 11-29
		console->log($state);
		#src/microbe/comps/molecules/SimpleWrapper.hx:97: characters 3-14
		return true;
	}


	/**
	 * @return string
	 */
	public function render () {
		#src/microbe/comps/molecules/SimpleWrapper.hx:20: characters 3-19
		$xarray = new \Array_hx();
		#src/microbe/comps/molecules/SimpleWrapper.hx:21: characters 3-19
		$darray = new \Array_hx();
		#src/microbe/comps/molecules/SimpleWrapper.hx:22: characters 3-18
		$varray = new \Array_hx();
		#src/microbe/comps/molecules/SimpleWrapper.hx:23: characters 3-28
		$buf = new \StringBuf();
		#src/microbe/comps/molecules/SimpleWrapper.hx:25: characters 17-28
		$field = new NativeArrayIterator(array_map("strval", array_keys($this->data->data)));
		#src/microbe/comps/molecules/SimpleWrapper.hx:25: characters 17-28
		while ($field->hasNext()) {
			#src/microbe/comps/molecules/SimpleWrapper.hx:25: lines 25-40
			$field1 = $field->next();
			#src/microbe/comps/molecules/SimpleWrapper.hx:26: characters 4-31
			if ($field1 === "model") {
				#src/microbe/comps/molecules/SimpleWrapper.hx:26: characters 23-31
				continue;
			}
			#src/microbe/comps/molecules/SimpleWrapper.hx:27: characters 4-35
			$comp = Boot::dynamicField(($this->data->data[$field1] ?? null), 'comp');
			#src/microbe/comps/molecules/SimpleWrapper.hx:28: characters 4-34
			$name = Boot::dynamicField(($this->data->data[$field1] ?? null), 'name');
			#src/microbe/comps/molecules/SimpleWrapper.hx:29: characters 4-35
			$data = Boot::dynamicField(($this->data->data[$field1] ?? null), 'data');
			#src/microbe/comps/molecules/SimpleWrapper.hx:30: characters 4-23
			$mic = FormGenerator::instanciateComp($comp, new HxAnon([
				"v" => $data,
				"n" => $field1,
			]), $field1);
			#src/microbe/comps/molecules/SimpleWrapper.hx:33: characters 4-42
			$buf->add((new Label(new HxAnon(["v" => $name])))->render());
			#src/microbe/comps/molecules/SimpleWrapper.hx:34: characters 4-25
			$buf->add($mic->render());
			#src/microbe/comps/molecules/SimpleWrapper.hx:37: characters 4-41
			$x = new SyncFuture(new LazyConst(new HxClosure($mic, 'execute')));
			#src/microbe/comps/molecules/SimpleWrapper.hx:37: characters 4-41
			$xarray->arr[$xarray->length] = $x;
			#src/microbe/comps/molecules/SimpleWrapper.hx:37: characters 4-41
			++$xarray->length;

			#src/microbe/comps/molecules/SimpleWrapper.hx:38: characters 4-41
			$x1 = new SyncFuture(new LazyConst(new HxClosure($mic, 'getData')));
			#src/microbe/comps/molecules/SimpleWrapper.hx:38: characters 4-41
			$darray->arr[$darray->length] = $x1;
			#src/microbe/comps/molecules/SimpleWrapper.hx:38: characters 4-41
			++$darray->length;

		}

		#src/microbe/comps/molecules/SimpleWrapper.hx:42: characters 3-32
		$this->fexec = Future_Impl_::ofMany($xarray);
		#src/microbe/comps/molecules/SimpleWrapper.hx:43: characters 3-30
		$this->fdata = Future_Impl_::ofMany($darray);
		#src/microbe/comps/molecules/SimpleWrapper.hx:44: characters 3-31
		$this->fvalid = Future_Impl_::ofMany($varray);
		#src/microbe/comps/molecules/SimpleWrapper.hx:46: characters 3-97
		$buf->add((new Button(new HxAnon([
			"v" => "ok",
			"type" => "Submit",
			"n" => "submit",
		]), null, \Array_hx::wrap(["okButt"])))->render());
		#src/microbe/comps/molecules/SimpleWrapper.hx:47: characters 3-24
		return $buf->b;
	}
}


Boot::registerClass(SimpleWrapper::class, 'microbe.comps.molecules.SimpleWrapper');

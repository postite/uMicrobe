<?php

// Generated by Haxe 3.4.7
class microbe_comps_molecules_SimpleWrapper extends microbe_comps_Wrapper implements microbe_IMicrobeWrapper{
	public function __construct($d, $name = null, $classes = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.comps.molecules.SimpleWrapper::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct($d,$name,$classes);
		$GLOBALS['%s']->pop();
	}}
	public $pr;
	public $fexec;
	public $fdata;
	public $fvalid;
	public function render() {
		$GLOBALS['%s']->push("microbe.comps.molecules.SimpleWrapper::render");
		$__hx__spos = $GLOBALS['%s']->length;
		$xarray = (new _hx_array(array()));
		$darray = (new _hx_array(array()));
		$varray = (new _hx_array(array()));
		$buf = new StringBuf();
		{
			$field = $this->data->keys();
			while($field->hasNext()) {
				$field1 = $field->next();
				if($field1 === "model") {
					continue;
				}
				$comp = _hx_field($this->data->get($field1), "comp");
				$name = _hx_field($this->data->get($field1), "name");
				$data = _hx_field($this->data->get($field1), "data");
				$mic = microbe_FormGenerator::instanciateComp($comp, _hx_anonymous(array("v" => $data, "n" => $field1)), $field1);
				$tmp = _hx_deref(new microbe_comps_atoms_Label(_hx_anonymous(array("v" => $name)), null, null))->render();
				$buf->add($tmp);
				$buf->add($mic->render());
				$xarray->push(new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst((property_exists($mic, "execute") ? $mic->execute: array($mic, "execute")))));
				$darray->push(new tink_core__Future_SyncFuture(new tink_core__Lazy_LazyConst((property_exists($mic, "getData") ? $mic->getData: array($mic, "getData")))));
				unset($tmp,$name,$mic,$field1,$data,$comp);
			}
		}
		$this->fexec = tink_core__Future_Future_Impl_::ofMany($xarray, null);
		$this->fdata = tink_core__Future_Future_Impl_::ofMany($darray, null);
		$this->fvalid = tink_core__Future_Future_Impl_::ofMany($varray, null);
		$tmp1 = _hx_deref(new microbe_comps_atoms_Button(_hx_anonymous(array("v" => "ok", "type" => "Submit", "n" => "submit")), null, (new _hx_array(array("okButt")))))->render();
		$buf->add($tmp1);
		{
			$tmp = $buf->b;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function execute($ctx) {
		$GLOBALS['%s']->push("microbe.comps.molecules.SimpleWrapper::execute");
		$__hx__spos = $GLOBALS['%s']->length;
		haxe_Log::trace("i'm a wrapper", _hx_anonymous(array("fileName" => "SimpleWrapper.hx", "lineNumber" => 51, "className" => "microbe.comps.molecules.SimpleWrapper", "methodName" => "execute")));
		$GLOBALS['%s']->pop();
	}
	public function onState($url, $state) {
		$GLOBALS['%s']->push("microbe.comps.molecules.SimpleWrapper::onState");
		$__hx__spos = $GLOBALS['%s']->length;
		haxe_Log::trace("simplewrapper url=" . _hx_string_or_null($url), _hx_anonymous(array("fileName" => "SimpleWrapper.hx", "lineNumber" => 84, "className" => "microbe.comps.molecules.SimpleWrapper", "methodName" => "onState")));
		$formule = $this->gatherData();
		{
			$f = $formule->keys();
			while($f->hasNext()) {
				$f1 = $f->next();
				$value = $formule->get($f1);
				$state->{$f1} = $value;
				unset($value,$f1);
			}
		}
		microbe_tools_PostData::serializeStatePostData($state);
		$console->log($state);
		{
			$GLOBALS['%s']->pop();
			return true;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'microbe.comps.molecules.SimpleWrapper'; }
}

<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: src/microbe/comps/Atom.hx
 */

namespace microbe\comps;

use \microbe\Microbe;
use \microbe\IBehaviour;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\Log;
use \ufront\core\Uuid;
use \php\_Boot\HxAnon;

class Atom {
	/**
	 * @var \Array_hx
	 */
	public $classes;
	/**
	 * @var mixed
	 */
	public $data;
	/**
	 * @var string
	 */
	public $dataId;
	/**
	 * @var string
	 */
	public $id;
	/**
	 * @var string
	 */
	public $name;


	/**
	 * @param mixed $d
	 * @param string $name
	 * @param \Array_hx $classes
	 * 
	 * @return void
	 */
	public function __construct ($d, $name = null, $classes = null) {
		#src/microbe/comps/Atom.hx:24: characters 2-13
		$this->data = $d;
		#src/microbe/comps/Atom.hx:25: characters 2-16
		$this->name = $name;
		#src/microbe/comps/Atom.hx:26: characters 2-41
		$this->id = "a" . (strtolower(Uuid::create())??'null');
		#src/microbe/comps/Atom.hx:27: characters 2-50
		$this->classes = ($classes !== null ? $classes : \Array_hx::wrap(["atom"]));
		#src/microbe/comps/Atom.hx:28: characters 2-8
		$this->init();
	}


	/**
	 * @param string $cl
	 * 
	 * @return void
	 */
	public function addClass ($cl) {
		#src/microbe/comps/Atom.hx:54: characters 2-23
		$_this = $this->classes;
		#src/microbe/comps/Atom.hx:54: characters 2-23
		$_this->arr[$_this->length] = $cl;
		#src/microbe/comps/Atom.hx:54: characters 2-23
		++$_this->length;
	}


	/**
	 * @param string $err
	 * 
	 * @return void
	 */
	public function afficheValidation ($err) {
		#src/microbe/comps/Atom.hx:95: characters 2-7
		(Log::$trace)("afficheValidateElement", new HxAnon([
			"fileName" => "src/microbe/comps/Atom.hx",
			"lineNumber" => 95,
			"className" => "microbe.comps.Atom",
			"methodName" => "afficheValidation",
		]));
	}


	/**
	 * @return string
	 */
	public function getClasses () {
		#src/microbe/comps/Atom.hx:44: characters 2-26
		$c = $this->classes->join(" ");
		#src/microbe/comps/Atom.hx:45: characters 2-21
		return "class=\"" . ($c??'null') . "\"";
	}


	/**
	 * @return mixed
	 */
	public function getData () {
		#src/microbe/comps/Atom.hx:40: characters 2-13
		return $this->data;
	}


	/**
	 * @return string
	 */
	public function getDataId () {
		#src/microbe/comps/Atom.hx:72: characters 2-7
		throw new HxException("not implemented");
	}


	/**
	 * @return string
	 */
	public function getId () {
		#src/microbe/comps/Atom.hx:62: characters 2-19
		return "id=\"" . ($this->id??'null') . "\"";
	}


	/**
	 * @return void
	 */
	public function init () {
	}


	/**
	 * @return void
	 */
	public function removeValidateElement () {
		#src/microbe/comps/Atom.hx:85: characters 2-7
		(Log::$trace)("removeValidateElement", new HxAnon([
			"fileName" => "src/microbe/comps/Atom.hx",
			"lineNumber" => 85,
			"className" => "microbe.comps.Atom",
			"methodName" => "removeValidateElement",
		]));
	}


	/**
	 * @param IBehaviour $behave
	 * 
	 * @return void
	 */
	public function setBehaviour ($behave) {
		#src/microbe/comps/Atom.hx:65: characters 2-7
		throw new HxException("not implemented");
	}


	/**
	 * @param \Array_hx $classes
	 * 
	 * @return void
	 */
	public function setClasses ($classes) {
		#src/microbe/comps/Atom.hx:51: characters 2-22
		$this->classes = $classes;
	}


	/**
	 * @param mixed $d
	 * 
	 * @return Microbe
	 */
	public function setData ($d) {
		#src/microbe/comps/Atom.hx:36: characters 3-14
		$this->data = $d;
		#src/microbe/comps/Atom.hx:37: characters 3-19
		return $this;
	}


	/**
	 * @param string $id
	 * 
	 * @return void
	 */
	public function setId ($id) {
		#src/microbe/comps/Atom.hx:57: characters 2-7
		throw new HxException("not implemented");
	}


	/**
	 * @param string $dataId
	 * 
	 * @return void
	 */
	public function setdataId ($dataId) {
		#src/microbe/comps/Atom.hx:68: characters 2-7
		throw new HxException("not implemented");
	}


	/**
	 * @param StringMap $err
	 * @param string $field
	 * 
	 * @return void
	 */
	public function validate ($err, $field) {
		#src/microbe/comps/Atom.hx:77: lines 77-80
		if (array_key_exists($field, $err->data)) {
			#src/microbe/comps/Atom.hx:78: characters 4-37
			$this->afficheValidation(($err->data[$field] ?? null));
		} else {
			#src/microbe/comps/Atom.hx:80: characters 3-26
			$this->removeValidateElement();
		}
	}
}


Boot::registerClass(Atom::class, 'microbe.comps.Atom');

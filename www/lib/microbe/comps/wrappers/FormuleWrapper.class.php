<?php

// Generated by Haxe 3.4.7
class microbe_comps_wrappers_FormuleWrapper extends microbe_comps_Wrapper implements microbe_IMicrobeWrapper{
	public function __construct($d, $name = null, $classes = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.comps.wrappers.FormuleWrapper::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->valide = false;
		parent::__construct($d,$name,$classes);
		$GLOBALS['%s']->pop();
	}}
	public $mics;
	public $fexec;
	public $fdata;
	public $fvalid;
	public $injector;
	public $ctx;
	public $okButton;
	public $deleteButton;
	public function render() {
		$GLOBALS['%s']->push("microbe.comps.wrappers.FormuleWrapper::render");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->mics = (new _hx_array(array()));
		$buf = new StringBuf();
		$tmp = "<div " . _hx_string_or_null($this->getId()) . " ";
		$buf->add(_hx_string_or_null($tmp) . _hx_string_or_null($this->getClasses()) . " >");
		{
			$field = $this->data->keys();
			while($field->hasNext()) {
				$field1 = $field->next();
				if($field1 === "model") {
					continue;
				}
				$comp = _hx_field($this->data->get($field1), "comp");
				$data = _hx_field($this->data->get($field1), "data");
				$mic = microbe_FormGenerator::instanciateComp($comp, _hx_anonymous(array("v" => $data, "n" => $field1)), $field1);
				$buf->add($mic->render());
				$this->mics->push($mic);
				unset($mic,$field1,$data,$comp);
			}
		}
		$this->okButton = new microbe_comps_atoms_OkButton(_hx_anonymous(array("v" => "ok", "type" => "Submit", "n" => "submit")), null, (new _hx_array(array("okbutt"))));
		$buf->add($this->okButton->render());
		$this->deleteButton = new microbe_comps_atoms_NopeButton(_hx_anonymous(array("v" => "efface", "type" => "button", "n" => "submit")), null, (new _hx_array(array("delbutt"))));
		$buf->add($this->deleteButton->render());
		$buf->add("</div>");
		{
			$tmp2 = $buf->b;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function execute($ctx) {
		$GLOBALS['%s']->push("microbe.comps.wrappers.FormuleWrapper::execute");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
	public $valide;
	public function gatherData() {
		$GLOBALS['%s']->push("microbe.comps.wrappers.FormuleWrapper::gatherData");
		$__hx__spos = $GLOBALS['%s']->length;
		$formule = $this->data;
		{
			$GLOBALS['%s']->pop();
			return $formule;
		}
		$GLOBALS['%s']->pop();
	}
	public function validateComps($errors) {
		$GLOBALS['%s']->push("microbe.comps.wrappers.FormuleWrapper::validateComps");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
	public function delete() {
		$GLOBALS['%s']->push("microbe.comps.wrappers.FormuleWrapper::delete");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
	public function reload() {
		$GLOBALS['%s']->push("microbe.comps.wrappers.FormuleWrapper::reload");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'microbe.comps.wrappers.FormuleWrapper'; }
}

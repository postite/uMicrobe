<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 * Haxe source file: src/microbe/comps/wrappers/FakeWrapper.hx
 */

namespace microbe\comps\wrappers;

use \ufront\web\context\HttpContext;
use \haxe\ds\StringMap;
use \php\Boot;
use \microbe\comps\Wrapper;
use \php\_NativeArray\NativeArrayIterator;
use \microbe\IMicrobeWrapper;
use \minject\Injector;
use \php\_Boot\HxAnon;
use \microbe\comps\atoms\OkButton;

class FakeWrapper extends Wrapper implements IMicrobeWrapper {
	/**
	 * @var HttpContext
	 */
	public $ctx;
	/**
	 * @var OkButton
	 */
	public $deleteButton;
	/**
	 * @var Injector
	 */
	public $injector;
	/**
	 * @var \Array_hx
	 */
	public $mics;
	/**
	 * @var OkButton
	 */
	public $okButton;
	/**
	 * @var bool
	 */
	public $valide;


	/**
	 * @param mixed $d
	 * @param \Array_hx $classes
	 * 
	 * @return void
	 */
	public function __construct ($d, $classes = null) {
		#src/microbe/comps/wrappers/FakeWrapper.hx:110: characters 18-23
		$this->valide = false;
		#src/microbe/comps/wrappers/FakeWrapper.hx:19: characters 2-10
		parent::__construct($d);
	}


	/**
	 * @param string $msg
	 * 
	 * @return void
	 */
	public function afficheErreur ($msg) {
	}


	/**
	 * @return void
	 */
	public function delete () {
	}


	/**
	 * @param HttpContext $ctx
	 * 
	 * @return void
	 */
	public function execute ($ctx) {
	}


	/**
	 * @return StringMap
	 */
	public function gatherData () {
		#src/microbe/comps/wrappers/FakeWrapper.hx:113: characters 12-29
		console->log($this->data);
		#src/microbe/comps/wrappers/FakeWrapper.hx:114: characters 3-30
		$formule = $this->data;
		#src/microbe/comps/wrappers/FakeWrapper.hx:182: characters 3-17
		return $formule;
	}


	/**
	 * @return string
	 */
	public function render () {
		#src/microbe/comps/wrappers/FakeWrapper.hx:28: characters 5-30
		$buf = new \StringBuf();
		#src/microbe/comps/wrappers/FakeWrapper.hx:29: characters 4-48
		$buf->add("<div " . ($this->getId()??'null') . " " . ($this->getClasses()??'null') . " >");
		#src/microbe/comps/wrappers/FakeWrapper.hx:30: characters 17-28
		$field = new NativeArrayIterator(array_map("strval", array_keys($this->data->data)));
		#src/microbe/comps/wrappers/FakeWrapper.hx:30: characters 17-28
		while ($field->hasNext()) {
			#src/microbe/comps/wrappers/FakeWrapper.hx:30: lines 30-49
			$field1 = $field->next();
			#src/microbe/comps/wrappers/FakeWrapper.hx:31: characters 4-31
			if ($field1 === "model") {
				#src/microbe/comps/wrappers/FakeWrapper.hx:31: characters 23-31
				continue;
			}
			#src/microbe/comps/wrappers/FakeWrapper.hx:32: characters 4-35
			$comp = Boot::dynamicField(($this->data->data[$field1] ?? null), 'comp');
			#src/microbe/comps/wrappers/FakeWrapper.hx:33: characters 4-35
			$data = Boot::dynamicField(($this->data->data[$field1] ?? null), 'data');
		}

		#src/microbe/comps/wrappers/FakeWrapper.hx:55: characters 3-11
		$this->okButton = new OkButton(new HxAnon([
			"v" => "ok",
			"type" => "Submit",
			"n" => "submit",
		]), null, \Array_hx::wrap(["okbutt"]));
		#src/microbe/comps/wrappers/FakeWrapper.hx:57: characters 3-29
		$buf->add($this->okButton->render());
		#src/microbe/comps/wrappers/FakeWrapper.hx:58: characters 3-15
		$this->deleteButton = new OkButton(new HxAnon([
			"v" => "efface",
			"type" => "button",
			"n" => "submit",
		]), null, \Array_hx::wrap(["delbutt"]));
		#src/microbe/comps/wrappers/FakeWrapper.hx:59: characters 3-33
		$buf->add($this->deleteButton->render());
		#src/microbe/comps/wrappers/FakeWrapper.hx:60: characters 3-20
		$buf->add("</div>");
		#src/microbe/comps/wrappers/FakeWrapper.hx:61: characters 3-24
		return $buf->b;
	}


	/**
	 * @return string
	 */
	public function test () {
		#src/microbe/comps/wrappers/FakeWrapper.hx:69: characters 3-15
		return "hep";
	}


	/**
	 * @param StringMap $errors
	 * 
	 * @return void
	 */
	public function validateComps ($errors) {
	}
}


Boot::registerClass(FakeWrapper::class, 'microbe.comps.wrappers.FakeWrapper');

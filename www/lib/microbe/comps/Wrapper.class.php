<?php

// Generated by Haxe 3.4.7
class microbe_comps_Wrapper implements microbe_IMicrobeWrapper{
	public function __construct($d, $name = null, $classes = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.comps.Wrapper::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->data = $d;
		$this->name = $name;
		$this->id = "A" . _hx_string_or_null(ufront_core_Uuid::create());
		$tmp = null;
		if($classes !== null) {
			$tmp = $classes;
		} else {
			$tmp = (new _hx_array(array("wrapper")));
		}
		$this->classes = $tmp;
		$GLOBALS['%s']->pop();
	}}
	public $data;
	public $classes;
	public $id;
	public $dataId;
	public $name;
	public $formUrl;
	public function setFormUrl($url) {
		$GLOBALS['%s']->push("microbe.comps.Wrapper::setFormUrl");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->formUrl = $url;
		$GLOBALS['%s']->pop();
	}
	public function setData($d) {
		$GLOBALS['%s']->push("microbe.comps.Wrapper::setData");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->data = $d;
		{
			$tmp = $this;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function gatherData() {
		$GLOBALS['%s']->push("microbe.comps.Wrapper::gatherData");
		$__hx__spos = $GLOBALS['%s']->length;
		throw new HException("abstract method");
		$GLOBALS['%s']->pop();
	}
	public function render() {
		$GLOBALS['%s']->push("microbe.comps.Wrapper::render");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return "";
		}
		$GLOBALS['%s']->pop();
	}
	public function getId() {
		$GLOBALS['%s']->push("microbe.comps.Wrapper::getId");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = "id=\"" . _hx_string_or_null($this->id) . "\"";
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getClasses() {
		$GLOBALS['%s']->push("microbe.comps.Wrapper::getClasses");
		$__hx__spos = $GLOBALS['%s']->length;
		$c = $this->classes->join(" ");
		{
			$tmp = "class=\"" . _hx_string_or_null($c) . "\"";
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setClasses($classes) {
		$GLOBALS['%s']->push("microbe.comps.Wrapper::setClasses");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->classes = $classes;
		$GLOBALS['%s']->pop();
	}
	public function addClass($cl) {
		$GLOBALS['%s']->push("microbe.comps.Wrapper::addClass");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->classes->push($cl);
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'microbe.comps.Wrapper'; }
}

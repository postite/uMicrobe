<?php

// Generated by Haxe 3.4.7
class microbe_comps_atoms_Calendar extends microbe_comps_Atom implements microbe_Microbe{
	public function __construct($d, $name, $classes = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.comps.atoms.Calendar::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct($d,$name,$classes);
		if($d->v !== null) {
			$this->curDate = $d->v;
		} else {
			$this->curDate = Date::now();
		}
		$this->curDay = $this->curDate->getDate();
		$this->curYear = $this->curDate->getFullYear();
		$this->curMonth = $this->curDate->getMonth();
		$this->calendarData = _hx_anonymous(array("monthDays" => (new _hx_array(array())), "month" => $this->curMonth, "monthBefore" => $this->curMonth - 1, "monthAfter" => $this->curMonth + 1, "year" => $this->curYear, "jours" => (new _hx_array(array("lun", "mar", "mer", "jeu", "ven", "sam", "dim")))));
		$GLOBALS['%s']->pop();
	}}
	public $selectedDate;
	public $curDate;
	public $curMonth;
	public $curYear;
	public $curDay;
	public $calendarData;
	public function render() {
		$GLOBALS['%s']->push("microbe.comps.atoms.Calendar::render");
		$__hx__spos = $GLOBALS['%s']->length;
		$buf = new StringBuf();
		$buf->add("<div " . _hx_string_or_null($this->getId()) . " class=\"calendar\">");
		$buf->add("<div class=\"nav\">\x0A\x09\x09\x09\x09<div class=\"mois before\">" . _hx_string_or_null($this->calendarData->monthBefore) . "</div>\x0A\x09\x09\x09\x09<div class=\"mois\">" . _hx_string_or_null($this->calendarData->month) . "</div>\x0A\x09\x09\x09\x09<div class=\"mois after\">" . _hx_string_or_null($this->calendarData->monthAfter) . "</div>\x0A\x09\x09\x09\x09</div>\x0A\x09\x09\x09\x09");
		$buf->add("<div class=\"monthBox\">");
		{
			$_g = 0;
			$_g1 = $this->calendarData->jours;
			while($_g < $_g1->length) {
				$jour = $_g1[$_g];
				$_g = $_g + 1;
				$buf->add("\x0A\x09\x09\x09\x09<div class=\"cell jours\">\x0A\x09\x09\x09\x09" . _hx_string_or_null($jour) . "\x0A\x09\x09\x09\x09</div>");
				unset($jour);
			}
		}
		{
			$_g2 = 0;
			$_g11 = $this->calendarData->monthDays;
			while($_g2 < $_g11->length) {
				$day = $_g11[$_g2];
				$_g2 = $_g2 + 1;
				$tmp = null;
				if($day !== 0) {
					$tmp = Std::string($day);
				} else {
					$tmp = "";
				}
				$buf->add("\x0A\x09\x09\x09\x09<div class=\"cell\" data-id=\"" . _hx_string_rec($day, "") . "\">\x0A\x09\x09\x09\x09" . _hx_string_or_null($tmp) . "\x0A\x09\x09\x09\x09</div>");
				unset($tmp,$day);
			}
		}
		$buf->add("</div>");
		$buf->add("</div>");
		{
			$tmp = $buf->b;
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function execute($ctx) {
		$GLOBALS['%s']->push("microbe.comps.atoms.Calendar::execute");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
	public function setData($d) {
		$GLOBALS['%s']->push("microbe.comps.atoms.Calendar::setData");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $this;
		}
		$GLOBALS['%s']->pop();
	}
	public function getData() {
		$GLOBALS['%s']->push("microbe.comps.atoms.Calendar::getData");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		if($this->selectedDate !== null) {
			$tmp = $this->selectedDate;
		} else {
			$tmp = $this->curDate;
		}
		{
			$tmp2 = _hx_anonymous(array("n" => $this->name, "v" => $tmp));
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $mois;
	static $jours;
	static function getMois($d) {
		$GLOBALS['%s']->push("microbe.comps.atoms.Calendar::getMois");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = microbe_comps_atoms_Calendar::$mois[$d->getMonth()];
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function getJour($d) {
		$GLOBALS['%s']->push("microbe.comps.atoms.Calendar::getJour");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = microbe_comps_atoms_Calendar::$jours[$d->getDay() - 1];
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'microbe.comps.atoms.Calendar'; }
}
microbe_comps_atoms_Calendar::$mois = (new _hx_array(array("Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Aout", "Septembre", "Octobre", "Novembre", "DÃ©cembre")));
microbe_comps_atoms_Calendar::$jours = (new _hx_array(array("lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi", "dimanche")));

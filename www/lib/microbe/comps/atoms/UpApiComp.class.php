<?php

// Generated by Haxe 3.4.7
class microbe_comps_atoms_UpApiComp extends microbe_comps_Atom implements microbe_Microbe{
	public function __construct($d, $name = null, $classes = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.comps.atoms.UpApiComp::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->previewId = "previewIco";
		$this->inputId = "file-upload";
		parent::__construct($d,$name,$classes);
		$GLOBALS['%s']->pop();
	}}
	public $inputId;
	public $previewId;
	public $assetPath;
	public $upsPath;
	public function render() {
		$GLOBALS['%s']->push("microbe.comps.atoms.UpApiComp::render");
		$__hx__spos = $GLOBALS['%s']->length;
		$src = null;
		if($this->data->v !== null) {
			$src = _hx_string_or_null($this->upsPath) . "/" . _hx_string_or_null($this->data->v);
		} else {
			$src = "" . _hx_string_or_null($this->assetPath) . "/turn.png";
		}
		$tmp = "<div " . _hx_string_or_null($this->getId()) . " >\x0A\x09<div id=\"";
		{
			$tmp2 = _hx_string_or_null($tmp) . _hx_string_or_null($this->previewId) . "\">\x0A\x09<img src=\"" . _hx_string_or_null($src) . "\"/>\x0A\x09</div>\x0A\x09<input type=\"hidden\" id=\"" . _hx_string_or_null($this->data->n) . "\" name=\"" . _hx_string_or_null($this->data->n) . "\" value=\"" . _hx_string_or_null($src) . "\">" . _hx_string_or_null($src) . "</input>\x0A\x09<input id=\"file-upload\" size=\"15M\" type=\"file\" multiple=\"false\"/>\x0A\x09</div>";
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function execute($ctx) {
		$GLOBALS['%s']->push("microbe.comps.atoms.UpApiComp::execute");
		$__hx__spos = $GLOBALS['%s']->length;
		$GLOBALS['%s']->pop();
	}
	public function getData() {
		$GLOBALS['%s']->push("microbe.comps.atoms.UpApiComp::getData");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	function __toString() { return 'microbe.comps.atoms.UpApiComp'; }
}
microbe_comps_atoms_UpApiComp::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("rtti" => (new _hx_array(array((new _hx_array(array("assetPath", "String", "assetPath"))), (new _hx_array(array("upsPath", "String", "upsPath"))))))))));

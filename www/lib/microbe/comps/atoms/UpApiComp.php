<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 * Haxe source file: src/microbe/comps/atoms/UpApiComp.hx
 */

namespace microbe\comps\atoms;

use \microbe\Microbe;
use \microbe\comps\Atom;
use \ufront\web\context\HttpContext;
use \php\Boot;
use \php\_Boot\HxAnon;

class UpApiComp extends Atom implements Microbe {


	/**
	 * @var string
	 */
	public $assetPath;
	/**
	 * @var string
	 */
	public $inputId;
	/**
	 * @var string
	 */
	public $previewId;
	/**
	 * @var string
	 */
	public $upsPath;


	/**
	 * @param mixed $d
	 * @param string $name
	 * @param \Array_hx $classes
	 * 
	 * @return void
	 */
	public function __construct ($d, $name = null, $classes = null) {
		#src/microbe/comps/atoms/UpApiComp.hx:15: characters 23-35
		$this->previewId = "previewIco";
		#src/microbe/comps/atoms/UpApiComp.hx:14: characters 21-34
		$this->inputId = "file-upload";
		#src/microbe/comps/atoms/UpApiComp.hx:13: lines 13-129
		parent::__construct($d, $name, $classes);
	}


	/**
	 * @param HttpContext $ctx
	 * 
	 * @return void
	 */
	public function execute ($ctx) {
	}


	/**
	 * @return mixed
	 */
	public function getData () {
		#src/microbe/comps/atoms/UpApiComp.hx:126: characters 3-14
		return null;
	}


	/**
	 * @return string
	 */
	public function render () {
		#src/microbe/comps/atoms/UpApiComp.hx:32: characters 3-70
		$src = ($this->data->v !== null ? ($this->upsPath??'null') . "/" . ($this->data->v??'null') : "" . ($this->assetPath??'null') . "/turn.png");
		#src/microbe/comps/atoms/UpApiComp.hx:33: lines 33-39
		return "<div " . ($this->getId()??'null') . " >\x0A\x09<div id=\"" . ($this->previewId??'null') . "\">\x0A\x09<img src=\"" . ($src??'null') . "\"/>\x0A\x09</div>\x0A\x09<input type=\"hidden\" id=\"" . ($this->data->n??'null') . "\" name=\"" . ($this->data->n??'null') . "\" value=\"" . ($src??'null') . "\">" . ($src??'null') . "</input>\x0A\x09<input id=\"file-upload\" size=\"15M\" type=\"file\" multiple=\"false\"/>\x0A\x09</div>";
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(UpApiComp::class, 'microbe.comps.atoms.UpApiComp');
Boot::registerMeta(UpApiComp::class, new HxAnon(["obj" => new HxAnon(["rtti" => \Array_hx::wrap([
	\Array_hx::wrap([
		"assetPath",
		"String",
		"assetPath",
	]),
	\Array_hx::wrap([
		"upsPath",
		"String",
		"upsPath",
	]),
])])]));
UpApiComp::__hx__init();

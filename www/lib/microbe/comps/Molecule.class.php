<?php

// Generated by Haxe 3.4.7
class microbe_comps_Molecule extends microbe_comps_Atom {
	public function __construct($d, $classes = null) {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.comps.Molecule::new");
		$__hx__spos = $GLOBALS['%s']->length;
		$this->children = new haxe_ds_StringMap();
		if($classes === null) {
			$classes = (new _hx_array(array("mol")));
		}
		parent::__construct($d,null,$classes);
		$GLOBALS['%s']->pop();
	}}
	public $children;
	public function gatherData() {
		$GLOBALS['%s']->push("microbe.comps.Molecule::gatherData");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return null;
		}
		$GLOBALS['%s']->pop();
	}
	public function register($a) {
		$GLOBALS['%s']->push("microbe.comps.Molecule::register");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$GLOBALS['%s']->pop();
			return $a;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'microbe.comps.Molecule'; }
}

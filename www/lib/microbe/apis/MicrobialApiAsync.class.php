<?php

// Generated by Haxe 3.4.7
class microbe_apis_MicrobialApiAsync extends ufront_api_UFAsyncApi {
	public function __construct() { if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct();
		$GLOBALS['%s']->pop();
	}}
	public function delete($formule) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::delete");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = 3;
		{
			$tmp = $this->_makeApiCall("delete", (new _hx_array(array($formule))), $this1, _hx_anonymous(array("methodName" => "delete", "lineNumber" => 0, "customParams" => null, "fileName" => "src/microbe/apis/MicrobialApi.hx", "className" => "MicrobialApiAsync")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getAllModels($mod) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::getAllModels");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = 3;
		{
			$tmp = $this->_makeApiCall("getAllModels", (new _hx_array(array($mod))), $this1, _hx_anonymous(array("methodName" => "getAllModels", "lineNumber" => 0, "customParams" => null, "fileName" => "src/microbe/apis/MicrobialApi.hx", "className" => "MicrobialApiAsync")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function recFromFormule($formule) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::recFromFormule");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = 3;
		{
			$tmp = $this->_makeApiCall("recFromFormule", (new _hx_array(array($formule))), $this1, _hx_anonymous(array("methodName" => "recFromFormule", "lineNumber" => 0, "customParams" => null, "fileName" => "src/microbe/apis/MicrobialApi.hx", "className" => "MicrobialApiAsync")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getDataFormule($mod, $id = null) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::getDataFormule");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = 3;
		{
			$tmp = $this->_makeApiCall("getDataFormule", (new _hx_array(array($mod, $id))), $this1, _hx_anonymous(array("methodName" => "getDataFormule", "lineNumber" => 0, "customParams" => null, "fileName" => "src/microbe/apis/MicrobialApi.hx", "className" => "MicrobialApiAsync")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function recModelFromString($mod, $data = null, $id = null) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::recModelFromString");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = 3;
		{
			$tmp = $this->_makeApiCall("recModelFromString", (new _hx_array(array($mod, $data, $id))), $this1, _hx_anonymous(array("methodName" => "recModelFromString", "lineNumber" => 0, "customParams" => null, "fileName" => "src/microbe/apis/MicrobialApi.hx", "className" => "MicrobialApiAsync")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getFormuleFromString($mod) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::getFormuleFromString");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = 3;
		{
			$tmp = $this->_makeApiCall("getFormuleFromString", (new _hx_array(array($mod))), $this1, _hx_anonymous(array("methodName" => "getFormuleFromString", "lineNumber" => 0, "customParams" => null, "fileName" => "src/microbe/apis/MicrobialApi.hx", "className" => "MicrobialApiAsync")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function getAllFromString($mod) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::getAllFromString");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = 3;
		{
			$tmp = $this->_makeApiCall("getAllFromString", (new _hx_array(array($mod))), $this1, _hx_anonymous(array("methodName" => "getAllFromString", "lineNumber" => 0, "customParams" => null, "fileName" => "src/microbe/apis/MicrobialApi.hx", "className" => "MicrobialApiAsync")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function setupTable($mod) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::setupTable");
		$__hx__spos = $GLOBALS['%s']->length;
		$this1 = 3;
		{
			$tmp = $this->_makeApiCall("setupTable", (new _hx_array(array($mod))), $this1, _hx_anonymous(array("methodName" => "setupTable", "lineNumber" => 0, "customParams" => null, "fileName" => "src/microbe/apis/MicrobialApi.hx", "className" => "MicrobialApiAsync")));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function injectApi($injector) {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::injectApi");
		$__hx__spos = $GLOBALS['%s']->length;
		$tmp = null;
		try {
			$tmp = $injector->getValueForType("microbe.apis.MicrobialApi", null);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$e = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp1 = "Failed to inject " . _hx_string_or_null(Type::getClassName(_hx_qtype("microbe.apis.MicrobialApi"))) . " into ";
				$tmp2 = _hx_string_or_null($tmp1) . _hx_string_or_null(Type::getClassName(Type::getClass($this)));
				throw new HException(ufront_web_HttpError::internalServerError($tmp2, $e, _hx_anonymous(array("fileName" => "ApiMacros.hx", "lineNumber" => 272, "className" => "microbe.apis.MicrobialApiAsync", "methodName" => "injectApi"))));
			}
		}
		$this->api = $tmp;
		$this->className = "microbe.apis.MicrobialApi";
		$GLOBALS['%s']->pop();
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	static function _getClass() {
		$GLOBALS['%s']->push("microbe.apis.MicrobialApiAsync::_getClass");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_qtype("microbe.apis.MicrobialApi");
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'microbe.apis.MicrobialApiAsync'; }
}
microbe_apis_MicrobialApiAsync::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("rtti" => (new _hx_array(array((new _hx_array(array("injectApi", "", "minject.Injector", "", ""))))))))));

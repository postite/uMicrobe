<?php

// Generated by Haxe 3.4.7
class microbe_apis_UpApi extends ufront_api_UFApi {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.apis.UpApi::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct();
		$GLOBALS['%s']->pop();
	}}
	public $contentDir;
	public $upsPath;
	public function uploadImage($upload) {
		$GLOBALS['%s']->push("microbe.apis.UpApi::uploadImage");
		$__hx__spos = $GLOBALS['%s']->length;
		$_gthis = $this;
		$dir = "." . _hx_string_or_null($this->upsPath);
		if(file_exists($dir) === false) {
			$path = haxe_io_Path::addTrailingSlash($dir);
			$_p = null;
			$parts = (new _hx_array(array()));
			while(true) {
				$_p = haxe_io_Path::directory($path);
				if(!($path !== $_p)) {
					break;
				}
				$parts->unshift($path);
				$path = $_p;
			}
			{
				$_g = 0;
				while($_g < $parts->length) {
					$part = $parts[$_g];
					$_g = $_g + 1;
					$tmp = null;
					if(_hx_char_code_at($part, strlen($part) - 1) !== 58) {
						$tmp = !file_exists($part);
					} else {
						$tmp = false;
					}
					if($tmp) {
						@mkdir($part, 493);
					}
					unset($tmp,$part);
				}
			}
		}
		$path1 = _hx_string_or_null($dir) . "/" . _hx_string_or_null($upload->originalFileName);
		$this1 = $upload->writeToFile($path1);
		$ret = $this1->map(array(new _hx_lambda(array(&$_gthis, &$upload), "microbe_apis_UpApi_0"), 'execute'));
		{
			$tmp = $ret->gather();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function uploadBytes($upBytes, $pos, $len, $name) {
		$GLOBALS['%s']->push("microbe.apis.UpApi::uploadBytes");
		$__hx__spos = $GLOBALS['%s']->length;
		$dir = "." . _hx_string_or_null($this->upsPath) . "/temp";
		if(file_exists($dir) === false) {
			$path = haxe_io_Path::addTrailingSlash($dir);
			$_p = null;
			$parts = (new _hx_array(array()));
			while(true) {
				$_p = haxe_io_Path::directory($path);
				if(!($path !== $_p)) {
					break;
				}
				$parts->unshift($path);
				$path = $_p;
			}
			{
				$_g = 0;
				while($_g < $parts->length) {
					$part = $parts[$_g];
					$_g = $_g + 1;
					$tmp = null;
					if(_hx_char_code_at($part, strlen($part) - 1) !== 58) {
						$tmp = !file_exists($part);
					} else {
						$tmp = false;
					}
					if($tmp) {
						@mkdir($part, 493);
					}
					unset($tmp,$part);
				}
			}
		}
		$fo = sys_io_File::append(_hx_string_or_null($dir) . "/" . _hx_string_or_null($name), false);
		$fo->write($upBytes);
		$fo->close();
		{
			$tmp = ufront_core_SurpriseTools::asGoodSurprise(tink_core_Noise::$Noise);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	function __toString() { return 'microbe.apis.UpApi'; }
}
microbe_apis_UpApi::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("rtti" => (new _hx_array(array((new _hx_array(array("contentDir", "String", "contentDirectory"))), (new _hx_array(array("upsPath", "String", "upsPath")))))), "asyncApi" => (new _hx_array(array("microbe.apis.UpApiAsync"))))), "fields" => _hx_anonymous(array("uploadImage" => _hx_anonymous(array("returnType" => (new _hx_array(array(3))))), "uploadBytes" => _hx_anonymous(array("returnType" => (new _hx_array(array(3)))))))));
function microbe_apis_UpApi_0(&$_gthis, &$upload, $n) {
	{
		$GLOBALS['%s']->push("microbe.apis.UpApi::uploadImage@36");
		$__hx__spos = $GLOBALS['%s']->length;
		$ret1 = "" . _hx_string_or_null($_gthis->upsPath) . "/";
		$s = $upload->originalFileName;
		{
			$tmp = tink_core_Outcome::Success(_hx_string_or_null($ret1) . _hx_string_or_null(rawurlencode($s)));
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
}

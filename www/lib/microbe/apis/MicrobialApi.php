<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: src/microbe/apis/MicrobialApi.hx
 */

namespace microbe\apis;

use \ufront\core\SurpriseTools;
use \ufront\log\MessageType;
use \tink\core\Outcome;
use \haxe\ds\StringMap;
use \php\_Boot\HxException;
use \php\Boot;
use \microbe\MicroSpod;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \php\_NativeArray\NativeArrayIterator;
use \ufront\api\UFApi;
use \sys\db\TableCreate;
use \php\Web;
use \ufront\db\Object_hx;
use \tink\core\Noise;
use \haxe\CallStack;
use \php\_Boot\HxAnon;

class MicrobialApi extends UFApi {


	/**
	 * @return void
	 */
	public function __construct () {
		#src/microbe/apis/MicrobialApi.hx:18: lines 18-434
		parent::__construct();
	}


	/**
	 * @return void
	 */
	public function combineDataFormule () {
	}


	/**
	 * @param StringMap $formule
	 * 
	 * @return FutureObject
	 */
	public function delete ($formule) {
		#src/microbe/apis/MicrobialApi.hx:34: characters 4-68
		$modClass = MicroSpod::getModelClassFromString(Boot::dynamicField(($formule->data["model"] ?? null), 'name'));
		#src/microbe/apis/MicrobialApi.hx:35: characters 4-38
		$manager = MicroSpod::getManager($modClass);
		#src/microbe/apis/MicrobialApi.hx:36: characters 4-35
		$spod = null;
		#src/microbe/apis/MicrobialApi.hx:37: lines 37-43
		try {
			#src/microbe/apis/MicrobialApi.hx:38: characters 5-60
			$spod = $manager->unsafeGet(\Std::parseInt(Boot::dynamicField(($formule->data["model"] ?? null), 'id')), true);
			#src/microbe/apis/MicrobialApi.hx:39: characters 5-18
			$spod->delete();
			#src/microbe/apis/MicrobialApi.hx:40: characters 5-34
			return SurpriseTools::asGoodSurprise(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$msh = $__hx__real_e;
			#src/microbe/apis/MicrobialApi.hx:42: characters 5-37
			return SurpriseTools::asSurprise(Outcome::Failure($msh));
		}
	}


	/**
	 * @param string $mod
	 * 
	 * @return FutureObject
	 */
	public function getAllFromString ($mod) {
		#src/microbe/apis/MicrobialApi.hx:369: characters 3-45
		$modClass = MicroSpod::getModelClassFromString($mod);
		#src/microbe/apis/MicrobialApi.hx:370: characters 3-36
		$manager = MicroSpod::getManager($modClass);
		#src/microbe/apis/MicrobialApi.hx:371: characters 3-40
		return SurpriseTools::asGoodSurprise($manager->all());
	}


	/**
	 * @param string $mod
	 * 
	 * @return FutureObject
	 */
	public function getAllModels ($mod) {
		#src/microbe/apis/MicrobialApi.hx:72: characters 3-20
		$this->messages->push(new HxAnon([
			"msg" => "all muds",
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 72,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "getAllModels",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:73: characters 2-45
		$modClass = MicroSpod::getModelClassFromString($mod);
		#src/microbe/apis/MicrobialApi.hx:74: characters 2-35
		$manager = MicroSpod::getManager($modClass);
		#src/microbe/apis/MicrobialApi.hx:75: lines 75-78
		if (TableCreate::exists($manager)) {
			#src/microbe/apis/MicrobialApi.hx:76: characters 2-40
			return SurpriseTools::asGoodSurprise($manager->all());
		} else {
			#src/microbe/apis/MicrobialApi.hx:78: characters 2-50
			return SurpriseTools::asBadSurprise(new TypedError(null, "pas de table", new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 78,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "getAllModels",
			])));
		}
	}


	/**
	 * @param string $mod
	 * @param int $id
	 * 
	 * @return FutureObject
	 */
	public function getDataFormule ($mod, $id = null) {
		#src/microbe/apis/MicrobialApi.hx:196: characters 3-26
		$this->messages->push(new HxAnon([
			"msg" => "getDataFormule",
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 196,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "getDataFormule",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:197: characters 3-45
		$modClass = MicroSpod::getModelClassFromString($mod);
		#src/microbe/apis/MicrobialApi.hx:199: characters 3-34
		$spod = $this->getModel($modClass, $id);
		#src/microbe/apis/MicrobialApi.hx:201: characters 3-49
		return SurpriseTools::asGoodSurprise(MicroSpod::getDataFormuleVO($spod));
	}


	/**
	 * @param string $mod
	 * 
	 * @return FutureObject
	 */
	public function getFormuleFromString ($mod) {
		#src/microbe/apis/MicrobialApi.hx:354: characters 3-25
		$this->messages->push(new HxAnon([
			"msg" => "modClass=" . ($mod??'null'),
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 354,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "getFormuleFromString",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:355: characters 3-45
		$modClass = MicroSpod::getModelClassFromString($mod);
		#src/microbe/apis/MicrobialApi.hx:357: characters 3-65
		return SurpriseTools::asSurprise(Outcome::Success(MicroSpod::getFormule($modClass)));
	}


	/**
	 * @param Class $mod
	 * @param int $id
	 * 
	 * @return Object_hx
	 */
	public function getModel ($mod, $id = null) {
		#src/microbe/apis/MicrobialApi.hx:52: characters 3-31
		$formule = MicroSpod::getFormule($mod);
		#src/microbe/apis/MicrobialApi.hx:55: characters 4-32
		$manager = MicroSpod::getManager($mod);
		#src/microbe/apis/MicrobialApi.hx:62: characters 3-26
		return $manager->unsafeGet($id, true);
	}


	/**
	 * @param StringMap $formule
	 * 
	 * @return Outcome
	 */
	public function recFormule ($formule) {
		#src/microbe/apis/MicrobialApi.hx:108: characters 4-18
		$this->messages->push(new HxAnon([
			"msg" => $formule,
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 108,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "recFormule",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:109: characters 4-68
		$modClass = MicroSpod::getModelClassFromString(Boot::dynamicField(($formule->data["model"] ?? null), 'name'));
		#src/microbe/apis/MicrobialApi.hx:110: characters 4-38
		$manager = MicroSpod::getManager($modClass);
		#src/microbe/apis/MicrobialApi.hx:111: characters 4-35
		$spod = null;
		#src/microbe/apis/MicrobialApi.hx:112: lines 112-115
		if (Boot::dynamicField(($formule->data["model"] ?? null), 'id') !== null) {
			#src/microbe/apis/MicrobialApi.hx:113: characters 5-60
			$spod = $manager->unsafeGet(\Std::parseInt(Boot::dynamicField(($formule->data["model"] ?? null), 'id')), true);
		} else {
			#src/microbe/apis/MicrobialApi.hx:115: characters 4-41
			$spod = \Type::createInstance($modClass, new \Array_hx());
		}
		#src/microbe/apis/MicrobialApi.hx:118: characters 4-30
		$this->messages->push(new HxAnon([
			"msg" => "afterSpod" . ($spod->id??'null'),
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 118,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "recFormule",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:123: characters 18-32
		$field = new NativeArrayIterator(array_map("strval", array_keys($formule->data)));
		#src/microbe/apis/MicrobialApi.hx:123: characters 18-32
		while ($field->hasNext()) {
			unset($val);
			#src/microbe/apis/MicrobialApi.hx:123: lines 123-172
			$field1 = $field->next();
			#src/microbe/apis/MicrobialApi.hx:124: characters 5-32
			if ($field1 === "model") {
				#src/microbe/apis/MicrobialApi.hx:124: characters 24-32
				continue;
			}
			#src/microbe/apis/MicrobialApi.hx:125: characters 6-46
			$val = Boot::dynamicField(($formule->data[$field1] ?? null), 'data');
			#src/microbe/apis/MicrobialApi.hx:127: characters 6-16
			$this->messages->push(new HxAnon([
				"msg" => $val,
				"pos" => new HxAnon([
					"fileName" => "src/microbe/apis/MicrobialApi.hx",
					"lineNumber" => 127,
					"className" => "microbe.apis.MicrobialApi",
					"methodName" => "recFormule",
				]),
				"type" => MessageType::MLog(),
			]));
			#src/microbe/apis/MicrobialApi.hx:130: lines 130-171
			if ((Boot::dynamicField(($formule->data[$field1] ?? null), 'relation') === "many") && ($val !== null)) {
				#src/microbe/apis/MicrobialApi.hx:132: characters 7-20
				$this->messages->push(new HxAnon([
					"msg" => "many",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 132,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recFormule",
					]),
					"type" => MessageType::MLog(),
				]));
				#src/microbe/apis/MicrobialApi.hx:134: characters 7-73
				$relationmanager = MicroSpod::getManager(Boot::dynamicField(\Reflect::getProperty($spod, $field1), 'b'));
				#src/microbe/apis/MicrobialApi.hx:139: characters 7-47
				$dependencies = $relationmanager->all();
				#src/microbe/apis/MicrobialApi.hx:140: characters 7-28
				$this->messages->push(new HxAnon([
					"msg" => "many manager",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 140,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recFormule",
					]),
					"type" => MessageType::MLog(),
				]));
				#src/microbe/apis/MicrobialApi.hx:141: lines 141-142
				$inside = $dependencies->filter(function ($t)  use (&$val) {
					#src/microbe/apis/MicrobialApi.hx:142: characters 31-47
					$inside1 = \Std::string($t->id);
					#src/microbe/apis/MicrobialApi.hx:142: characters 8-48
					return \Lambda::has($val, $inside1);
				});
				#src/microbe/apis/MicrobialApi.hx:143: characters 7-27
				$this->messages->push(new HxAnon([
					"msg" => "many inside",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 143,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recFormule",
					]),
					"type" => MessageType::MLog(),
				]));
				#src/microbe/apis/MicrobialApi.hx:145: characters 7-54
				\Reflect::getProperty($spod, $field1)->setList($inside);
				#src/microbe/apis/MicrobialApi.hx:146: characters 6-24
				$this->messages->push(new HxAnon([
					"msg" => "many done",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 146,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recFormule",
					]),
					"type" => MessageType::MLog(),
				]));
			} else if (Boot::dynamicField(($formule->data[$field1] ?? null), 'relation') === "one") {
				#src/microbe/apis/MicrobialApi.hx:149: characters 6-18
				$this->messages->push(new HxAnon([
					"msg" => "one",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 149,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recFormule",
					]),
					"type" => MessageType::MLog(),
				]));
				#src/microbe/apis/MicrobialApi.hx:150: characters 7-91
				$relationmanager1 = MicroSpod::getManager(MicroSpod::getModelClassFullPath(Boot::dynamicField(($formule->data[$field1] ?? null), 'relationB')));
				#src/microbe/apis/MicrobialApi.hx:152: characters 6-28
				$this->messages->push(new HxAnon([
					"msg" => $relationmanager1,
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 152,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recFormule",
					]),
					"type" => MessageType::MLog(),
				]));
				#src/microbe/apis/MicrobialApi.hx:156: characters 8-53
				$dependencie = $relationmanager1->unsafeGet($val[0], true);
				#src/microbe/apis/MicrobialApi.hx:162: characters 8-51
				\Reflect::setProperty($spod, $field1, $dependencie);
				#src/microbe/apis/MicrobialApi.hx:163: characters 7-24
				$this->messages->push(new HxAnon([
					"msg" => "one done",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 163,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recFormule",
					]),
					"type" => MessageType::MLog(),
				]));
			} else {
				#src/microbe/apis/MicrobialApi.hx:167: lines 167-168
				if (($val instanceof \Array_hx)) {
					#src/microbe/apis/MicrobialApi.hx:168: characters 9-19
					$val = $val[0];
				}
				#src/microbe/apis/MicrobialApi.hx:170: characters 5-40
				\Reflect::setProperty($spod, $field1, $val);
			}
		}

		#src/microbe/apis/MicrobialApi.hx:174: characters 4-19
		$spod->validate();
		#src/microbe/apis/MicrobialApi.hx:175: characters 4-21
		$this->messages->push(new HxAnon([
			"msg" => "validate",
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 175,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "recFormule",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:178: lines 178-190
		try {
			#src/microbe/apis/MicrobialApi.hx:179: characters 4-24
			$this->messages->push(new HxAnon([
				"msg" => "before Save",
				"pos" => new HxAnon([
					"fileName" => "src/microbe/apis/MicrobialApi.hx",
					"lineNumber" => 179,
					"className" => "microbe.apis.MicrobialApi",
					"methodName" => "recFormule",
				]),
				"type" => MessageType::MLog(),
			]));
			#src/microbe/apis/MicrobialApi.hx:180: characters 4-15
			$spod->save();
			#src/microbe/apis/MicrobialApi.hx:181: characters 4-23
			$this->messages->push(new HxAnon([
				"msg" => "after Save",
				"pos" => new HxAnon([
					"fileName" => "src/microbe/apis/MicrobialApi.hx",
					"lineNumber" => 181,
					"className" => "microbe.apis.MicrobialApi",
					"methodName" => "recFormule",
				]),
				"type" => MessageType::MLog(),
			]));
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$msg = $__hx__real_e;
			#src/microbe/apis/MicrobialApi.hx:183: characters 4-57
			$this->messages->push(new HxAnon([
				"msg" => "error Save  fait une vraie errur ici merde !",
				"pos" => new HxAnon([
					"fileName" => "src/microbe/apis/MicrobialApi.hx",
					"lineNumber" => 183,
					"className" => "microbe.apis.MicrobialApi",
					"methodName" => "recFormule",
				]),
				"type" => MessageType::MLog(),
			]));
			#src/microbe/apis/MicrobialApi.hx:184: lines 184-187
			return Outcome::Failure($spod->validationErrors);
		}
		#src/microbe/apis/MicrobialApi.hx:191: characters 4-27
		$this->messages->push(new HxAnon([
			"msg" => "before Success",
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 191,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "recFormule",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:192: characters 4-39
		return Outcome::Success(\Std::string($spod->id));
	}


	/**
	 * @param StringMap $formule
	 * 
	 * @return FutureObject
	 */
	public function recFromFormule ($formule) {
		#src/microbe/apis/MicrobialApi.hx:88: lines 88-91
		return SurpriseTools::asSurprise($this->recFormule($formule));
	}


	/**
	 * @param Class $mod
	 * @param mixed $data
	 * @param int $id
	 * 
	 * @return mixed
	 */
	public function recModel ($mod, $data, $id = null) {
		#src/microbe/apis/MicrobialApi.hx:28: characters 3-14
		return null;
	}


	/**
	 * @param string $mod
	 * @param StringMap $data
	 * @param int $id
	 * 
	 * @return FutureObject
	 */
	public function recModelFromString ($mod, $data = null, $id = null) {
		#src/microbe/apis/MicrobialApi.hx:262: lines 262-263
		if ($data === null) {
			#src/microbe/apis/MicrobialApi.hx:263: characters 4-24
			$data = Web::getParams();
		}
		#src/microbe/apis/MicrobialApi.hx:265: characters 4-15
		$this->messages->push(new HxAnon([
			"msg" => $data,
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 265,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "recModelFromString",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:268: characters 4-46
		$modClass = MicroSpod::getModelClassFromString($mod);
		#src/microbe/apis/MicrobialApi.hx:269: characters 4-38
		$manager = MicroSpod::getManager($modClass);
		#src/microbe/apis/MicrobialApi.hx:270: characters 4-35
		$spod = null;
		#src/microbe/apis/MicrobialApi.hx:271: lines 271-274
		if ($id !== null) {
			#src/microbe/apis/MicrobialApi.hx:272: characters 5-25
			$spod = $manager->unsafeGet($id, true);
		} else {
			#src/microbe/apis/MicrobialApi.hx:274: characters 4-41
			$spod = \Type::createInstance($modClass, new \Array_hx());
		}
		#src/microbe/apis/MicrobialApi.hx:276: characters 4-22
		$this->messages->push(new HxAnon([
			"msg" => "afterSpod",
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 276,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "recModelFromString",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:277: characters 4-37
		$formule = MicroSpod::getFormule($modClass);
		#src/microbe/apis/MicrobialApi.hx:281: characters 18-32
		$field = new NativeArrayIterator(array_map("strval", array_keys($formule->data)));
		#src/microbe/apis/MicrobialApi.hx:281: characters 18-32
		while ($field->hasNext()) {
			unset($val);
			#src/microbe/apis/MicrobialApi.hx:281: lines 281-315
			$field1 = $field->next();
			#src/microbe/apis/MicrobialApi.hx:282: characters 6-30
			$val = ($data->data[$field1] ?? null);
			#src/microbe/apis/MicrobialApi.hx:284: characters 6-16
			$this->messages->push(new HxAnon([
				"msg" => $val,
				"pos" => new HxAnon([
					"fileName" => "src/microbe/apis/MicrobialApi.hx",
					"lineNumber" => 284,
					"className" => "microbe.apis.MicrobialApi",
					"methodName" => "recModelFromString",
				]),
				"type" => MessageType::MLog(),
			]));
			#src/microbe/apis/MicrobialApi.hx:287: lines 287-314
			if ((Boot::dynamicField(($formule->data[$field1] ?? null), 'relation') === "many") && ($val !== null)) {
				#src/microbe/apis/MicrobialApi.hx:289: characters 7-20
				$this->messages->push(new HxAnon([
					"msg" => "many",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 289,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recModelFromString",
					]),
					"type" => MessageType::MLog(),
				]));
				#src/microbe/apis/MicrobialApi.hx:291: characters 7-73
				$relationmanager = MicroSpod::getManager(Boot::dynamicField(\Reflect::getProperty($spod, $field1), 'b'));
				#src/microbe/apis/MicrobialApi.hx:296: characters 7-47
				$dependencies = $relationmanager->all();
				#src/microbe/apis/MicrobialApi.hx:297: characters 7-28
				$this->messages->push(new HxAnon([
					"msg" => "many manager",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 297,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recModelFromString",
					]),
					"type" => MessageType::MLog(),
				]));
				#src/microbe/apis/MicrobialApi.hx:298: lines 298-299
				$inside = $dependencies->filter(function ($t)  use (&$val) {
					#src/microbe/apis/MicrobialApi.hx:299: characters 31-47
					$inside1 = \Std::string($t->id);
					#src/microbe/apis/MicrobialApi.hx:299: characters 8-48
					return \Lambda::has($val, $inside1);
				});
				#src/microbe/apis/MicrobialApi.hx:300: characters 7-27
				$this->messages->push(new HxAnon([
					"msg" => "many inside",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 300,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recModelFromString",
					]),
					"type" => MessageType::MLog(),
				]));
				#src/microbe/apis/MicrobialApi.hx:302: characters 7-54
				\Reflect::getProperty($spod, $field1)->setList($inside);
				#src/microbe/apis/MicrobialApi.hx:303: characters 6-24
				$this->messages->push(new HxAnon([
					"msg" => "many done",
					"pos" => new HxAnon([
						"fileName" => "src/microbe/apis/MicrobialApi.hx",
						"lineNumber" => 303,
						"className" => "microbe.apis.MicrobialApi",
						"methodName" => "recModelFromString",
					]),
					"type" => MessageType::MLog(),
				]));
			} else {
				#src/microbe/apis/MicrobialApi.hx:310: lines 310-311
				if (($val instanceof \Array_hx)) {
					#src/microbe/apis/MicrobialApi.hx:311: characters 9-19
					$val = $val[0];
				}
				#src/microbe/apis/MicrobialApi.hx:313: characters 5-40
				\Reflect::setProperty($spod, $field1, $val);
			}
		}

		#src/microbe/apis/MicrobialApi.hx:317: characters 4-19
		$spod->validate();
		#src/microbe/apis/MicrobialApi.hx:320: lines 320-323
		try {
			#src/microbe/apis/MicrobialApi.hx:321: characters 4-15
			$spod->save();
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$msg = $__hx__real_e;
			#src/microbe/apis/MicrobialApi.hx:323: characters 4-54
			return SurpriseTools::asSurprise(Outcome::Failure($spod->validationErrors));
		}
		#src/microbe/apis/MicrobialApi.hx:326: characters 4-40
		return SurpriseTools::asSurprise(Outcome::Success($spod->id));
	}


	/**
	 * @param string $mod
	 * 
	 * @return FutureObject
	 */
	public function setupTable ($mod) {
		#src/microbe/apis/MicrobialApi.hx:377: characters 3-13
		$this->messages->push(new HxAnon([
			"msg" => $mod,
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 377,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "setupTable",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:378: characters 3-45
		$modClass = MicroSpod::getModelClassFromString($mod);
		#src/microbe/apis/MicrobialApi.hx:382: lines 382-392
		try {
			#src/microbe/apis/MicrobialApi.hx:384: characters 4-37
			$manager = MicroSpod::getManager($modClass);
			#src/microbe/apis/MicrobialApi.hx:385: characters 4-35
			$this->messages->push(new HxAnon([
				"msg" => Boot::dynamicField($modClass, 'formule'),
				"pos" => new HxAnon([
					"fileName" => "src/microbe/apis/MicrobialApi.hx",
					"lineNumber" => 385,
					"className" => "microbe.apis.MicrobialApi",
					"methodName" => "setupTable",
				]),
				"type" => MessageType::MLog(),
			]));
			#src/microbe/apis/MicrobialApi.hx:386: lines 386-388
			if (!TableCreate::exists($manager)) {
				#src/microbe/apis/MicrobialApi.hx:387: characters 3-37
				TableCreate::create($manager);
			} else {
				#src/microbe/apis/MicrobialApi.hx:388: characters 8-13
				throw new HxException("table existe");
			}
			#src/microbe/apis/MicrobialApi.hx:389: characters 3-37
			return SurpriseTools::asSurprise(Outcome::Success(Noise::Noise()));
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$msg = $__hx__real_e;
			#src/microbe/apis/MicrobialApi.hx:391: characters 3-35
			return SurpriseTools::asSurprise(Outcome::Failure($msg));
		}
	}


	/**
	 * @param StringMap $formule
	 * 
	 * @return Outcome
	 */
	public function testRecFormule ($formule) {
		#src/microbe/apis/MicrobialApi.hx:94: characters 6-20
		$this->messages->push(new HxAnon([
			"msg" => $formule,
			"pos" => new HxAnon([
				"fileName" => "src/microbe/apis/MicrobialApi.hx",
				"lineNumber" => 94,
				"className" => "microbe.apis.MicrobialApi",
				"methodName" => "testRecFormule",
			]),
			"type" => MessageType::MLog(),
		]));
		#src/microbe/apis/MicrobialApi.hx:95: characters 6-70
		$modClass = MicroSpod::getModelClassFromString(Boot::dynamicField(($formule->data["model"] ?? null), 'name'));
		#src/microbe/apis/MicrobialApi.hx:96: characters 5-39
		$manager = MicroSpod::getManager($modClass);
		#src/microbe/apis/MicrobialApi.hx:97: characters 5-36
		$spod = null;
		#src/microbe/apis/MicrobialApi.hx:98: lines 98-101
		if (Boot::dynamicField(($formule->data["model"] ?? null), 'id') !== null) {
			#src/microbe/apis/MicrobialApi.hx:99: characters 6-47
			$spod = $manager->unsafeGet(Boot::dynamicField(($formule->data["model"] ?? null), 'id'), true);
		} else {
			#src/microbe/apis/MicrobialApi.hx:101: characters 5-42
			$spod = \Type::createInstance($modClass, new \Array_hx());
		}
		#src/microbe/apis/MicrobialApi.hx:105: characters 6-42
		return Outcome::Success("yes testRecFormule");
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(MicrobialApi::class, 'microbe.apis.MicrobialApi');
Boot::registerMeta(MicrobialApi::class, new HxAnon([
	"obj" => new HxAnon(["asyncApi" => \Array_hx::wrap(["microbe.apis.MicrobialApiAsync"])]),
	"fields" => new HxAnon([
		"delete" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
		"getAllModels" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
		"recFromFormule" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
		"getDataFormule" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
		"recModelFromString" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
		"getFormuleFromString" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
		"getAllFromString" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
		"setupTable" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
	]),
]));
MicrobialApi::__hx__init();

<?php

// Generated by Haxe 3.4.7
class microbe_apis_ImageBaseApi extends ufront_api_UFApi {
	public function __construct() { if(!php_Boot::$skip_constructor) {
		$GLOBALS['%s']->push("microbe.apis.ImageBaseApi::new");
		$__hx__spos = $GLOBALS['%s']->length;
		parent::__construct();
		$GLOBALS['%s']->pop();
	}}
	public function getResizedImage($path, $taille = null) {
		$GLOBALS['%s']->push("microbe.apis.ImageBaseApi::getResizedImage");
		$__hx__spos = $GLOBALS['%s']->length;
		if($taille === null) {
			$taille = microbe_apis__ImageBaseApi_Taille_Impl_::$Square;
		}
		$tmp = null;
		if(_hx_deref((new _hx_array(array("gif", "jpg", "jpeg", "png"))))->indexOf(strtolower(haxe_io_Path::extension($path)), null) !== -1) {
			$tmp = _hx_equal($taille, microbe_apis__ImageBaseApi_Taille_Impl_::$Normal);
		} else {
			$tmp = true;
		}
		if($tmp) {
			$tmp2 = ufront_core_SurpriseTools::asGoodSurprise($path);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$dir = _hx_string_or_null(haxe_io_Path::addTrailingSlash(haxe_io_Path::directory($path))) . "thumb";
		$thumbPath = "." . _hx_string_or_null($dir) . "/" . _hx_string_or_null(microbe_apis__ImageBaseApi_Taille_Impl_::toName($taille));
		$thumbPath1 = _hx_string_or_null($thumbPath) . _hx_string_or_null(haxe_io_Path::withoutDirectory($path));
		$relativeThumbPath = _hx_string_or_null($dir) . "/" . _hx_string_or_null(microbe_apis__ImageBaseApi_Taille_Impl_::toName($taille));
		$relativeThumbPath1 = _hx_string_or_null($relativeThumbPath) . _hx_string_or_null(haxe_io_Path::withoutDirectory($path));
		$tmp1 = null;
		if(file_exists($thumbPath1) !== false) {
			$tmp2 = $this->getModTime("." . _hx_string_or_null($path));
			$tmp1 = $tmp2 > $this->getModTime($thumbPath1);
		} else {
			$tmp1 = true;
		}
		if($tmp1) {
			{
				$path1 = haxe_io_Path::addTrailingSlash("." . _hx_string_or_null($dir));
				$_p = null;
				$parts = (new _hx_array(array()));
				while(true) {
					$_p = haxe_io_Path::directory($path1);
					if(!($path1 !== $_p)) {
						break;
					}
					$parts->unshift($path1);
					$path1 = $_p;
				}
				{
					$_g = 0;
					while($_g < $parts->length) {
						$part = $parts[$_g];
						$_g = $_g + 1;
						$tmp3 = null;
						if(_hx_char_code_at($part, strlen($part) - 1) !== 58) {
							$tmp3 = !file_exists($part);
						} else {
							$tmp3 = false;
						}
						if($tmp3) {
							@mkdir($part, 493);
						}
						unset($tmp3,$part);
					}
				}
			}
			$this1 = image_Image::resize("." . _hx_string_or_null($path), $thumbPath1, _hx_anonymous(array("engine" => image_Engine::$GD, "width" => $taille->w, "height" => $taille->h, "crop" => $taille->crop, "focus" => $taille->focus)));
			$ret = $this1->map(array(new _hx_lambda(array(&$relativeThumbPath1), "microbe_apis_ImageBaseApi_0"), 'execute'));
			{
				$tmp2 = $ret->gather();
				$GLOBALS['%s']->pop();
				return $tmp2;
			}
		}
		{
			$tmp2 = ufront_core_SurpriseTools::asGoodSurprise($relativeThumbPath1);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	public function getModTime($path) {
		$GLOBALS['%s']->push("microbe.apis.ImageBaseApi::getModTime");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = sys_FileSystem::stat($path)->mtime->getTime();
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function __meta__() { $args = func_get_args(); return call_user_func_array(self::$__meta__, $args); }
	static $__meta__;
	static function strTaille($t) {
		$GLOBALS['%s']->push("microbe.apis.ImageBaseApi::strTaille");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = "" . _hx_string_rec($t->w, "") . "*" . _hx_string_rec($t->h, "") . "_";
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'microbe.apis.ImageBaseApi'; }
}
microbe_apis_ImageBaseApi::$__meta__ = _hx_anonymous(array("obj" => _hx_anonymous(array("asyncApi" => (new _hx_array(array("microbe.apis.ImageBaseApiAsync"))))), "fields" => _hx_anonymous(array("getResizedImage" => _hx_anonymous(array("returnType" => (new _hx_array(array(3)))))))));
function microbe_apis_ImageBaseApi_0(&$relativeThumbPath1, $res) {
	{
		$GLOBALS['%s']->push("microbe.apis.ImageBaseApi::getResizedImage@71");
		$__hx__spos = $GLOBALS['%s']->length;
		switch($res->index) {
		case 0:{
			$tmp = tink_core_Outcome::Success($relativeThumbPath1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}break;
		case 1:{
			$error = _hx_deref($res)->params[0];
			{
				$tmp = tink_core_Outcome::Failure($error);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		}break;
		}
		$GLOBALS['%s']->pop();
	}
}

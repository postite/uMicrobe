<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: src/microbe/apis/UpApi.hx
 */

namespace microbe\apis;

use \ufront\core\SurpriseTools;
use \tink\core\Outcome;
use \ufront\web\upload\UFFileUpload;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \ufront\api\UFApi;
use \haxe\io\Bytes;
use \tink\core\Noise;
use \sys\io\File;
use \php\_Boot\HxAnon;

class UpApi extends UFApi {


	/**
	 * @var string
	 */
	public $contentDir;
	/**
	 * @var string
	 */
	public $upsPath;


	/**
	 * @return void
	 */
	public function __construct () {
		#src/microbe/apis/UpApi.hx:19: lines 19-143
		parent::__construct();
	}


	/**
	 * @param Bytes $upBytes
	 * @param int $pos
	 * @param int $len
	 * @param string $name
	 * 
	 * @return FutureObject
	 */
	public function uploadBytes ($upBytes, $pos, $len, $name) {
		#src/microbe/apis/UpApi.hx:44: characters 3-30
		$dir = "." . ($this->upsPath??'null') . "/temp";
		#src/microbe/apis/UpApi.hx:45: lines 45-46
		if (file_exists($dir) === false) {
			#src/microbe/apis/UpApi.hx:46: characters 5-38
			if (!is_dir($dir)) {
				#src/microbe/apis/UpApi.hx:46: characters 5-38
				mkdir($dir, 493, true);
			}
		}
		#src/microbe/apis/UpApi.hx:51: characters 3-63
		$fo = File::append(($dir??'null') . "/" . ($name??'null'), false);
		#src/microbe/apis/UpApi.hx:52: characters 3-20
		$fo->write($upBytes);
		#src/microbe/apis/UpApi.hx:54: characters 3-13
		$fo->close();
		#src/microbe/apis/UpApi.hx:60: characters 3-32
		return SurpriseTools::asGoodSurprise(Noise::Noise());
	}


	/**
	 * @param UFFileUpload $upload
	 * 
	 * @return FutureObject
	 */
	public function uploadImage ($upload) {
		#src/microbe/apis/UpApi.hx:26: lines 26-40
		$_gthis = $this;
		#src/microbe/apis/UpApi.hx:28: characters 3-25
		$dir = "." . ($this->upsPath??'null');
		#src/microbe/apis/UpApi.hx:29: lines 29-30
		if (file_exists($dir) === false) {
			#src/microbe/apis/UpApi.hx:30: characters 4-37
			if (!is_dir($dir)) {
				#src/microbe/apis/UpApi.hx:30: characters 4-37
				mkdir($dir, 493, true);
			}
		}
		#src/microbe/apis/UpApi.hx:31: characters 3-46
		$path = ($dir??'null') . "/" . ($upload->originalFileName??'null');
		#src/microbe/apis/UpApi.hx:36: lines 36-39
		$ret = $upload->writeToFile($path)->map(function ($n)  use (&$upload, &$_gthis) {
			#src/microbe/apis/UpApi.hx:38: characters 4-69
			return Outcome::Success("" . ($_gthis->upsPath??'null') . "/" . (rawurlencode($upload->originalFileName)??'null'));
		});
		#src/microbe/apis/UpApi.hx:36: lines 36-39
		return $ret->gather();
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(UpApi::class, 'microbe.apis.UpApi');
Boot::registerMeta(UpApi::class, new HxAnon([
	"obj" => new HxAnon([
		"rtti" => \Array_hx::wrap([
			\Array_hx::wrap([
				"contentDir",
				"String",
				"contentDirectory",
			]),
			\Array_hx::wrap([
				"upsPath",
				"String",
				"upsPath",
			]),
		]),
		"asyncApi" => \Array_hx::wrap(["microbe.apis.UpApiAsync"]),
	]),
	"fields" => new HxAnon([
		"uploadImage" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
		"uploadBytes" => new HxAnon(["returnType" => \Array_hx::wrap([3])]),
	]),
]));
UpApi::__hx__init();

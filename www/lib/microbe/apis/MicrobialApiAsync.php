<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: src/microbe/apis/MicrobialApi.hx
 */

namespace microbe\apis;

use \haxe\ds\StringMap;
use \php\_Boot\HxException;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \ufront\api\UFAsyncApi;
use \minject\Injector;
use \haxe\CallStack;
use \php\_Boot\HxAnon;
use \ufront\web\HttpError;

class MicrobialApiAsync extends UFAsyncApi {


	/**
	 * @return Class
	 */
	static public function _getClass () {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/ApiMacros.hx:276: characters 55-79
		return Boot::getClass(MicrobialApi::class);
	}


	/**
	 * @return void
	 */
	public function __construct () {
		#src/microbe/apis/MicrobialApi.hx:434: characters 2-61
		parent::__construct();
	}


	/**
	 * Async call for `microbe.apis.MicrobialApi.delete()`
	 * 
	 * @param StringMap $formule
	 * 
	 * @return FutureObject
	 */
	public function delete ($formule) {
		#src/microbe/apis/MicrobialApi.hx:32: lines 32-47
		$this1 = 3;
		#src/microbe/apis/MicrobialApi.hx:32: lines 32-47
		return $this->_makeApiCall("delete", \Array_hx::wrap([$formule]), $this1, new HxAnon([
			"lineNumber" => 0,
			"fileName" => "src/microbe/apis/MicrobialApi.hx",
			"className" => "MicrobialApiAsync",
			"methodName" => "delete",
			"customParams" => null,
		]));
	}


	/**
	 * Async call for `microbe.apis.MicrobialApi.getAllFromString()`
	 * 
	 * @param string $mod
	 * 
	 * @return FutureObject
	 */
	public function getAllFromString ($mod) {
		#src/microbe/apis/MicrobialApi.hx:368: lines 368-373
		$this1 = 3;
		#src/microbe/apis/MicrobialApi.hx:368: lines 368-373
		return $this->_makeApiCall("getAllFromString", \Array_hx::wrap([$mod]), $this1, new HxAnon([
			"lineNumber" => 0,
			"fileName" => "src/microbe/apis/MicrobialApi.hx",
			"className" => "MicrobialApiAsync",
			"methodName" => "getAllFromString",
			"customParams" => null,
		]));
	}


	/**
	 * Async call for `microbe.apis.MicrobialApi.getAllModels()`
	 * 
	 * @param string $mod
	 * 
	 * @return FutureObject
	 */
	public function getAllModels ($mod) {
		#src/microbe/apis/MicrobialApi.hx:69: lines 69-82
		$this1 = 3;
		#src/microbe/apis/MicrobialApi.hx:69: lines 69-82
		return $this->_makeApiCall("getAllModels", \Array_hx::wrap([$mod]), $this1, new HxAnon([
			"lineNumber" => 0,
			"fileName" => "src/microbe/apis/MicrobialApi.hx",
			"className" => "MicrobialApiAsync",
			"methodName" => "getAllModels",
			"customParams" => null,
		]));
	}


	/**
	 * Async call for `microbe.apis.MicrobialApi.getDataFormule()`
	 * 
	 * @param string $mod
	 * @param int $id
	 * 
	 * @return FutureObject
	 */
	public function getDataFormule ($mod, $id = null) {
		#src/microbe/apis/MicrobialApi.hx:195: lines 195-239
		$this1 = 3;
		#src/microbe/apis/MicrobialApi.hx:195: lines 195-239
		return $this->_makeApiCall("getDataFormule", \Array_hx::wrap([
			$mod,
			$id,
		]), $this1, new HxAnon([
			"lineNumber" => 0,
			"fileName" => "src/microbe/apis/MicrobialApi.hx",
			"className" => "MicrobialApiAsync",
			"methodName" => "getDataFormule",
			"customParams" => null,
		]));
	}


	/**
	 * Async call for `microbe.apis.MicrobialApi.getFormuleFromString()`
	 * 
	 * @param string $mod
	 * 
	 * @return FutureObject
	 */
	public function getFormuleFromString ($mod) {
		#src/microbe/apis/MicrobialApi.hx:353: lines 353-359
		$this1 = 3;
		#src/microbe/apis/MicrobialApi.hx:353: lines 353-359
		return $this->_makeApiCall("getFormuleFromString", \Array_hx::wrap([$mod]), $this1, new HxAnon([
			"lineNumber" => 0,
			"fileName" => "src/microbe/apis/MicrobialApi.hx",
			"className" => "MicrobialApiAsync",
			"methodName" => "getFormuleFromString",
			"customParams" => null,
		]));
	}


	/**
	 * @param Injector $injector
	 * 
	 * @return void
	 */
	public function injectApi ($injector) {
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/ApiMacros.hx:271: lines 271-272
		$tmp = null;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/ApiMacros.hx:271: lines 271-272
		try {
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/ApiMacros.hx:271: lines 271-272
			$tmp = $injector->getValueForType("microbe.apis.MicrobialApi");
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/ApiMacros.hx:272: characters 26-31
			throw new HxException(HttpError::internalServerError("Failed to inject " . (\Type::getClassName(Boot::getClass(MicrobialApi::class))??'null') . " into " . (\Type::getClassName(\Type::getClass($this))??'null'), $e, new HxAnon([
				"fileName" => "ufront/api/ApiMacros.hx",
				"lineNumber" => 272,
				"className" => "microbe.apis.MicrobialApiAsync",
				"methodName" => "injectApi",
			])));
		}
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/ApiMacros.hx:270: lines 270-272
		$this->api = $tmp;
		#/Users/ut/Documents/LAB/ufront-mvc/src/ufront/api/ApiMacros.hx:274: characters 6-43
		$this->className = "microbe.apis.MicrobialApi";
	}


	/**
	 * Async call for `microbe.apis.MicrobialApi.recFromFormule()`
	 * 
	 * @param StringMap $formule
	 * 
	 * @return FutureObject
	 */
	public function recFromFormule ($formule) {
		#src/microbe/apis/MicrobialApi.hx:87: lines 87-92
		$this1 = 3;
		#src/microbe/apis/MicrobialApi.hx:87: lines 87-92
		return $this->_makeApiCall("recFromFormule", \Array_hx::wrap([$formule]), $this1, new HxAnon([
			"lineNumber" => 0,
			"fileName" => "src/microbe/apis/MicrobialApi.hx",
			"className" => "MicrobialApiAsync",
			"methodName" => "recFromFormule",
			"customParams" => null,
		]));
	}


	/**
	 * Async call for `microbe.apis.MicrobialApi.recModelFromString()`
	 * 
	 * @param string $mod
	 * @param StringMap $data
	 * @param int $id
	 * 
	 * @return FutureObject
	 */
	public function recModelFromString ($mod, $data = null, $id = null) {
		#src/microbe/apis/MicrobialApi.hx:256: lines 256-329
		$this1 = 3;
		#src/microbe/apis/MicrobialApi.hx:256: lines 256-329
		return $this->_makeApiCall("recModelFromString", \Array_hx::wrap([
			$mod,
			$data,
			$id,
		]), $this1, new HxAnon([
			"lineNumber" => 0,
			"fileName" => "src/microbe/apis/MicrobialApi.hx",
			"className" => "MicrobialApiAsync",
			"methodName" => "recModelFromString",
			"customParams" => null,
		]));
	}


	/**
	 * Async call for `microbe.apis.MicrobialApi.setupTable()`
	 * 
	 * @param string $mod
	 * 
	 * @return FutureObject
	 */
	public function setupTable ($mod) {
		#src/microbe/apis/MicrobialApi.hx:375: lines 375-395
		$this1 = 3;
		#src/microbe/apis/MicrobialApi.hx:375: lines 375-395
		return $this->_makeApiCall("setupTable", \Array_hx::wrap([$mod]), $this1, new HxAnon([
			"lineNumber" => 0,
			"fileName" => "src/microbe/apis/MicrobialApi.hx",
			"className" => "MicrobialApiAsync",
			"methodName" => "setupTable",
			"customParams" => null,
		]));
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(MicrobialApiAsync::class, 'microbe.apis.MicrobialApiAsync');
Boot::registerMeta(MicrobialApiAsync::class, new HxAnon(["obj" => new HxAnon(["rtti" => \Array_hx::wrap([\Array_hx::wrap([
	"injectApi",
	"",
	"minject.Injector",
	"",
	"",
])])])]));
MicrobialApiAsync::__hx__init();

<?php

// Generated by Haxe 3.4.7
class microbe_tools_JSTools {
	public function __construct(){}
	static function retente($fn, $times = null) {
		$GLOBALS['%s']->push("microbe.tools.JSTools::retente");
		$__hx__spos = $GLOBALS['%s']->length;
		if($times === null) {
			$times = 3;
		}
		try {
			call_user_func($fn);
		}catch(Exception $__hx__e) {
			$_ex_ = ($__hx__e instanceof HException) && $__hx__e->getCode() == null ? $__hx__e->e : $__hx__e;
			$msg = $_ex_;
			{
				$GLOBALS['%e'] = (new _hx_array(array()));
				while($GLOBALS['%s']->length >= $__hx__spos) {
					$GLOBALS['%e']->unshift($GLOBALS['%s']->pop());
				}
				$GLOBALS['%s']->push($GLOBALS['%e'][0]);
				$tmp = (property_exists("haxe_Log", "trace") ? haxe_Log::$trace: array("haxe_Log", "trace"));
				$tmp1 = "nope" . Std::string($msg);
				call_user_func_array($tmp, array($tmp1, _hx_anonymous(array("fileName" => "JSTools.hx", "lineNumber" => 10, "className" => "microbe.tools.JSTools", "methodName" => "retente"))));
				if($times > 0) {
					$fn1 = $fn;
					$times = $times - 1;
					$a1 = $times;
					haxe_Timer::delay(array(new _hx_lambda(array(&$a1, &$fn1), "microbe_tools_JSTools_0"), 'execute'), 500);
				} else {
					throw new HException($msg);
				}
			}
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'microbe.tools.JSTools'; }
}
function microbe_tools_JSTools_0(&$a1, &$fn1) {
	{
		$GLOBALS['%s']->push("microbe.tools.JSTools::retente@12");
		$__hx__spos = $GLOBALS['%s']->length;
		microbe_tools_JSTools::retente($fn1, $a1);
		{
			$GLOBALS['%s']->pop();
			return;
		}
		$GLOBALS['%s']->pop();
	}
}

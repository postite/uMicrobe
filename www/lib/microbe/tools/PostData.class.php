<?php

// Generated by Haxe 3.4.7
class microbe_tools_PostData {
	public function __construct(){}
	static function serializeStatePostData($state) {
		$GLOBALS['%s']->push("microbe.tools.PostData::serializeStatePostData");
		$__hx__spos = $GLOBALS['%s']->length;
		$buf = new StringBuf();
		{
			$_g = 0;
			$_g1 = Reflect::fields($state);
			while($_g < $_g1->length) {
				$a = $_g1[$_g];
				$_g = $_g + 1;
				$console->log($a);
				$console->log(Reflect::field($state, $a));
				$console->log(Type::typeof(Reflect::field($state, $a)));
				$val = Reflect::field($state, $a);
				if($a === "__postData") {
					continue;
				}
				if(Std::is($val, _hx_qtype("Array"))) {
					$console->log("isaArray " . _hx_string_or_null($a));
					{
						$it = $val->iterator();
						while($it->hasNext()) {
							$it1 = $it->next();
							$p = $it1;
							$_a = _hx_string_or_null($a) . "=" . _hx_string_or_null(rawurlencode($p));
							$buf->add(_hx_string_or_null($_a) . "&");
							unset($p,$it1,$_a);
						}
						unset($it);
					}
					continue;
				}
				$p1 = Reflect::field($state, $a);
				$_a1 = _hx_string_or_null($a) . "=" . _hx_string_or_null(rawurlencode($p1));
				$buf->add(_hx_string_or_null($_a1) . "&");
				unset($val,$p1,$a,$_a1);
			}
		}
		{
			$value = $buf->b;
			$state->{"__postData"} = $value;
		}
		{
			$GLOBALS['%s']->pop();
			return $state;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'microbe.tools.PostData'; }
}

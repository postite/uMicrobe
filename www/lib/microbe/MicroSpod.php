<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ da28365)
 * Haxe source file: src/microbe/MicroSpod.hx
 */

namespace microbe;

use \ufront\db\_ValidationErrors\ValidationErrors_Impl_;
use \haxe\ds\StringMap;
use \php\Boot;
use \php\_NativeArray\NativeArrayIterator;
use \sys\db\Manager;
use \php\_Boot\HxString;
use \ufront\db\Object_hx;
use \php\_Boot\HxAnon;

class MicroSpod {
	/**
	 * @var string
	 */
	static public $modelPath = "model.";


	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function capitalize ($str) {
		#src/microbe/MicroSpod.hx:157: characters 6-56
		return (strtoupper((0 >= strlen($str) ? "" : $str[0]))??'null') . (HxString::substr($str, 1)??'null');
	}


	/**
	 * @param Object_hx $mod
	 * 
	 * @return StringMap
	 */
	static public function getDataFormuleVO ($mod) {
		#src/microbe/MicroSpod.hx:28: characters 3-47
		$modClass = MicroSpod::getModelClassFromInstance($mod);
		#src/microbe/MicroSpod.hx:31: characters 3-37
		$formule = MicroSpod::getFormule($modClass);
		#src/microbe/MicroSpod.hx:33: characters 3-16
		$spod = $mod;
		#src/microbe/MicroSpod.hx:34: characters 3-34
		Boot::deref(($formule->data["model"] ?? null))->id = $spod->id;
		#src/microbe/MicroSpod.hx:35: characters 3-19
		$valids = null;
		#src/microbe/MicroSpod.hx:36: lines 36-37
		if ($spod->validationErrors !== null) {
			#src/microbe/MicroSpod.hx:37: characters 3-45
			$valids = ValidationErrors_Impl_::toSimpleMap($spod->validationErrors);
		}
		#src/microbe/MicroSpod.hx:39: characters 17-31
		$field = new NativeArrayIterator(array_map("strval", array_keys($formule->data)));
		#src/microbe/MicroSpod.hx:39: characters 17-31
		while ($field->hasNext()) {
			unset($ids, $data, $field1);
			#src/microbe/MicroSpod.hx:39: lines 39-79
			$field1 = $field->next();
			#src/microbe/MicroSpod.hx:41: characters 4-45
			$data = \Reflect::getProperty($spod, $field1);
			#src/microbe/MicroSpod.hx:43: lines 43-78
			if (Boot::dynamicField(($formule->data[$field1] ?? null), 'relation') === "many") {
				#src/microbe/MicroSpod.hx:44: lines 44-45
				$ids = \Lambda::array($data->toList()->map(function ($d) {
					#src/microbe/MicroSpod.hx:45: characters 6-17
					return $d->id;
				}));
				#src/microbe/MicroSpod.hx:46: characters 4-31
				Boot::deref(($formule->data[$field1] ?? null))->data = $ids;
				#src/microbe/MicroSpod.hx:48: lines 48-58
				Boot::deref(($formule->data[$field1] ?? null))->dependency = \Lambda::array(Boot::dynamicField(($formule->data[$field1] ?? null), 'dependency')->map(function ($n)  use (&$ids, &$field1, &$formule) {
					#src/microbe/MicroSpod.hx:51: characters 6-44
					$prioField = Boot::dynamicField(($formule->data[$field1] ?? null), 'prio');
					#src/microbe/MicroSpod.hx:52: characters 6-28
					$prioValue = $n->value;
					#src/microbe/MicroSpod.hx:53: characters 6-39
					$inside = $ids->indexOf($n->id) !== -1;
					#src/microbe/MicroSpod.hx:55: characters 6-52
					return new HxAnon([
						"id" => $n->id,
						"value" => $prioValue,
						"inside" => $inside,
					]);
				}));
				#src/microbe/MicroSpod.hx:59: characters 6-59
				Boot::deref(($formule->data[$field1] ?? null))->data = Boot::dynamicField(($formule->data[$field1] ?? null), 'dependency');
			} else if (Boot::dynamicField(($formule->data[$field1] ?? null), 'relation') === "one") {
				#src/microbe/MicroSpod.hx:62: characters 6-29
				if ($data === null) {
					#src/microbe/MicroSpod.hx:62: characters 21-29
					continue;
				}
				#src/microbe/MicroSpod.hx:64: lines 64-71
				Boot::deref(($formule->data[$field1] ?? null))->dependency = \Lambda::array(Boot::dynamicField(($formule->data[$field1] ?? null), 'dependency')->map(function ($n1)  use (&$field1, &$data, &$formule) {
					#src/microbe/MicroSpod.hx:66: characters 9-47
					$prioField1 = Boot::dynamicField(($formule->data[$field1] ?? null), 'prio');
					#src/microbe/MicroSpod.hx:69: characters 8-59
					return new HxAnon([
						"id" => $n1->id,
						"value" => $n1->value,
						"inside" => $n1->id === $data->id,
					]);
				}));
				#src/microbe/MicroSpod.hx:73: characters 5-58
				Boot::deref(($formule->data[$field1] ?? null))->data = Boot::dynamicField(($formule->data[$field1] ?? null), 'dependency');
			} else {
				#src/microbe/MicroSpod.hx:75: characters 5-33
				Boot::deref(($formule->data[$field1] ?? null))->data = $data;
				#src/microbe/MicroSpod.hx:76: lines 76-77
				if ($valids !== null) {
					#src/microbe/MicroSpod.hx:77: characters 5-58
					Boot::deref(($formule->data[$field1] ?? null))->validationErrors = ($valids->data[$field1] ?? null);
				}
			}
		}

		#src/microbe/MicroSpod.hx:81: characters 3-17
		return $formule;
	}


	/**
	 * @param Object_hx $spod
	 * @param StringMap $formule
	 * 
	 * @return StringMap
	 */
	static public function getDataFormulefromVO ($spod, $formule = null) {
		#src/microbe/MicroSpod.hx:10: lines 10-15
		if ($formule === null) {
			#src/microbe/MicroSpod.hx:11: characters 3-51
			$mod = \Type::getClassName(\Type::getClass($spod));
			#src/microbe/MicroSpod.hx:12: characters 3-45
			$modClass = MicroSpod::getModelClassFromString($mod);
			#src/microbe/MicroSpod.hx:13: characters 3-37
			$formule1 = MicroSpod::getFormule($modClass);
			#src/microbe/MicroSpod.hx:14: characters 3-32
			$formule1 = MicroSpod::getFormule($modClass);
		}
		#src/microbe/MicroSpod.hx:17: characters 17-31
		$field = new NativeArrayIterator(array_map("strval", array_keys($formule->data)));
		#src/microbe/MicroSpod.hx:17: characters 17-31
		while ($field->hasNext()) {
			#src/microbe/MicroSpod.hx:17: lines 17-20
			$field1 = $field->next();
			#src/microbe/MicroSpod.hx:18: characters 4-45
			$data = \Reflect::getProperty($spod, $field1);
			#src/microbe/MicroSpod.hx:19: characters 4-32
			Boot::deref(($formule->data[$field1] ?? null))->data = $data;
		}

		#src/microbe/MicroSpod.hx:21: characters 3-17
		return $formule;
	}


	/**
	 * @param Class $mod
	 * 
	 * @return StringMap
	 */
	static public function getFormule ($mod) {
		#src/microbe/MicroSpod.hx:86: characters 3-53
		$formule = \Reflect::field($mod, "formule");
		#src/microbe/MicroSpod.hx:89: characters 17-31
		$field = new NativeArrayIterator(array_map("strval", array_keys($formule->data)));
		#src/microbe/MicroSpod.hx:89: characters 17-31
		while ($field->hasNext()) {
			unset($field1);
			#src/microbe/MicroSpod.hx:89: lines 89-122
			$field1 = $field->next();
			#src/microbe/MicroSpod.hx:90: characters 3-31
			if ($field1 === "model") {
				#src/microbe/MicroSpod.hx:90: characters 23-31
				continue;
			}
			#src/microbe/MicroSpod.hx:93: lines 93-120
			if ((Boot::dynamicField(($formule->data[$field1] ?? null), 'relation') === "many") || (Boot::dynamicField(($formule->data[$field1] ?? null), 'relation') === "one")) {
				#src/microbe/MicroSpod.hx:98: characters 3-22
				$relationB = null;
				#src/microbe/MicroSpod.hx:100: lines 100-104
				if (MicroSpod::hasPoint(Boot::dynamicField(($formule->data[$field1] ?? null), 'relationB'))) {
					#src/microbe/MicroSpod.hx:101: characters 3-65
					$relationB = MicroSpod::getModelClassFullPath(Boot::dynamicField(($formule->data[$field1] ?? null), 'relationB'));
				} else {
					#src/microbe/MicroSpod.hx:104: characters 3-67
					$relationB = MicroSpod::getModelClassFromString(Boot::dynamicField(($formule->data[$field1] ?? null), 'relationB'));
				}
				#src/microbe/MicroSpod.hx:106: characters 3-42
				Boot::deref(($formule->data[$field1] ?? null))->dependency = $relationB;
				#src/microbe/MicroSpod.hx:108: lines 108-117
				Boot::deref(($formule->data[$field1] ?? null))->dependency = \Lambda::array(MicroSpod::getManager($relationB)->all()->map(function ($n)  use (&$field1, &$formule) {
					#src/microbe/MicroSpod.hx:111: characters 6-44
					$prioField = Boot::dynamicField(($formule->data[$field1] ?? null), 'prio');
					#src/microbe/MicroSpod.hx:112: characters 5-46
					$prioValue = \Reflect::field($n, $prioField);
					#src/microbe/MicroSpod.hx:114: characters 5-37
					return new HxAnon([
						"id" => $n->id,
						"value" => $prioValue,
					]);
				}));
				#src/microbe/MicroSpod.hx:119: characters 4-57
				Boot::deref(($formule->data[$field1] ?? null))->data = Boot::dynamicField(($formule->data[$field1] ?? null), 'dependency');
			}
		}

		#src/microbe/MicroSpod.hx:123: characters 3-17
		return $formule;
	}


	/**
	 * @param Class $mod
	 * 
	 * @return Manager
	 */
	static public function getManager ($mod) {
		#src/microbe/MicroSpod.hx:134: characters 3-83
		$manager = \Reflect::field($mod, "manager");
		#src/microbe/MicroSpod.hx:135: characters 3-17
		return $manager;
	}


	/**
	 * @param Object_hx $spod
	 * 
	 * @return Class
	 */
	static public function getModelClassFromInstance ($spod) {
		#src/microbe/MicroSpod.hx:140: characters 3-30
		return \Type::getClass($spod);
	}


	/**
	 * @param string $stringModel
	 * @param string $_modelPath
	 * 
	 * @return Class
	 */
	static public function getModelClassFromString ($stringModel, $_modelPath = null) {
		#src/microbe/MicroSpod.hx:144: characters 3-44
		if ($_modelPath === null) {
			#src/microbe/MicroSpod.hx:144: characters 24-44
			$_modelPath = MicroSpod::$modelPath;
		}
		#src/microbe/MicroSpod.hx:145: characters 3-56
		$fullClassPath = ($_modelPath??'null') . (((strtoupper((0 >= strlen($stringModel) ? "" : $stringModel[0]))??'null') . (HxString::substr($stringModel, 1)??'null'))??'null');
		#src/microbe/MicroSpod.hx:146: lines 146-147
		if (HxString::indexOf($stringModel, ".") !== -1) {
			#src/microbe/MicroSpod.hx:147: characters 3-28
			$fullClassPath = $stringModel;
		}
		#src/microbe/MicroSpod.hx:150: characters 3-47
		return \Type::resolveClass($fullClassPath);
	}


	/**
	 * @param string $stringModel
	 * 
	 * @return Class
	 */
	static public function getModelClassFullPath ($stringModel) {
		#src/microbe/MicroSpod.hx:154: characters 3-45
		return \Type::resolveClass($stringModel);
	}


	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	static public function hasPoint ($s) {
		#src/microbe/MicroSpod.hx:127: characters 2-24
		return (new \EReg("\\.", ""))->match($s);
	}


	/**
	 * @return string
	 */
	static public function identify () {
		#src/microbe/MicroSpod.hx:163: characters 2-29
		return "spodTable" . "spodId";
	}
}


Boot::registerClass(MicroSpod::class, 'microbe.MicroSpod');
